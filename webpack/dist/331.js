(self.webpackChunknode_red_contrib_chatbot=self.webpackChunknode_red_contrib_chatbot||[]).push([[331],{54331:(e,t,n)=>{"use strict";n.r(t);var a=n(67294),l=n(18985),r=n(25912),o=n(46111),i=n(80091),s=n(71777),c=n(48891),u=n(77560);var m=n(84197),d=n(63792),p=n(66352),g=n(89061);function h(){return h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h.apply(this,arguments)}const f=[{name:"authorization.notAuthorized",description:"Shown when the user is not authorized in a private chatbot"},{name:"authorization.suspended",description:"Shown when the user is suspeded in a public chatbot"},{name:"authorization.userNotFound",description:"Shown when the user is not found on the local db, something went wrong"}],{NodeRedNode:y,SlugHelp:b,TypeCommand:E}=r.AK;(0,l.plug)("user-tabs",(({formValue:e={},formError:t=null,onChange:n})=>(e=e||{},a.createElement(o.Z,{formValue:e,formError:t,onChange:n,fluid:!0,autoComplete:"off"},a.createElement(i.Z,null,a.createElement(s.Z,null,"Authorized"),a.createElement(c.Z,{onChange:t=>n({...e,authorized:t,suspended:!t&&e.suspended}),checked:e.authorized}),a.createElement(u.Z,null,"Only authorized users can access private chatbot")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Suspend"),a.createElement(c.Z,{onChange:t=>n({...e,suspended:t,authorized:!t&&e.authorized}),checked:e.suspended}),a.createElement(u.Z,null,"Suspended user cannot access a public chatbot"))))),{id:"suspend-user",label:"Access",permission:"users.authorize"}),(0,l.plug)("sidebar",null,{permission:"configure",id:"configuration",label:"Configuration",icon:"cog",options:[{id:"authorization",label:"Bot Access",url:"/authorization"}]}),(0,l.plug)("pages",(0,r.ln)("redbot-authorization",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,y]=(0,a.useState)(e),[b,E]=(0,a.useState)(null),[v,w]=(0,a.useState)("access"),Z=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:v,onSelect:w,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"access"},"Access"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:b,ref:Z,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{y(e),E(null)},onCheck:e=>{E(e)}},"translations"===v&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:r.Xy,schema:f,disabled:n}))),"access"===v&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Private"),a.createElement(d.Z,{name:"private",accepter:(k=c.Z,({value:e,...t})=>a.createElement(k,h({checked:e},t))),disabled:n}),a.createElement(u.Z,null,"In a private chatbot, only authorized user can access"))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{Z.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&y(e)}},"Reset")))));var k}),{Legend:()=>a.createElement("div",null,a.createElement(y,null,"Authorization"),a.createElement("p",null,"Set the chatbot private, only authorized user will be able to use the chatbot. Set the authorization in the users section."),a.createElement("p",null,"For public chatbot it's possibile to suspend a user.")),title:"Bot Access"}),{permission:"configure",url:"/authorization",title:"Welcome Message",id:"page-authorization"}),(0,l.plug)("permissions",null,{permission:"users.authorize",name:"Authorize/Suspend",description:"Authorize or suspend a user",group:"Users"});var v=n(70319),w=n(98134),Z=n(20968),k=n(19642),x=n(96486),C=n.n(x),S=n(88182);const{StringType:q,ArrayType:I,ObjectType:T,DateType:N}=S.Z.Types,P=S.Z.Model({openings:I().of(T().shape({start:N().isRequired("Specify starting hour"),end:N().isRequired("Specify ending hour"),range:q().isRequired("Select a range for opening hours")})).addRule((e=>C().isArray(e)&&0!==e.length),"Specify at least an opening hour")});var R=n(45697),O=n.n(R),A=n(57770);const z=[{key:"url",type:"string",description:"The url opened clicking on the card button",defaultValue:"http://",color:"red"},{key:"labelButton",type:"string",description:"The label of the card button",defaultValue:"Open",color:"orange"}],j=({value:e,onChange:t,disabled:n=!1})=>a.createElement("div",null,a.createElement(A.Z,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,customFieldsSchema:z,fluid:!0,onChange:n=>t({...e,slug:n})}));j.propTypes={value:O().shape({slug:O().string}),onChange:O().func,disabled:O().bool};const M=j,B=[{name:"carousel.intro",description:"Introduction text of the carousel"}];(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"carousel",label:"Carousel",url:"/configuration-carousel"}]}),(0,l.plug)("pages",(0,w.Z)("carousel",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,h]=(0,a.useState)(null),[f,y]=(0,a.useState)("carousel"),b=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:f,onSelect:y,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"carousel"},"Carousel"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{model:P,disabled:!0,formValue:l,formError:c,ref:b,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),h(null)},onCheck:e=>{h(e)}},"translations"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:k.Z,schema:B,disabled:n}))),"carousel"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Carousel Cards",a.createElement(u.Z,{tooltip:!0},"Select one or more content")),a.createElement(d.Z,{name:"cards",accepter:Z.Z,form:M,labelAdd:"Add card",disabled:n}))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{b.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(v.NodeRedNode,null,"Cards"),a.createElement("p",null,"Configure the carousel of cards to show in the chabot: select one or more ",a.createElement("em",null,"slugs")," from the ",a.createElement("strong",null,"Content")," section."),a.createElement(v.SlugHelp,null)),title:"Carousel"}),{permission:"configure",url:"/configuration-carousel",title:"Carousel",id:"configuration-carousel"});const{StringType:F,ArrayType:K,ObjectType:L,DateType:D}=S.Z.Types,V=S.Z.Model({commands:K().of(L().shape({command:F().isRequired("Specify the command").addRule((e=>e.startsWith("/")),'Command should start with "/"'),slug:F().isRequired("Specifig a slug (shortcut) for a content")})).addRule((e=>{const t=e.map((e=>e.command));return C().uniq(t).length===t.length}),"Some contents have the same command")});var U=n(50721),H=n(85951);const W=({value:e,onChange:t,disabled:n=!1})=>a.createElement(U.Z,{justify:"space-between"},a.createElement(U.Z.Item,{colspan:8},a.createElement(H.Z,{value:e.command,placeholder:"/command",onChange:n=>t({...e,command:n})})),a.createElement(U.Z.Item,{colspan:15},a.createElement(r.MN,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,fluid:!0,onChange:n=>t({...e,slug:n})})));W.propTypes={value:O().shape({slug:O().string,command:O().string}),onChange:O().func,disabled:O().bool};const $=W,{NodeRedNode:J,SlugHelp:Q,TypeCommand:G}=r.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"commands",label:"Commands",url:"/configuration-commands"}]}),(0,l.plug)("pages",(0,r.ln)("commands",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,c]=(0,a.useState)(e),[m,h]=(0,a.useState)(null),f=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{model:V,disabled:!0,formValue:l,formError:m,ref:f,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{c(e),h(null)},onCheck:e=>{h(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"Content Commands",a.createElement(u.Z,{tooltip:!0},"Select one or more content to be shown after a command-line message (like ",a.createElement("em",null,"/privacy"),", etc)")),a.createElement(d.Z,{name:"commands",accepter:r.JX,form:$,labelAdd:"Add command",disabled:n,sortable:!1})),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{f.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&c(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(J,null,"Commands"),a.createElement("p",null,"Use the this node to show some contents in response of some command-like messages from users, this is a perfect place to put some statics documents for pricacy or tos (for example ",a.createElement(G,null,"/privacy")," or ",a.createElement(G,null,"/terms"),")."),a.createElement(Q,null)),title:"Commands"}),{permission:"configure",url:"/configuration-commands",title:"Commands",id:"configuration-commands"});var X=n(77188),Y=n(52996);const ee=[{name:"knowledge-base.bestMatch",description:"Text shown before the list of opening hours"},{name:"knowledge-base.sorryNotFound1",description:"Answer when no support articles were found (first version)"},{name:"knowledge-base.sorryNotFound2",description:"Answer when no support articles were found (second version)"},{name:"knowledge-base.sorryNotFound3",description:"Answer when no support articles were found (third version)"},{name:"knowledge-base.askSomething1",description:"What the chatbot answer when the user requests help (first version)"},{name:"knowledge-base.askSomething2",description:"What the chatbot answer when the user requests help (second version)"},{name:"knowledge-base.askSomething3",description:"What the chatbot answer when the user requests help (third version)"},{name:"knowledge-base.no"},{name:"knowledge-base.yes"},{name:"knowledge-base.ok"},{name:"knowledge-base.wasUseful",description:"Asked if an article is useful after a search"},{name:"knowledge-base.thanksBye1",description:"Answer when the user is satisfied with the found article (first version)"},{name:"knowledge-base.thanksBye2",description:"Answer when the user is satisfied with the found article (second version)"},{name:"knowledge-base.thanksBye3",description:"Answer when the user is satisfied with the found article (third version)"},{name:"knowledge-base.selectOneOfThese",description:"Shown when the user is asked to select on of the related articles of a search"},{name:"knowledge-base.somethingWentWrong",description:"Shown when an unrecoverable error occurs"},{name:"knowledge-base.noMoreArticles",description:"Shown when user ask to more results but there aren't"}],{Contents:te,Categories:ne}=r.VY,{NodeRedNode:ae,SlugHelp:le,TypeCommand:re,ChatbotStatus:oe}=r.AK;(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:"faq.edit",options:[{label:"Articles",url:"/knowledge-base",id:"faqs"},{label:"Categories",url:"/knowledge-base/categories",id:"faqs-categories"}]}),(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:["faq.configure","configure"],options:[{label:"Configuration",url:"/knowledge-base/configure",id:"faqs-configure"}]}),(0,l.plug)("pages",ne,{url:"/knowledge-base/categories",title:"Categories",id:"faq-categories",permission:"faq.edit",namespace:"faq",breadcrumbs:[{title:"Knowledge Base",url:"/knowledge-base"},"Categories"]}),(0,l.plug)("pages",(0,r.ln)("knowledge-base",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,h]=(0,a.useState)(e),[f,y]=(0,a.useState)(null),[b,E]=(0,a.useState)("openings"),v=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:b,onSelect:E,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"openings"},"Knowledge Base"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:f,ref:v,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{h(e),y(null)},onCheck:e=>{y(e)}},"translations"===b&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:r.Xy,schema:ee,disabled:n}))),"openings"===b&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Answer by Default"),a.createElement(d.Z,{name:"answerByDefault",accepter:c.Z,disabled:n}),a.createElement(u.Z,null,"With this option ",a.createElement("em",null,"enabled"),", the block execute a search for every input of the user, if ",a.createElement("em",null,"disabled")," the user has to enter in the ",a.createElement("em",null,"ask question state")," entering some sentences like ",a.createElement("em",null,'"I need help"'))),a.createElement(i.Z,null,a.createElement(s.Z,null,"Articles Sensitivity"),a.createElement(d.Z,{disabled:n,name:"threshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an article to be considered relevant. Lower this value if the search doesn't return any value.")),a.createElement(i.Z,null,a.createElement(s.Z,null,"NLP Sensitivity"),a.createElement(d.Z,{disabled:n,name:"nlpThreshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks.")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Suggest Articles"),a.createElement(d.Z,{disabled:n,name:"articlesToSuggest",accepter:r.zs,min:1,max:20,style:{maxWidth:"200px"},postfix:a.createElement("span",null," articles")}),a.createElement(u.Z,null,'The maximum articles to suggest if user clicks on "More articles"'))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{v.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&h(e)}},"Reset")))))}),{Legend:()=>{const{sendMessage:e}=(0,Y.f)();return a.createElement("div",null,a.createElement(ae,null,"Knowledge Base"),a.createElement("p",null,"Configure the ",a.createElement("b",null,"Knowledge Base")," block, use the ",a.createElement("b",null,"Articles")," section to enter the knowledge base of your product or service.",a.createElement("br",null),"For articles that represent the same content but in different languages, use the same ",a.createElement("em",null,"slug"),", the block will take care of the rest."),a.createElement("p",null,"Adjust the sensitivity of the search engine, raise it when the results are not relevant to the user's question, lower it when the search is not returning anything, keep an eye on the system console to see the score of the searches.",a.createElement("br",null),"With ",a.createElement("b",null,"Answer by Default")," the block can answer automatically to any input text message or can start answering only when the chatbot in ",a.createElement(oe,null,"faq.answer")," status, which is entered when the user types senteces like ",a.createElement(re,null,"I need help"),"."),a.createElement(le,null),a.createElement("div",{style:{textAlign:"center",marginTop:"10px"}},a.createElement(g.Z,{appearance:"primary",onClick:()=>{e("faq.refresh"),X.Z.success({title:"Knowledge Base",description:"Re-index of articles started"})}},"Refresh index")))},title:"Knowledge Base"}),{url:"/knowledge-base/configure",title:"Configure",id:"faqs-configure",permission:["faq.configure","configure"]}),(0,l.plug)("pages",te,{url:"/knowledge-base",title:"Knowledge Base",id:"faqs",namespace:"faq",permission:"faq.edit",breadcrumbs:["Knowledge Base","Articles"],labels:{saveContent:"Save article",createContent:"Create article"}}),(0,l.plug)("permissions",null,{permission:"faq.edit",name:"Edit Kwnowledge base",description:"Add and edit articles of the knowledge base",group:"Knowledge Base"}),(0,l.plug)("permissions",null,{permission:"faq.configure",name:"Configure Kwnowledge base",description:"Configure Kwnowledge base",group:"Knowledge Base"});var ie=n(18499),se=n(95990),ce=n(61009),ue=n(78932);const me=se.default`
query {
  contents(namespace: "plugins") {
    id,
    title,
    body,
    payload,
    fields {
      name,
      value
    }
  }
}
`,de=()=>{const e=(0,ie.xJ)(),{data:t}=(0,ue.Z)({namespace:"market-place"}),[n,l]=(0,a.useState)(null),{put:r}=(0,ce.default)("https://api.jsonbin.io",{headers:{"Content-Type":"application/json","secret-key":null!=t?t.jsonbin_key:null,versioning:"false"}}),o=null!=t&&!C().isEmpty(t.jsonbin_key);return a.createElement(g.Z,{disabled:null!=n||!o,appearance:"primary",onClick:async()=>{l("Loading...");const n=(await e.query({query:me,fetchPolicy:"network-only"})).data.contents.map((e=>{const t=e.fields.reduce(((e,t)=>({...e,[t.name]:t.value})),{});let n=null;return C().isEmpty(t.content_title)&&C().isEmpty(t.content_slug)&&C().isEmpty(t.content_body)||(n={title:t.content_title,slug:t.content_slug,body:t.content_body,namespace:t.content_namespace}),{id:t.id,name:e.title,description:e.body,url:t.url,flow:t.flow,version:t.version,github:t.github,keywords:t.tags,author:{name:t.author,url:t.author_url},content:n,initialConfiguration:null==e.payload||C().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration}}));l("Publishing..."),await r(`/b/${t.jsonbin_id}`,n),l(null),X.Z.success({title:"Published",description:"Plugin list published succesfully "})}},null!=n?n:"Publish plugins")};(0,l.plug)("sidebar",null,{id:"market-place",label:"Market Place",url:"/market-place",icon:"shopping-basket"}),(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-market-place",label:"Market Place",url:"/configuration-market-place"}]}),(0,l.plug)("pages",(0,r.ln)("market-place",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,m]=(0,a.useState)(null),h=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{formValue:l,formError:c,ref:h,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),m(null)},onCheck:e=>{m(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"JSONbin.io id"),a.createElement(d.Z,{name:"jsonbin_id",accepter:H.Z,disabled:n}),a.createElement(u.Z,null,"The ",a.createElement("em",null,"id")," of the ",a.createElement("strong",null,"jsonbin.io")," snippet of the plugins meta info")),a.createElement(i.Z,null,a.createElement(s.Z,null,"JSONbin.io key"),a.createElement(d.Z,{name:"jsonbin_key",accepter:H.Z,disabled:n}),a.createElement(u.Z,null,"The ",a.createElement("em",null,"secret key")," to write on ",a.createElement("strong",null,"jsonbin.io"))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{h.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,"Configure the id and the key to access ",a.createElement("strong",null,"jsonbing.io")," for the plugins met information.",a.createElement("br",null),"Docs about the API ",a.createElement("a",{href:"https://jsonbin.io/api-reference/bins/read",target:"blank"},"here"),"."),title:"Market Place"}),{permission:"configure",url:"/configuration-market-place",title:"Market Place",id:"configuration"}),(0,l.plug)("pages",r.VY.Contents,{url:"/market-place",title:"Market Place",id:"market-place",namespace:"plugins",breadcrumbs:["Market Place","Plugins"],labels:{saveContent:"Save plugin",createContent:"Create plugin",emptyContent:"No plugins"},custom:()=>a.createElement(de,null),customFieldsSchema:[{key:"url",type:"string",description:"URL of the compiled plugin",color:"cyan"},{key:"flow",type:"string",description:"URL of the Node-RED flow for this plugin",color:"cyan"},{key:"id",type:"string",description:"Unique id of the plugin",color:"red"},{key:"version",type:"string",description:"The version of the current (latest) plugin",color:"red"},{key:"github",type:"string",description:"The URL of the github page of the plugin",color:"red"},{key:"author",type:"string",description:"The username of the author of the plugin",color:"orange"},{key:"author_url",type:"string",description:"The home page of the username, if any",color:"orange"},{key:"tags",type:"tags",description:"List of keywords, comma separated",color:"red"},{key:"content_title",type:"string",description:"Create a content with this title",color:"violet"},{key:"content_slug",type:"string",description:"Create a content with this slug",color:"violet"},{key:"content_body",type:"string",description:"Create a content with this body",color:"violet"},{key:"content_namespace",type:"string",description:"Create a content with this namespace",color:"violet"}]}),(0,l.plug)("content-tabs",(({formValue:e={},onChange:t=(()=>{})})=>{const{initial_configuration:n}=e||{};return a.createElement("div",{style:{paddingBottom:"15px"}},a.createElement(r.Ad,{value:C().isEmpty(n)?"":n,height:"55vh",onChange:n=>{t({...e,initial_configuration:C().isEmpty(n)?null:n})}}))}),{id:"content-configuration",label:"Configuration",namespace:["plugins"]});var pe=n(91624);n(83751);const ge=e=>"location"===e?"#5E8263":e?"#D36135":e?"#595D88":"#000000";n(26926);const he=()=>a.createElement(pe.Z,{className:"map-marker",icon:"map-marker",size:"2x",style:{color:"red"}});var fe=n(73727),ye=n(87596),be=n(82122),Ee=n(69873),ve=n(40660),we=n(94184),Ze=n.n(we);function ke(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class xe extends a.Component{render(){const{thumb:e,height:t,width:n,maxWidth:l,maxHeight:r}=this.props,o=t/n;let i=Math.floor(o*l);i>r&&(i=r);const s={backgroundImage:`url(${e})`,backgroundPosition:"center",width:`${l}px`,height:`${i}px`};return a.createElement("div",{style:s})}}ke(xe,"propTypes",{thumb:O().string,height:O().number,width:O().number,maxWidth:O().number,maxHeight:O().number,onClick:O().func}),ke(xe,"defaultProps",{thumb:null,height:null,width:null,maxWidth:200,maxHeight:400,onClick:()=>{}});const Ce=xe;function Se(){return Se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Se.apply(this,arguments)}const qe=({topic:e,ts:t,content:n,onDelete:l,onZoom:r,thumb:o,image:i,width:s,height:c,maxHeight:u,...m})=>{let d;return C().isEmpty(o)||(d=a.createElement(Ce,{thumb:o,topic:e,width:s,height:c,maxHeight:u,onClick:()=>{console.log("clicked"),r({})}})),a.createElement(Ee.Z,Se({title:e},m,{onMouseLeave:()=>{}}),a.createElement("div",{className:"popover-map-marker"},"vario"))};function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}qe.propTypes={topic:O().string,thumb:O().string,image:O().string,content:O().string,ts:O().instanceOf(Date),onDelete:O().func,width:O().number,height:O().number},qe.defaultProps={topic:null,thumb:null,image:null,content:null,ts:null,onDelete:()=>{},width:null,height:null};class Te extends a.Component{constructor(e){super(e),this.handleLoaded=this.handleLoaded.bind(this),this.handleClick=this.handleClick.bind(this);const{thumb:t}=e;this.state={needPreload:!C().isEmpty(t),preload:!1,width:null,height:null}}componentDidMount(){const{type:e,color:t}=this.props;null!=this.tooltip&&"tooltip"===e&&(this.tooltip.querySelector(".rs-tooltip-inner").style.backgroundColor=t,this.tooltip.querySelector(".rs-tooltip-arrow").style.backgroundColor=t)}handleLoaded(e){this.setState({preload:!1,width:e.target.width,height:e.target.height},(()=>this.trigger.show()))}handleClick(e){e.preventDefault(),e.stopPropagation();const{thumb:t}=this.props;C().isEmpty(t)?this.trigger.show():this.setState({preload:!0})}render(){const{children:e,point:t,text:n,type:l,popover:r,showPopover:o,thumb:i,image:s,inkColor:c,maxHeight:u,onDeletePoint:m,onShowImage:d}=this.props;let{icon:p,color:g,size:h}=this.props;const{height:f,width:y,preload:b,needPreload:E}=this.state;let v;switch(C().isEmpty(p)&&(p="map-marker"),C().isEmpty(h)&&(h="lg"),C().isEmpty(g)&&(g="#FF3300"),C().isEmpty(c)&&(g="#000000"),new Date(parseInt(t.ts,10)),l){case"icon":v=a.createElement("a",{href:"#",className:Ze()("wrapper-map-marker",{preload:b}),onClick:this.handleClick},b&&a.createElement("img",{src:i,style:{display:"none"},onLoad:this.handleLoaded,alt:""}),a.createElement(pe.Z,{className:Ze()("map-marker",{pointer:o}),icon:p,size:h,style:{color:g}}));break;case"tooltip":v=a.createElement("div",{ref:e=>this.tooltip=e,style:{height:20,backgroundColor:"#ff0000"}},a.createElement(be.Z,{visible:!0},a.createElement("span",{style:{color:c}},n)));break;default:v=null}if(o){if(E&&b)return v;const t=a.createElement(Ee.Z,{onMouseLeave:()=>{}},a.createElement("div",{className:"popover-map-marker"},e));return a.createElement(ve.Z,{trigger:"click",placement:"top",speaker:t,triggerRef:e=>this.trigger=e},v)}return v}}Ie(Te,"propTypes",{point:O().shape({topic:O().string,text:O().string,ts:O().string}).isRequired,icon:O().string,size:O().string,color:O().string,text:O().string,popover:O().string,thumb:O().string,image:O().string,showPopover:O().bool,type:O().oneOf(["icon","tooltip"]),inkColor:O().string,maxHeight:O().number}),Ie(Te,"defaultProps",{icon:"map-marker",color:"#FF3300",text:null,size:"2x",popover:null,thumb:null,image:null,type:"icon",showPopover:!1,inkColor:"#ffffff",maxHeight:480});const Ne=Te,Pe=se.default`
query($where: JSON) {
  records(limit: 50, order: "geohash", where: $where) {
    id,
    status,
    title,
    latitude,
    longitude,
    geohash,
    payload
  }
}`,{NodeRedNode:_e,SlugHelp:Re,TypeCommand:Oe}=r.AK;(0,l.plug)("sidebar",null,{id:"wiggle",label:"Panopticon",icon:"logo-survey",permission:"wiggle.view",options:[{id:"wiggle-secrets",label:"Secrets",url:"/secrets"},{id:"wiggle-secrets-map",label:"Secrets Map",url:"/secrets-map"}]}),(0,l.plug)("pages",(()=>{const[e,t]=(0,a.useState)(null),[n,l]=(0,a.useState)(!1),o=(0,ie.xJ)();let i=(e||[]).filter((e=>null!=e.latitude&&null!=e.longitude)).map((e=>a.createElement(Ne,{key:e.id,lat:e.latitude,lng:e.longitude,point:{},popover:e.title,showPopover:!0},a.createElement("div",{style:{minHeight:"120px"}},a.createElement("strong",null,e.title),null!=e.payload.secret_url&&a.createElement("div",{style:{backgroundImage:`url(${e.payload.secret_url})`,backgroundPosition:"center",minWidth:"120px",backgroundRepeat:"no-repeat",backgroundSize:"contain",height:"120px"}}),null!=e.payload.secret&&a.createElement("div",null,e.payload.secret),a.createElement(fe.rU,{to:`/record/${e.id}`},"view")))));return a.createElement(r._z,{className:"my-page"},a.createElement(r.Oo,{pages:["Secret locations"]}),a.createElement("div",{style:{width:"100%",height:"450px",position:"relative"}},n&&a.createElement("div",{style:{position:"absolute",top:"20px",left:"20px",zIndex:1e7}},a.createElement(ye.Z,{size:"md"})),a.createElement(r.oe,{defaultCenter:{lat:45.4854739,lng:9.2022176},defaultZoom:11,height:450,onChange:async({bounds:e})=>{const{se:n,nw:a}=e;l(!0);const{data:{records:r}}=await o.query({query:Pe,variables:{where:{latitude:{gte:n.lat,lte:a.lat},longitude:{gte:a.lng,lte:n.lng}}},fetchPolicy:"network-only"});t(r),l(!1)}},i)))}),{url:"/secrets-map",title:"Secrets Map",id:"secrets-maps",permission:"wiggle.view",breadcrumbs:["Secrets Map"]}),(0,l.plug)("pages",r.Op,{url:"/secrets",title:"Secrets",id:"secrets",type:"secret",permission:"wiggle.view",breadcrumbs:["Secrets"],labels:{title:"Name",record:"secret"},columns:[{id:"secret-type",label:"Type",width:120,cell:({payload:e})=>a.createElement(r.vx,{color:ge(e.secret_type)},e.secret_type)}]}),(0,l.plug)("permissions",null,{permission:"wiggle.view",name:"View Panopticon secret",description:"View secrets stored in Panopticon Bot",group:"Panopticon"}),(0,l.plug)("user-record-types",null,{type:"secret",name:"Secret",list:"Secrets",description:"List of Panopticon secrets",form:({record:e})=>{const{payload:t}=e,n=new Date(t.secret_duration),l=new Date,o=n.getTime()-l.getTime();return a.createElement("div",{className:"secret-viewer"},a.createElement(U.Z,{justify:"space-between",style:{marginTop:"30px"}},a.createElement(U.Z.Item,{colspan:7},a.createElement("div",null,a.createElement("b",null,"Secret is")," ",a.createElement(r.vx,{color:ge(t.secret_type)},t.secret_type)),("time"===t.secret_type||"location+time"===t.secret_type)&&a.createElement("div",null,a.createElement("b",null,"Revealed when"),a.createElement("br",null),a.createElement("em",null,n.toLocaleDateString(),", ",n.toLocaleTimeString()),o>0&&a.createElement("div",{className:"secret-reveal-at"},Math.round(o/1e3/60)," minutes"),o<0&&a.createElement("div",null,"Secret date is due")),null!=t.secret_bounty&&a.createElement(a.Fragment,null,a.createElement("b",null,"ICE price:")," ",t.secret_bounty," EUR",a.createElement("br",null)),null!=t.secret_payment&&a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("b",null,"User paid to reveal the secret"),a.createElement("br",null),a.createElement("b",null,"Email: ")," ",t.secret_payment.order_info.email,a.createElement("br",null),a.createElement("b",null,"Currency: ")," ",t.secret_payment.currency,a.createElement("br",null),a.createElement("b",null,"Amount: ")," ",(t.secret_payment.total_amount/100).toFixed(2),a.createElement("br",null),a.createElement("b",null,"Payment ID: ")," ",t.secret_payment.provider_payment_charge_id,a.createElement("br",null))),a.createElement(U.Z.Item,{colspan:7},null!=t.secret_url&&a.createElement("div",null,a.createElement("b",null,"Secret image"),a.createElement("img",{src:t.secret_url,width:"100%"})),null!=t.secret&&a.createElement("div",null,a.createElement("b",null,"Secret text"),a.createElement("div",{className:"display-secret"},t.secret))),a.createElement(U.Z.Item,{colspan:7},null!=e.latitude&&a.createElement("div",{className:"ui-devices-map",style:{height:"300px"}},a.createElement(r.oe,{defaultCenter:{lat:e.latitude,lng:e.longitude},defaultZoom:11},a.createElement(he,null))),null==e.latitude&&a.createElement("div",null,a.createElement("em",null,"No location for this secret")))))},status:[{value:"private",label:"Private"},{value:"public",label:"Public"},{value:"crazy",label:"Crazy"},{value:"keyholder-free",label:"Keyholder free"},{value:"keyholder-taken",label:"Keyholder taken"}]}),(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"panopticon",label:"Panopticon",url:"/configuration-panopticon"}]}),(0,l.plug)("pages",(0,r.ln)("panopticon",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,c]=(0,a.useState)(e),[m,h]=(0,a.useState)(null),f=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{disabled:!0,formValue:l,formError:m,ref:f,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{c(e),h(null)},onCheck:e=>{h(e)}},a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Content"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"content",accepter:r.MN}),a.createElement(u.Z,null,"Select a ",a.createElement("em",null,"slug")," for a multi-language content to show additional information when a user requests information about opening hours")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Sensitivity"),a.createElement(d.Z,{disabled:n,name:"threshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks."))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{f.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&c(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement("p",null,"Configure some ",a.createElement("i",null,"Panopticon")," parameters")),title:"Panopticon"}),{permission:"configure",url:"/configuration-panopticon",title:"Configure Panopticon",id:"configuration-panopticon"});const{NodeRedNode:Ae,SlugHelp:ze,TypeCommand:je}=r.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"postcard-bot",label:"PostcardBot",url:"/configuration-postcard-bot"}]}),(0,l.plug)("pages",(0,r.ln)("postcardbot",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,m]=(0,a.useState)(null),[h,f]=(0,a.useState)("openings"),y=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{disabled:!0,formValue:l,formError:c,ref:y,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),m(null)},onCheck:e=>{m(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"ClickSend username"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"clicksendUser",accepter:H.Z}),a.createElement(u.Z,null,"Username for ClickSend API")),a.createElement(i.Z,null,a.createElement(s.Z,null,"ClickSend API Key"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"clicksendApiKey",accepter:H.Z}),a.createElement(u.Z,null,"Secret API key for ClickSend API")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary Username"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinaryUsername",accepter:H.Z}),a.createElement(u.Z,null,"Cloudinary username, where the images are uploaded")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary API Key"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinaryApiKey",accepter:H.Z})),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary Secret"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinarySecret",accepter:H.Z})),a.createElement(i.Z,null,a.createElement(s.Z,null,"PDF Path (production)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"pdfPathProduction",accepter:H.Z}),a.createElement(u.Z,null,"Path to store generated PDF in production")),a.createElement(i.Z,null,a.createElement(s.Z,null,"PDF Path (development)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"pdfPathDevelopment",accepter:H.Z}),a.createElement(u.Z,null,"Path to store generated PDF in development")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Image Path (production)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"imagePathProduction",accepter:H.Z}),a.createElement(u.Z,null,"Path to store uploaded images in production")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Image Path (development)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"imagePathDevelopment",accepter:H.Z}),a.createElement(u.Z,null,"Path to store uploaded images in development")),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{y.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(Ae,null,"Opening Hours node"),a.createElement("p",null,"Configure the behaviour of this node: customize the opening hours and and some additional content (for example to show extra openings, etc)."),a.createElement(ze,null)),title:"PostcardBot"}),{permission:"configure",url:"/configuration-postcard-bot",title:"PostcardBot",id:"configuration-postcard-bot"}),(0,l.plug)("sidebar",null,{id:"postcardbot",label:"PostcardBot",icon:"logo-survey",options:[{id:"postcard-invoices",label:"Invoices",url:"/invoices"}]}),(0,l.plug)("pages",r.Op,{url:"/invoices",title:"Invoices",id:"invoices",type:"invoice",breadcrumbs:["Invoices"],labels:{title:"Name",record:"invoice"},columns:[]}),(0,l.plug)("user-record-types",null,{type:"invoice",name:"Invoice",list:"Invoices",description:"List of PostcardBot invoices",form:()=>a.createElement("div",null,"ok"),status:[{value:"new",label:"New"},{value:"problem",label:"Problem"}]});var Me=n(13067);const Be=e=>C().isEmpty(e.first_name)&&C().isEmpty(e.last_name)?C().isEmpty(username)?"Anonymous (id: {id})":e.username:[e.first_name,e.last_name].filter((e=>!C().isEmpty(e))).join(" "),Fe=({value:e,validation:t,onChange:n=(()=>{}),onSubmit:l=(()=>{})})=>{const{state:{activeChatbots:c}}=(0,Me.Z)();return console.log("----activeChatbots",c),a.createElement("div",null,a.createElement(o.Z,{fluid:!0,formValue:e,onChange:n,formError:t},a.createElement(U.Z,{justify:"space-between"},a.createElement(U.Z.Item,{colspan:15},a.createElement(i.Z,null,a.createElement(s.Z,null,"Recipient"),a.createElement(d.Z,{name:"recipient",accepter:r.P2,cleanable:!0,onChange:t=>{if(null!=t&&_.isArray(t.chatIds)&&!_.isEmpty(t.chatIds)){const a=t.chatIds.find((e=>((e,t)=>e.some((e=>e.transport===t)))(c,e.transport)));null!=a&&n({...e,chatId:a.chatId,userId:t.userId,recipient:t,transport:a.transport,botNode:c.find((e=>e.transport===a.transport)).nodeId})}}}))),a.createElement(U.Z.Item,{colspan:8},a.createElement(i.Z,null,a.createElement(s.Z,null,"Transport",a.createElement(u.Z,{tooltip:!0},"Shows only platforms for which the selected users has a valid ",a.createElement("em",null,"chatId"))),a.createElement(d.Z,{name:"botNode",accepter:r.Tl,transports:null!=e.recipient?e.recipient.chatIds.map((e=>e.transport)):null,disabled:null==e.recipient,onChange:t=>{const a=c.find((e=>e.nodeId===t));if(null!=a&&null!=e.recipient){const l=e.recipient.chatIds.find((e=>e.transport===a.transport));null!=l&&n({...e,chatId:l.chatId,botNode:t})}},block:!0})))),a.createElement(i.Z,{style:{marginTop:"15px"}},a.createElement(s.Z,null,"Message to send"),a.createElement(d.Z,{name:"message",componentClass:"textarea",style:{height:"150px",resize:"none"},onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&l()}}))))},{useModal:Ke}=r.u_,Le=e=>null!=e.recipient&&null!=e.chatId&&null!=e.botNode&&!C().isEmpty(e.message),{StringType:De,ObjectType:Ve}=S.Z.Types,Ue=(S.Z.Model({recipient:Ve().isRequired("Select recipient"),botNode:De().isRequired("Select chatbot platoform"),message:De().isRequired("Enter message for the user")}),({user:e,appearance:t="ghost",transport:n})=>{const{sendMessage:l}=(0,r.fI)(),{state:{activeChatbots:o}}=(0,Me.Z)(),{open:i,close:s,validate:c,error:u,disable:m,openWithModel:d,openWith:p}=Ke({view:Fe,title:"Send message",labelSubmit:"Send message",size:"sm"});let h,f;if(!C().isEmpty(n)&&e.chatIds.some((e=>e.transport===n))){const t=o.find((e=>e.transport===n));console.log("chatBot",t,o,n),null!=t&&(h=t.nodeId,f=e.chatIds.find((e=>e.transport===n)).chatId)}return a.createElement(g.Z,{appearance:t,onClick:async()=>{let t={recipient:e,botNode:h,chatId:f,message:""};t=await p(t,Le),t&&(l("message.send",t),X.Z.success({title:"Message sent",description:`Message sent successfully to "${Be(t.recipient)}"`}))}},"Contact User")});n(56959);const{WidgetForm:He,Content:We,Footer:$e}=r.DD;(0,l.plug)("widgets",(({stats:e})=>{const[t,n]=(0,a.useState)({message:""}),l=!_.isEmpty(t.chatId)&&!_.isEmpty(t.botNode),{sendMessage:o}=(0,Y.f)();return a.createElement(r.s_,{title:"Send Message",className:"widget-send-message"},a.createElement(He,{fluid:!0,formValue:t,onChange:e=>n(e)},a.createElement(We,null,a.createElement(Fe,{value:t,onChange:e=>n(e),onSubmit:()=>{o("message.send",t),n({...t,message:""})}})),a.createElement($e,null,a.createElement(i.Z,null,a.createElement(p.Z,null,a.createElement(g.Z,{appearance:"primary",disabled:!l,onClick:()=>{o("message.send",t),n({...t,message:""})}},"Send Message"),a.createElement("div",{className:"key-hint"},"Shift + Enter to Send"),a.createElement(g.Z,{style:{float:"right"},appearance:"default",onClick:()=>n({botNode:null,recipient:null,chatId:null,message:""})},"Cancel"))))))}),{x:0,y:0,w:2,h:6,isResizable:!1,id:1}),(0,l.plug)("user-button",Ue),(0,l.plug)("user-record-buttons",(({record:e})=>a.createElement(Ue,{transport:e.transport,appearance:"primary",user:e.user})),{type:"survey"});var Je=n(25280),Qe=n(21712);function Ge(){return Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Ge.apply(this,arguments)}var Xe=n(61151);var Ye=n(14617),et=n(4664),tt=(n(44923),n(52908)),nt=n(50580),at=n(62863),lt=n(55670),rt=n(71262),ot=n(23447);const it=({params:e,onCancel:t=(()=>{}),onSubmit:n=(()=>{}),disabled:l=!1,activeChatbots:r})=>{const[c,u]=(0,a.useState)(e);return a.createElement(at.Z,{backdrop:!0,show:!0,onHide:t,keyboard:!1,className:"modal-simulator"},a.createElement(at.Z.Header,null,a.createElement(at.Z.Title,null,"Simulator Configuration")),a.createElement(at.Z.Body,null,a.createElement(o.Z,{formValue:c,onChange:e=>{const t={...e};null==e.user||null!=c.user&&c.user.id===e.user.id||!e.user.language||(t.language=e.user.language),u(t)},fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Impersonated User"),a.createElement(d.Z,{accepter:rt.Z,name:"user",placeholder:"Test User",style:{width:"100%"}})),a.createElement(U.Z,{justify:"space-between",style:{marginBottom:"20px"}},a.createElement(U.Z.Item,{colspan:11},a.createElement(i.Z,null,a.createElement(s.Z,null,"Language"),a.createElement(d.Z,{accepter:lt.Z,name:"language",block:!0}))),a.createElement(U.Z.Item,{colspan:11},a.createElement(i.Z,null,a.createElement(s.Z,null,"Transport"),a.createElement(d.Z,{accepter:ot.Z,name:"nodeId",block:!0,size:"sm",cleanable:!1})))))),a.createElement(at.Z.Footer,null,a.createElement(g.Z,{onClick:t,appearance:"subtle"},"Cancel"),a.createElement(g.Z,{appearance:"primary",disabled:l,appearance:"primary",onClick:()=>n({...c,chatBot:r.find((e=>e.nodeId===c.nodeId))})},"Save configuration")))};it.propTypes={params:O().shape({language:O().string,user:O().shape({id:O().number,userId:O().string,username:O().string,language:O().string}),nodeId:O().string}),disabled:O().bool,onCancel:O().func,onSubmit:O().func,activeChatbots:O().arrayOf(O().shape({transport:O().string,nodeId:O().string,name:O().string}))};const st=it,ct=({user:e,language:t,nodeId:n,activeChatbots:l,dispatch:r})=>{const[o,i]=(0,a.useState)(null);return a.createElement("div",{className:"simulator-transport-menu cancel-drag"},null!=o&&a.createElement(st,{activeChatbots:l,params:o,onCancel:()=>i(null),onSubmit:e=>{r({type:"params",params:e}),i(null)}}),a.createElement("div",{className:"meta"},null!=e&&a.createElement("div",{className:"user"},e.username," ",a.createElement("em",null,"(",e.userId,")")),null==e&&a.createElement("div",{className:"user"},"Test User"),a.createElement(nt.Z,null,t)),a.createElement(tt.Z,{appearance:"subtle",icon:a.createElement(pe.Z,{icon:"cog"}),onClick:()=>i({user:e,language:t,nodeId:n}),style:{marginTop:"-3px",marginRight:"1px"}}))};ct.propTypes={user:O().shape({id:O().number,userId:O().string,username:O().string,language:O().string}),language:O().string,nodeId:O().string,dispatch:O().func,activeChatbots:O().arrayOf(O().shape({transport:O().string,nodeId:O().string,name:O().string}))};const ut=ct;var mt=n(30381),dt=n.n(mt);const pt=a.createContext();var gt;(0,l.plug)("widgets",(0,Xe.Z)((gt=({activeChatbots:e,user:t})=>{const{state:{simulator:n},dispatch:l,sendMessage:r}=(({activeChatbots:e})=>{const{state:t,dispatch:n}=(e=>{const{state:t,dispatch:n}=(0,a.useContext)(Qe.Z),l=Object.keys(e);return(0,a.useEffect)((()=>{l.forEach((a=>{void 0===t[a]&&n({type:"default",key:a,value:e[a]})}))}),[]),{state:l.reduce(((n,a)=>(n[a]=void 0!==t[a]?t[a]:e[a],n)),{}),dispatch:n}})({simulator:{messages:{},transport:C().isEmpty(e)?null:e[0].transport,nodeId:C().isEmpty(e)?null:e[0].nodeId,globals:null,language:"en",user:null}}),{sendMessage:l}=(0,Y.f)({onReceive:(e,t)=>{"simulator"===e&&n({type:"message",payload:t,topic:e})}});return{state:t,dispatch:n,sendMessage:(e,{echo:n=!0}={})=>{const{transport:a,nodeId:r,language:o,user:i}=t.simulator;l("simulator",{transport:a,nodeId:r,language:o,userId:null!=i?i.userId:42,username:null!=i?i.username:"testUser",firstName:null!=i?i.first_name:null,lastName:null!=i?i.last_name:null,payload:{content:e,type:"message"},simulatorOptions:{echo:n}})}}})({activeChatbots:e}),{messages:o,transport:i,nodeId:s,language:c,user:u}=n,m=null==e,d=e=>{!C().isObject(e)||"postback"!==e.type&&"quick-reply"!==e.type||r(e.value,{echo:!1})};return a.createElement(Je.Z,{title:"Chat Simulator",className:"chat-simulator",menu:!m&&a.createElement(ut,{user:u,language:c,nodeId:s,transport:i,dispatch:l,activeChatbots:e,onChange:e=>l({type:"chatBot",chatBot:e})})},!m&&a.createElement(pt.Provider,{value:n},a.createElement(Ye.zL,null,a.createElement(Ye.Vm,null,null!=o[i]&&o[i].map((e=>C().isArray(e)?a.createElement(et.Z,{onClick:d,key:e.map((e=>e.messageId)).join(),message:e.map((e=>({...e,username:"chatbot"})))}):a.createElement(et.Z,{onClick:d,key:e.messageId,message:e.inbound?e:{...e,username:"chatbot"}})))),a.createElement(Ye.M9,{onSend:e=>r(e),onClear:()=>l({type:"clear",transport:i})}))))},e=>a.createElement(Qe.Z.Consumer,null,(({activeChatbots:t})=>a.createElement(gt,Ge({},e,{activeChatbots:t}),e.children)))),"user"),{x:0,y:0,w:2,h:8,isResizable:!0,id:"simulator-widget",permission:"simulator"}),(0,l.plug)("reducers",((e,t)=>"default"===t.type?{...e,[t.key]:t.value}:e)),(0,l.plug)("reducers",((e,t)=>{switch(t.type){case"message":const{payload:n,topic:a}=t;if("simulator"!==a)return e;const l=C().isArray(e.simulator.messages[n.transport])?e.simulator.messages[n.transport]:[];let r;r=C().isArray(n.payload)?n.payload.map((e=>({...n,...e,payload:void 0,ts:dt()()}))):{...n,ts:dt()()};const o={...e.messages,[n.transport]:[...l,r]};return{...e,simulator:{...e.simulator,messages:o}};case"clear":return{...e,simulator:{...e.simulator,messages:{...e.messages,[t.transport]:[]}}};case"globals":return{...e,simulator:{...e.simulator,globals:t.globals}};case"params":const{params:i}=t;return{...e,simulator:{...e.simulator,transport:i.chatBot.transport,nodeId:i.chatBot.nodeId,language:i.language,user:i.user}};default:return e}})),(0,l.plug)("permissions",null,{permission:"simulator",name:"Chat Simulator",description:"Access to chat simulator",group:"General"});var ht=n(30306);n(67383);const ft=({question:e})=>{switch(e.type){case"text":case"number":return a.createElement("div",{className:Ze()("answer",{[e.type]:!0})},e.answer);case"multiple":return a.createElement("div",{className:"answer multiple"},e.data.map(((t,n)=>a.createElement("div",{className:Ze()("choice",{selected:t.answer===e.answer||t.value===e.answer})},a.createElement("span",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n])," ",t.answer))))}};ft.propTypes={question:O().shape({type:O().oneOf(["text","number","multiple","image"]),answer:O().string,data:O().oneOfType([O().string,O().shape({answer:O().string,value:O().string})])})};const yt=({record:e})=>{const{payload:t}=e;return a.createElement("div",{className:"survey-viewer"},t.map((e=>a.createElement("div",{key:e.id,className:"question"},a.createElement("h5",null,e.title),a.createElement(ft,{question:e})))))};yt.propTypes={record:O().shape({question:O().shape({type:O().oneOf(["text","number","multiple","image"]),answer:O().string,data:O().oneOfType([O().string,O().shape({answer:O().string,value:O().string})])})})};const bt=yt;var Et=n(74491);n(16573),n(37353);const vt=({icon:e,text:t,tooltip:n,color:l})=>{const r=a.createElement("div",{className:Ze()("ui-badge-icon-tooltip",{[l]:!0})},a.createElement(pe.Z,{icon:e}),null!=t&&a.createElement("span",{className:"text"},t));return null!=n?a.createElement(ve.Z,{trigger:"hover",placement:"top",speaker:a.createElement(be.Z,null,n)},r):r};vt.propTypes={color:O().oneOf(["red","orange"]),text:O().oneOfType([O().string,O().number]),icon:O().string,tooltip:O().string};const wt=vt;var Zt=n(11450);const kt=(e,t)=>e.find((e=>e.id===t.id)),xt=(e,t)=>null!=t.parent?e.find((e=>e.id===t.parent)):null,Ct=(e,t)=>e.some((e=>e.parent===t.id)),St=e=>{const t={};return e.forEach((n=>{if(null!=n.parent&&null==t[n.parent]){const a=e.find((e=>e.id===n.parent));null!=a.parent?t[n.parent]=t[a.parent]+1:t[n.parent]=1}})),t},qt=e=>{const t=St(e),n={root:0},a=t=>{if(null==t)return"";const l=null!=t.parent?e.find((e=>e.id===t.parent)):null;return`${null!=l?a(l):""}${n[null!=l?l.id:"root"]}.`},l=t=>{const l=null!=t.parent?e.find((e=>e.id===t.parent)):null;let r;return null!=l?null!=n[l.id]?(n[l.id]+=1,r=n[l.id]):(n[l.id]=1,r=1):(n.root+=1,r=n.root),`Q${a(l)}${r}`};return e.map((e=>({...e,tag:l(e),level:C().isEmpty(e.parent)?0:t[e.parent]})))},It=a.createContext({});n(14589);const Tt=({children:e,size:t="small"})=>a.createElement("div",{className:Ze()("question-tag",{[t]:!0})},e),Nt=(0,Et.JV)((()=>a.createElement("div",{className:"grippy"}))),Pt=({question:e,onSelect:t=(()=>{}),active:n=!1,level:l=null})=>{const{questions:r}=(0,a.useContext)(It),o=(_.isArray(e.data)?e.data:[]).filter((e=>null!=e.jump)).map((e=>{const t=r.find((t=>t.id===e.jump));if(null!=t)return a.createElement(wt,{key:t.tag,icon:"code-fork",text:t.tag,color:"orange",tooltip:`Jump to ${t.tag} if user selects "${e.answer}"`})}));let i;if(null!=e.parent&&((e,t)=>{const n=e.findIndex((e=>e.id===t.id));return-1!==n&&0!==n&&t.parent===e[n-1].id})(r,e)){const t=_(r).chain().filter((e=>"multiple"===e.type)).map((e=>_.isArray(e.data)?e.data:[])).flatten().some((t=>t.jump===e.id)).value();t||(i=a.createElement(wt,{icon:"exclamation-triangle",key:"jump-warning",color:"red",tooltip:"No conditional jump to this question.\n        This is a nested question and can only be reached in the survey with a conditional answer in a multiple choice question"}))}return a.createElement("div",{className:Ze()("ui-survey-question",{active:n})},null!=l&&a.createElement("div",{className:"indent",style:{flex:`0 0 ${8*l}px`}}),a.createElement(Nt,null),a.createElement("div",{className:"content",onClick:n=>{n.preventDefault(),t(e)}},a.createElement("div",{className:"meta"},a.createElement(Tt,null,e.tag),a.createElement("div",{className:"icons"},o,i,"multiple"===e.type&&a.createElement(wt,{icon:"list",text:e.data.length,tooltip:"Multiple choice question"}),"text"===e.type&&a.createElement(wt,{icon:"font",tooltip:"Free text question"}),"number"===e.type&&a.createElement(wt,{icon:"percent",tooltip:"Numeric question"}),"image"===e.type&&a.createElement(wt,{icon:"image",tooltip:"Image   question"}))),a.createElement("div",{className:"title"},e.title)),a.createElement("div",{className:"selection-bar"}))};Pt.propTypes={question:O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}),onSelect:O().func,active:O().bool,level:O().number};const _t=(0,Et.gU)(Pt);var Rt=n(76543),Ot=n(20450),At=n(90616),zt=n(73935);let jt=null;function Mt({okButtonText:e="Ok",onOk:t,showCancelButton:n=!0,cancelButtonText:l="Cancel",onCancel:r,children:o}){const[i,s]=(0,a.useState)(!0),c=(0,a.useCallback)((()=>{s(!1),t&&t()}),[t]),u=(0,a.useCallback)((()=>{s(!1),r&&r()}),[r]);return a.createElement(at.Z,{size:"sm",show:i},a.createElement(at.Z.Body,null,o),a.createElement(at.Z.Footer,null,n&&a.createElement(g.Z,{onClick:u},l),a.createElement(g.Z,{onClick:c,appearance:"primary"},e)))}const Bt=(e,t,{okLabel:n="Ok",cancelLabel:l="Cancel"}={})=>{let r={...t};return new Promise((t=>{zt.render(a.createElement(Mt,{okButtonText:n,cancelButtonText:l,key:Date.now(),onOk:()=>t(r),onCancel:()=>t(null)},a.createElement(e,{formValue:r,onChange:e=>r=e})),(jt||(jt=document.createElement("div"),document.body.appendChild(jt)),jt))}))};n(63934);var Ft=n(94973);const Kt=({formValue:e,questions:t,onChange:n=(()=>{}),exclude:l})=>a.createElement("div",null,a.createElement(o.Z,{formDefaultValue:e,onChange:n,fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Jump To Question"),a.createElement(d.Z,{name:"jump",accepter:Ft.Z,block:!0,data:t.filter((e=>null==l||e.id!==l)).map((e=>({value:e.id,label:e.title,...e}))),renderMenuItem:(e,t)=>a.createElement("div",null,a.createElement(Tt,null,t.tag)," ",t.title),renderValue:(e,t)=>a.createElement("div",null,a.createElement(Tt,null,t.tag)," ",t.title),onClean:()=>n({...e,jump:null})}),a.createElement(u.Z,null,"Select the question to jump to if the user select this the answer ",a.createElement("em",null,'"',e.answer,'"'))))),Lt=a.createContext({});function Dt(){return Dt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Dt.apply(this,arguments)}const Vt=({formValue:e,onChange:t=(()=>{})})=>a.createElement("div",null,a.createElement(o.Z,{formDefaultValue:e,onChange:e=>{C().isEmpty(e.value)&&(e.value=null),t(e)},fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Store value for the answer"),a.createElement(d.Z,{name:"value",accepter:H.Z}),a.createElement(u.Z,null,"Select the value for the answer ",a.createElement("em",null,'"',e.answer,'"')," (which is what the user will see), select tha real value that will be stored (generally a more concise string)"))));Vt.propTypes={formDefaultValue:O().shape({value:O().string}),onChange:O().func};const Ut=({value:e,onChange:t,order:n})=>{const{questions:l}=(0,a.useContext)(It),{question:r}=(0,a.useContext)(Lt);return a.createElement("div",{className:"ui-survey-editor-multiple-answer"},a.createElement("div",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n]),a.createElement("div",{className:"answer"},a.createElement(H.Z,{value:e.answer,onChange:n=>t({...e,answer:n})})),a.createElement("div",{className:"controls"},a.createElement(tt.Z,{appearance:null!=e.value?"primary":"default",icon:a.createElement(pe.Z,{icon:"align-justify",size:"lg"}),onClick:async()=>{const n=await Bt(Vt,e);null!=n&&t({...e,value:n.value})}})," ",a.createElement(tt.Z,{appearance:null!=e.jump?"primary":"default",icon:a.createElement(pe.Z,{icon:"arrow-circle-right",size:"lg"}),onClick:async()=>{const n=await Bt((e=>a.createElement(Kt,Dt({},e,{exclude:r.id,questions:l}))),e);null!=n&&t({...e,jump:n.jump})}})))};Ut.propTypes={value:O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}),onChange:O().func,order:O().number};const Ht=({data:e,onChange:t=(()=>{})})=>a.createElement("div",{className:"control control-multiple"},a.createElement(Z.Z,{value:e,form:Ut,onChange:t,labelAdd:"Add answer",labelEmpty:"No answers"}));Ht.propTypes={onChange:O().func,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])};const Wt=Ht;n(10873);const $t=[{type:"multiple",label:"Multiple Choice",default:[]},{type:"text",label:"Free Text",default:null},{type:"number",label:"Number",default:null},{type:"image",label:"Upload image",default:null}],Jt=({question:e,onChange:t=(()=>{}),onRemove:n=(()=>{}),onAdd:l=(()=>{})})=>{let r;return r="multiple"===e.type?a.createElement(Wt,{data:e.data,onChange:n=>t({...e,data:n})}):a.createElement("div",{className:"control control-empty"},"No configuration available for this type of question"),a.createElement(Lt.Provider,{value:{question:e}},a.createElement("div",{className:"question-detail"},a.createElement("div",{className:"header"},a.createElement(Tt,{size:"large"},e.tag),a.createElement("div",{className:"buttons"},a.createElement(p.Z,null,a.createElement(Rt.Z,{renderTitle:()=>a.createElement(tt.Z,{appearance:"primary",icon:a.createElement(pe.Z,{icon:"plus"})})},a.createElement(Rt.Z.Item,{onSelect:()=>l({after:e})},"Add question after"),a.createElement(Rt.Z.Item,{onSelect:()=>l({before:e})},"Add question before"),a.createElement(Rt.Z.Item,{onSelect:()=>l({nested:e})},"Add nested question")),a.createElement(tt.Z,{onClick:async()=>{await(0,At.Z)(a.createElement("div",null,"Remove the question ",a.createElement(Tt,null,e.tag),_.isEmpty(e.title)?null:a.createElement("em",null,' "',e.title,'"')," ?"),{okLabel:"Yes, remove"})&&n(e)},icon:a.createElement(pe.Z,{icon:"trash2"})})))),a.createElement("div",{className:"title"},a.createElement("textarea",{className:"rs-input",rows:3,value:e.title,onChange:n=>t({...e,title:n.target.value})})),a.createElement(p.Z,null,a.createElement(Ot.Z,null,$t.map((n=>a.createElement(g.Z,{key:n.type,appearance:e.type===n.type?"primary":"ghost",onClick:()=>t({...e,type:n.type,data:n.default})},n.label))))),a.createElement("div",{className:"configuration"},r)))};Jt.propTypes={question:O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}),onChange:O().func,onAdd:O().func,onRemove:O().func};const Qt=Jt,Gt=(0,Et.hv)((({children:e})=>a.createElement("div",{className:"questions"},e))),Xt=({value:e=[{}],onChange:t=(()=>{})})=>{const[n,l]=(0,a.useState)();(0,a.useEffect)((()=>{null==n&&l(C().isEmpty(e)?null:e[0].id)}),[e]);const r=(0,a.useCallback)((({oldIndex:n,newIndex:a})=>{const l=((e,t,n)=>{if(t===n)return e;const a=[...e],l=n,r=t,o=l<0?a.length+l:l,i=a.splice(r,1)[0];a.splice(o,0,i);const s=a[n],c=n>0?a[n-1]:null,u=Ct(e,s),m=xt(e,s);return null!=c&&Ct(e,c)?a[n].parent=c.id:a[n].parent=null,u&&e.forEach((e=>{e.parent===s.id&&(e.parent=null!=m?m.id:null)})),a})(e,n,a);t(qt(l))})),o=e.find((e=>e.id===n)),i=St(e);return a.createElement(It.Provider,{value:{questions:e}},a.createElement("div",{className:"ui-survey-editor"},a.createElement(Gt,{onSortEnd:r,helperClass:"sorting",useDragHandle:!0},e.map(((e,t)=>a.createElement(_t,{key:e.id,index:t,question:e,level:null!=e.parent?i[e.parent]:null,active:n===e.id,onSelect:e=>l(e.id)})))),a.createElement("div",{className:"question-detail"},null!=o&&a.createElement(Qt,{key:o.id,question:o,onChange:a=>t(((e,t,n)=>{const a=[...e];return a[e.findIndex((e=>e.id===t))]=n,a})(e,n,a)),onRemove:n=>{l(null),t(qt(((e,t)=>{const n=xt(e,t);return e.filter((e=>e.id!==t.id)).map((e=>e.parent==t.id?null!=n?{...e,parent:n.id}:C().omit(e,"parent"):e))})(e,n)))},onAdd:n=>{const{questions:a,question:r}=((e,t)=>{const n={id:(0,Zt.Z)("q_"),title:"",type:"multiple",data:[]};let a;if(null!=t.after){const l=kt(e,t.after);Ct(e,l)?n.parent=l.id:n.parent=l.parent,a=C().flatten(e.map((e=>e.id===l.id?[l,n]:e)))}else if(null!=t.before){const l=kt(e,t.before);n.parent=l.parent,a=C().flatten(e.map((e=>e.id===l.id?[n,l]:e)))}else if(null!=t.nested){const l=kt(e,t.nested);n.parent=l.id,a=C().flatten(e.map((e=>e.id===l.id?[l,n]:e)))}return{question:n,questions:qt(a)}})(e,n);l(r.id),t(a)}}))))};Xt.propTypes={onChange:O().func,disabled:O().bool,value:O().arrayOf(O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}))};const Yt=Xt,en=[{name:"survey.intro",description:"Text shown at the beginning of the survey if no content is provided"},{name:"survey.end1",description:"End of the survey (version 1)"},{name:"survey.end2",description:"End of the survey (version 2)"},{name:"survey.end3",description:"End of the survey (version 3)"},{name:"survey.wrongAnswer",description:"When the user input a wrong answer, for example an answer which is not listed in the multiple choice,\n      a string where is expected a number, etc  "},{name:"survey.error",description:"Shown when unrecoverable error happened in the survey flow"}];(0,l.plug)("sidebar",null,{id:"surveys",label:"Surveys",icon:"logo-survey",permission:"surveys.view",options:[{id:"answer-surveys",label:"Surveys",url:"/surveys"},{id:"configuration-survey",label:"Configure survey",url:"/configuration-surveys"}]}),(0,l.plug)("pages",(0,w.Z)("survey",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,h]=(0,a.useState)(null),[f,y]=(0,a.useState)("questions"),b=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:f,onSelect:y,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"surveys"},"Survey"),a.createElement(m.Z.Item,{eventKey:"questions"},"Questions"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:c,ref:b,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),h(null)},onCheck:e=>{h(e)}},"translations"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:k.Z,schema:en,disabled:n}))),"surveys"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Name"),a.createElement(d.Z,{name:"name",autocomplete:"off",accepter:H.Z,disabled:n})),a.createElement(i.Z,null,a.createElement(s.Z,null,"Introduction Message",a.createElement(u.Z,{tooltip:!0},"Select the content to show when the user starts the survey")),a.createElement(d.Z,{name:"introduction",accepter:A.Z,useSlug:!0,disabled:n}))),"questions"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"questions",accepter:Yt,disabled:n}))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{b.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,"Survues TBD"),title:"Surveys"}),{permission:"configure",url:"/configuration-surveys",title:"Survey",id:"configuration-surveys"}),(0,l.plug)("pages",ht.O,{url:"/surveys",title:"Surveys",id:"surveys",type:"survey",permission:"surveys.view",breadcrumbs:["Surveys"],labels:{}}),(0,l.plug)("permissions",null,{permission:"surveys.view",name:"View surveys",description:"View surveys answered by chatbot users",group:"Surveys"}),(0,l.plug)("user-record-types",null,{type:"survey",name:"Survey",list:"Surveys",description:"Answer to surveys",form:bt,status:[{value:"new",label:"New"},{value:"viewed",label:"Viewed"}]}),(0,l.plug)("user-button",(({user:e})=>a.createElement(fe.rU,{to:`/surveys?userId=${e.userId}`},a.createElement(g.Z,{appearance:"ghost"},"View Surveys"))))},9092:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".secret-viewer .display-secret{padding:4px 10px;font-family:monospace;background-color:#eeeeee;border:1px solid #bbbbbb}.secret-viewer .secret-reveal-at{font-size:40px;font-weight:bolder}\n",""]),e.exports=t},8434:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".widget-send-message .rs-form-group{flex:1 0;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.widget-send-message .rs-form-group .rs-form-control-wrapper{flex:1 0}.widget-send-message .key-hint{color:#999999;display:inline-block}\n",""]),e.exports=t},64055:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".simulator-transport-menu .rs-picker-subtle .rs-btn:focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:focus,.simulator-transport-menu .rs-picker-subtle .rs-btn.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-btn:hover,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:hover{background-color:#ffffff}.simulator-transport-menu .rs-picker-toggle{margin-top:-5px}.chat-simulator .meta{display:inline-block;margin-right:5px}.chat-simulator .meta .user{display:inline-block;margin-right:5px;font-size:14px;font-weight:normal}.chat-simulator .ui-grid-panel-content{margin:-5px -10px -10px -10px}.chat-simulator .ui-chat-window{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.picker-item-transport em{font-weight:normal;color:#777777;font-size:12px}.picker-item-transport b{color:#333333;font-size:13px}\n",""]),e.exports=t},32385:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".survey-viewer{padding:20px}.survey-viewer .question{margin-top:15px}.survey-viewer .question:first-child{margin-top:0px}.survey-viewer .answer.multiple .placeholder{font-weight:bold}.survey-viewer .answer.multiple .choice.selected{font-weight:bold;color:#FF3C2B}\n",""]),e.exports=t},31258:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-badge-icon-tooltip{display:inline-block;background-color:#C9C9C9;padding:0px 5px;border-radius:2px;line-height:17px;margin-top:3px;margin-right:3px;height:18px}.ui-badge-icon-tooltip i{font-size:11px}.ui-badge-icon-tooltip .text{display:inline;margin-left:3px;font-size:12px}.ui-badge-icon-tooltip.orange{background-color:#FFB049;color:#000000}.ui-badge-icon-tooltip.red{background-color:#DB2323;color:#ffffff}\n",""]),e.exports=t},43872:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor{margin-top:10px;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.ui-survey-editor .questions{order:0;flex:0 0 250px;align-self:auto;border:1px solid #dddddd}.rs-list-item{padding-top:0px;padding-bottom:0px}.ui-survey-question{display:block;height:80px;border-bottom:1px solid #eeeeee;background-color:#ffffff;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:center}.ui-survey-question .icons{display:inline-block;float:right}.ui-survey-question .grippy{content:'....';width:14px;overflow:hidden;height:80px;display:inline-block;overflow:hidden;line-height:5px;padding:3px 4px;cursor:move;vertical-align:middle;margin-top:-.7em;margin-right:.3em;font-size:12px;font-family:sans-serif;letter-spacing:2px;color:#cccccc;text-shadow:1px 0 1px #cccccc}.ui-survey-question .grippy::after{content:'.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..'}.ui-survey-question .grippy{flex:0 0 14px;height:75px}.ui-survey-question .indent{flex:0 0 4px;height:80px;background-color:#efefef}.ui-survey-question .content{flex:1 0;height:80px}.ui-survey-question .title{font-size:13px;color:#444444;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;line-height:17px}.ui-survey-question .description{color:#999999;font-size:12px}.ui-survey-question:hover{text-decoration:none;background-color:#eeeeee}.ui-survey-question .selection-bar{width:4px;height:80px}.ui-survey-question.active .selection-bar{background-color:orange}.ui-survey-question.sorting{-webkit-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);-moz-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75)}\n",""]),e.exports=t},25730:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor .question-detail{order:0;flex:1 0 auto;align-self:auto;padding-left:10px}.ui-survey-editor .question-detail .title{margin-top:15px}.ui-survey-editor .question-detail .rs-btn-toolbar{margin-top:15px}.ui-survey-editor .question-detail .buttons{float:right}.ui-survey-editor .question-detail .buttons .rs-btn-toolbar{margin-top:0px}.ui-survey-editor .question-detail .configuration{margin-top:25px}\n",""]),e.exports=t},46202:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".question-tag{display:inline-block;background-color:#333333;color:white;font-size:12px;border-radius:2px;padding:1px 3px;line-height:12px}.question-tag.large{font-weight:bold;border-radius:3px;height:35px;line-height:35px;vertical-align:middle;padding:0px 6px;font-size:22px}\n",""]),e.exports=t},2477:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor-multiple-answer{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:center;align-items:center}.ui-survey-editor-multiple-answer .placeholder{flex:0 0 36px;border-radius:6px;display:inline-block;background-color:#F4FDCE;border:1px solid #BCE747;width:36px;height:36px;text-align:center;vertical-align:middle;line-height:36px;font-weight:bold;margin-right:10px}.ui-survey-editor-multiple-answer .answer{flex:1 0}.ui-survey-editor-multiple-answer .controls{flex:0 0 auto;text-align:left;margin-left:5px}\n",""]),e.exports=t},26926:(e,t,n)=>{var a=n(93379),l=n(9092);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},56959:(e,t,n)=>{var a=n(93379),l=n(8434);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},44923:(e,t,n)=>{var a=n(93379),l=n(64055);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},67383:(e,t,n)=>{var a=n(93379),l=n(32385);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},37353:(e,t,n)=>{var a=n(93379),l=n(31258);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},16573:(e,t,n)=>{var a=n(93379),l=n(43872);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},10873:(e,t,n)=>{var a=n(93379),l=n(25730);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},14589:(e,t,n)=>{var a=n(93379),l=n(46202);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},63934:(e,t,n)=>{var a=n(93379),l=n(2477);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RnhYLEVBQVUsRUFBUSxPQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUXlYLFdBQWF6WCxFQUFRMlUsUUFBVTNVLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ3VYLEVBQU83ZixHQUFJc0ksRUFBUyxNQVFqQ3dYLEVBQUl4WCxFQUxILENBRWRsSSxPQUFpQixPQUNqQkEsV0FBb0IsSUFNcEJ5ZixFQUFPSCxRQUFVcFgsRUFBUTBYLFFBQVUsSSxnQkNsQm5DLElBQUlGLEVBQU0sRUFBUSxPQUNGeFgsRUFBVSxFQUFRLE9BSUMsaUJBRnZCQSxFQUFVQSxFQUFReVgsV0FBYXpYLEVBQVEyVSxRQUFVM1UsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDdVgsRUFBTzdmLEdBQUlzSSxFQUFTLE1BUWpDd1gsRUFBSXhYLEVBTEgsQ0FFZGxJLE9BQWlCLE9BQ2pCQSxXQUFvQixJQU1wQnlmLEVBQU9ILFFBQVVwWCxFQUFRMFgsUUFBVSxJLGdCQ2xCbkMsSUFBSUYsRUFBTSxFQUFRLE9BQ0Z4WCxFQUFVLEVBQVEsTUFJQyxpQkFGdkJBLEVBQVVBLEVBQVF5WCxXQUFhelgsRUFBUTJVLFFBQVUzVSxLQUcvQ0EsRUFBVSxDQUFDLENBQUN1WCxFQUFPN2YsR0FBSXNJLEVBQVMsTUFRakN3WCxFQUFJeFgsRUFMSCxDQUVkbEksT0FBaUIsT0FDakJBLFdBQW9CLElBTXBCeWYsRUFBT0gsUUFBVXBYLEVBQVEwWCxRQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9hdXRob3JpemF0aW9uL3ZpZXdzL2NvbmZpZ3VyYXRpb24tZm9ybS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2F1dGhvcml6YXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9hdXRob3JpemF0aW9uL3ZpZXdzL3N1c3BlbmQtZm9ybS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2Nhcm91c2VsL21vZGVscy5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2Nhcm91c2VsL3ZpZXdzL2Zvcm0tY2FyZC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2Nhcm91c2VsL3ZpZXdzL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9jYXJvdXNlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2NvbW1hbmRzL21vZGVscy5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2NvbW1hbmRzL3ZpZXdzL2Zvcm0tY29tbWFuZC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2NvbW1hbmRzL2luZGV4LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvY29tbWFuZHMvdmlld3MvZm9ybS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL2tub3dsZWRnZS1iYXNlL3ZpZXdzL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9rbm93bGVkZ2UtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL21hcmtldC1wbGFjZS92aWV3cy9wdWJsaXNoLXBsdWdpbnMuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9tYXJrZXQtcGxhY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9tYXJrZXQtcGxhY2Uvdmlld3MvY29uZmlndXJlLW1hcmtldC1wbGFjZS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL21hcmtldC1wbGFjZS92aWV3cy9kZWZhdWx0LWNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9wYW5vcHRpY29uL2hlbHBlcnMvc2VjcmV0LWNvbG9yLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvcGFub3B0aWNvbi92aWV3cy9zZWNyZXQtdmlld2VyLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvcGFub3B0aWNvbi92aWV3cy9pbWFnZS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3Bhbm9wdGljb24vdmlld3MvYmFsbG9vbi5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3Bhbm9wdGljb24vdmlld3MvcGluLXBvaW50LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvcGFub3B0aWNvbi9wYWdlcy9zZWNyZXQtbWFwLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvcGFub3B0aWNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3Bhbm9wdGljb24vdmlld3MvY29uZmlndXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3Bvc3RjYXJkYm90L3ZpZXdzL2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9wb3N0Y2FyZGJvdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvaGVscGVycy91c2VyL3JlYWRhYmxlLW5hbWUuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zZW5kLW1lc3NhZ2Uvdmlld3Mvc2VuZC1mb3JtLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvc2VuZC1tZXNzYWdlL3ZpZXdzL3NlbmQtbWVzc2FnZS1idXR0b24uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zZW5kLW1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zaW11bGF0b3Ivdmlld3Mvc2ltdWxhdG9yLW1vZGFsLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvc2ltdWxhdG9yL3ZpZXdzL3BhbmVsLW1lbnUuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zaW11bGF0b3IvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3NpbXVsYXRvci9jb250ZXh0LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy93cmFwcGVycy93aXRoLWFjdGl2ZS1jaGF0Ym90cy5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3NpbXVsYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvaG9va3MvdXNlLXJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zdXJ2ZXlzL3ZpZXdzL3N1cnZleS12aWV3ZXIuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvYmFkZ2UtaWNvbi10b29sdGlwL2luZGV4LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL3N1cnZleS1lZGl0b3IvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci92aWV3cy90YWcuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci92aWV3cy9xdWVzdGlvbi5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9wcm9tcHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci92aWV3cy9jb250cm9scy92aWV3cy9nby10by5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL2NvbnRleHQtcXVlc3Rpb24tZGV0YWlsLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL3N1cnZleS1lZGl0b3Ivdmlld3MvY29udHJvbHMvbXVsdGlwbGUuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci92aWV3cy9xdWVzdGlvbi1kZXRhaWwuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3N1cnZleXMvdmlld3MvY29uZmlndXJhdGlvbi1mb3JtLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvc3VydmV5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3N1cnZleXMvdmlld3MvZ28tdG8tc3VydmV5LWJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3Bhbm9wdGljb24vc3R5bGVzL3NlY3JldC12aWV3ZXIuc2NzcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3NlbmQtbWVzc2FnZS93aWRnZXQtc2VuZC5zY3NzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvc2ltdWxhdG9yL3NpbXVsYXRvci5zY3NzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL21jX3BsdWdpbnMvc3VydmV5cy9zdHlsZXMvc3VydmV5LXZpZXdlci5zY3NzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL2JhZGdlLWljb24tdG9vbHRpcC9zdHlsZS5zY3NzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL3N1cnZleS1lZGl0b3Ivc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL3N0eWxlcy9xdWVzdGlvbi1kZXRhaWwuc2NzcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL3N0eWxlcy90YWcuc2NzcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL3ZpZXdzL2NvbnRyb2xzL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9wYW5vcHRpY29uL3N0eWxlcy9zZWNyZXQtdmlld2VyLnNjc3M/ZmMyZiIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3NlbmQtbWVzc2FnZS93aWRnZXQtc2VuZC5zY3NzPzMyMTMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vbWNfcGx1Z2lucy9zaW11bGF0b3Ivc2ltdWxhdG9yLnNjc3M/MjY2MCIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9tY19wbHVnaW5zL3N1cnZleXMvc3R5bGVzL3N1cnZleS12aWV3ZXIuc2Nzcz8yZGU0Iiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL2JhZGdlLWljb24tdG9vbHRpcC9zdHlsZS5zY3NzP2Q1YjUiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci9zdHlsZS5zY3NzPzI0ODQiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2NvbXBvbmVudHMvc3VydmV5LWVkaXRvci9zdHlsZXMvcXVlc3Rpb24tZGV0YWlsLnNjc3M/ZjUxNSIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yL3N0eWxlcy90YWcuc2Nzcz84YzZlIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3NyYy9jb21wb25lbnRzL3N1cnZleS1lZGl0b3Ivdmlld3MvY29udHJvbHMvc3R5bGUuc2Nzcz8xYWMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgRm9ybSwgRm9ybUNvbnRyb2wsIEJ1dHRvblRvb2xiYXIsIEZvcm1Hcm91cCwgQ29udHJvbExhYmVsLCBIZWxwQmxvY2ssIE5hdiwgVG9nZ2xlIH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuY29uc3QgZGljdGlvbmFyeVNjaGVtYSA9IFtcbiAge1xuICAgIG5hbWU6ICdhdXRob3JpemF0aW9uLm5vdEF1dGhvcml6ZWQnLFxuICAgIGRlc2NyaXB0aW9uOiAnU2hvd24gd2hlbiB0aGUgdXNlciBpcyBub3QgYXV0aG9yaXplZCBpbiBhIHByaXZhdGUgY2hhdGJvdCdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdhdXRob3JpemF0aW9uLnN1c3BlbmRlZCcsXG4gICAgZGVzY3JpcHRpb246ICdTaG93biB3aGVuIHRoZSB1c2VyIGlzIHN1c3BlZGVkIGluIGEgcHVibGljIGNoYXRib3QnXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnYXV0aG9yaXphdGlvbi51c2VyTm90Rm91bmQnLFxuICAgIGRlc2NyaXB0aW9uOiAnU2hvd24gd2hlbiB0aGUgdXNlciBpcyBub3QgZm91bmQgb24gdGhlIGxvY2FsIGRiLCBzb21ldGhpbmcgd2VudCB3cm9uZydcbiAgfVxuXTtcblxuY29uc3Qgd2l0aENoZWNrZWQgPSBDb21wb25lbnQgPT4ge1xuICByZXR1cm4gKHsgdmFsdWUsIC4uLnByb3BzIH0pID0+IChcbiAgICA8Q29tcG9uZW50XG4gICAgICBjaGVja2VkPXt2YWx1ZX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKHtcbiAgdmFsdWUsXG4gIG9uU3VibWl0ID0gKCkgPT4geyB9LFxuICBkaXNhYmxlZCA9IGZhbHNlXG59KSA9PiB7XG4gIGNvbnN0IFtmb3JtVmFsdWUsIHNldEZvcm1WYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG4gIGNvbnN0IFtmb3JtRXJyb3IsIHNldEZvcm1FcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3RhYiwgc2V0VGFiXSA9IHVzZVN0YXRlKCdhY2Nlc3MnKTtcbiAgY29uc3QgZm9ybSA9IHVzZVJlZihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TmF2IGFwcGVhcmFuY2U9XCJ0YWJzXCIgYWN0aXZlS2V5PXt0YWJ9IG9uU2VsZWN0PXtzZXRUYWJ9IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzI1cHgnIH19PlxuICAgICAgICA8TmF2Lkl0ZW0gZXZlbnRLZXk9XCJhY2Nlc3NcIj5BY2Nlc3M8L05hdi5JdGVtPlxuICAgICAgICA8TmF2Lkl0ZW0gZXZlbnRLZXk9XCJ0cmFuc2xhdGlvbnNcIj5UcmFuc2xhdGlvbnM8L05hdi5JdGVtPlxuICAgICAgPC9OYXY+XG4gICAgICA8Rm9ybVxuICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgZm9ybVZhbHVlPXtmb3JtVmFsdWV9XG4gICAgICAgIGZvcm1FcnJvcj17Zm9ybUVycm9yfVxuICAgICAgICByZWY9e2Zvcm19XG4gICAgICAgIGNoZWNrVHJpZ2dlcj1cIm5vbmVcIlxuICAgICAgICBsYXlvdXQ9XCJ2ZXJ0aWNhbFwiXG4gICAgICAgIGZsdWlkXG4gICAgICAgIG9uQ2hhbmdlPXtmb3JtVmFsdWUgPT4ge1xuICAgICAgICAgIHNldEZvcm1WYWx1ZShmb3JtVmFsdWUpO1xuICAgICAgICAgIHNldEZvcm1FcnJvcihudWxsKTtcbiAgICAgICAgfX1cbiAgICAgICAgb25DaGVjaz17ZXJyb3JzID0+IHtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3RhYiA9PT0gJ3RyYW5zbGF0aW9ucycgJiYgKFxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIG5hbWU9XCJ0cmFuc2xhdGlvbnNcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtEaWN0aW9uYXJ5fVxuICAgICAgICAgICAgICAgIHNjaGVtYT17ZGljdGlvbmFyeVNjaGVtYX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApfVxuICAgICAgICB7dGFiID09PSAnYWNjZXNzJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5Qcml2YXRlPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIG5hbWU9XCJwcml2YXRlXCJcbiAgICAgICAgICAgICAgICBhY2NlcHRlcj17d2l0aENoZWNrZWQoVG9nZ2xlKX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICAgICAgSW4gYSBwcml2YXRlIGNoYXRib3QsIG9ubHkgYXV0aG9yaXplZCB1c2VyIGNhbiBhY2Nlc3NcbiAgICAgICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApfVxuICAgICAgICA8Rm9ybUdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzQwcHgnIH19PlxuICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZm9ybS5jdXJyZW50LmNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25TdWJtaXQoZm9ybVZhbHVlKTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIFNhdmUgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybSgnUmVzZXQgY29uZmlndXJhdGlvbj8nKSkge1xuICAgICAgICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlc2V0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGx1ZyB9IGZyb20gJ2NvZGUtcGx1Zyc7XG5cblxuaW1wb3J0IHsgSGVscEVsZW1lbnRzLCB3aXRoQ29uZmlndXJhdGlvblBhZ2UgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cyc7XG5jb25zdCB7IE5vZGVSZWROb2RlLCBTbHVnSGVscCwgVHlwZUNvbW1hbmQgfSA9IEhlbHBFbGVtZW50cztcblxuXG5pbXBvcnQgQXV0aG9yaXphdGlvbkZvcm0gZnJvbSAnLi92aWV3cy9zdXNwZW5kLWZvcm0nO1xuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvY29uZmlndXJhdGlvbi1mb3JtJztcblxuLy8gYXV0aG9yaXplIGZvcm0gaW4gdXNlciBtb2RhbFxucGx1ZygndXNlci10YWJzJywgQXV0aG9yaXphdGlvbkZvcm0sIHtcbiAgaWQ6ICdzdXNwZW5kLXVzZXInLFxuICBsYWJlbDogJ0FjY2VzcycsXG4gIHBlcm1pc3Npb246ICd1c2Vycy5hdXRob3JpemUnXG59KTtcblxuLy8gY29uZmlndXJhdGlvbiBwYW5lbFxuY29uc3QgTGVnZW5kID0gKCkgPT4gKFxuICA8ZGl2PlxuICAgIDxOb2RlUmVkTm9kZT5BdXRob3JpemF0aW9uPC9Ob2RlUmVkTm9kZT5cbiAgICAgIDxwPlNldCB0aGUgY2hhdGJvdCBwcml2YXRlLCBvbmx5IGF1dGhvcml6ZWQgdXNlciB3aWxsIGJlIGFibGUgdG8gdXNlIHRoZSBjaGF0Ym90LiBTZXQgdGhlIGF1dGhvcml6YXRpb24gaW4gdGhlIHVzZXJzIHNlY3Rpb24uPC9wPlxuICAgICAgPHA+Rm9yIHB1YmxpYyBjaGF0Ym90IGl0J3MgcG9zc2liaWxlIHRvIHN1c3BlbmQgYSB1c2VyLjwvcD5cbiAgPC9kaXY+XG4pO1xuXG5wbHVnKCdzaWRlYmFyJywgbnVsbCwge1xuICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgaWQ6ICdjb25maWd1cmF0aW9uJyxcbiAgbGFiZWw6ICdDb25maWd1cmF0aW9uJyxcbiAgaWNvbjogJ2NvZycsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBpZDogJ2F1dGhvcml6YXRpb24nLFxuICAgICAgbGFiZWw6ICdCb3QgQWNjZXNzJyxcbiAgICAgIHVybDogJy9hdXRob3JpemF0aW9uJyxcbiAgICB9XG4gIF1cbn0pO1xucGx1ZyhcbiAgJ3BhZ2VzJyxcbiAgd2l0aENvbmZpZ3VyYXRpb25QYWdlKFxuICAgICdyZWRib3QtYXV0aG9yaXphdGlvbicsXG4gICAgQ29uZmlndXJhdGlvbkZvcm0sXG4gICAgeyBMZWdlbmQsIHRpdGxlOiAnQm90IEFjY2VzcycgfVxuICApLFxuICB7XG4gICAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gICAgdXJsOiAnL2F1dGhvcml6YXRpb24nLFxuICAgIHRpdGxlOiAnV2VsY29tZSBNZXNzYWdlJyxcbiAgICBpZDogJ3BhZ2UtYXV0aG9yaXphdGlvbidcbiAgfVxuKTtcblxucGx1ZyhcbiAgJ3Blcm1pc3Npb25zJyxcbiAgbnVsbCxcbiAge1xuICAgIHBlcm1pc3Npb246ICd1c2Vycy5hdXRob3JpemUnLFxuICAgIG5hbWU6ICdBdXRob3JpemUvU3VzcGVuZCcsXG4gICAgZGVzY3JpcHRpb246ICdBdXRob3JpemUgb3Igc3VzcGVuZCBhIHVzZXInLFxuICAgIGdyb3VwOiAnVXNlcnMnXG4gIH1cbik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEhlbHBCbG9jaywgVG9nZ2xlIH0gZnJvbSAncnN1aXRlJztcblxuY29uc3QgU3VzcGVuZEZvcm0gPSAoeyBmb3JtVmFsdWUgPSB7fSwgZm9ybUVycm9yID0gbnVsbCwgb25DaGFuZ2UgfSkgPT4ge1xuICBmb3JtVmFsdWUgPSBmb3JtVmFsdWUgfHwge307XG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybVxuICAgICAgZm9ybVZhbHVlPXtmb3JtVmFsdWV9XG4gICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIGZsdWlkXG4gICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgID5cbiAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgIDxDb250cm9sTGFiZWw+QXV0aG9yaXplZDwvQ29udHJvbExhYmVsPlxuICAgICAgICA8VG9nZ2xlXG4gICAgICAgICAgb25DaGFuZ2U9e2NoZWNrZWQgPT4gb25DaGFuZ2Uoe1xuICAgICAgICAgICAgLi4uZm9ybVZhbHVlLFxuICAgICAgICAgICAgYXV0aG9yaXplZDogY2hlY2tlZCxcbiAgICAgICAgICAgIHN1c3BlbmRlZDogY2hlY2tlZCA/IGZhbHNlIDogZm9ybVZhbHVlLnN1c3BlbmRlZFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIGNoZWNrZWQ9e2Zvcm1WYWx1ZS5hdXRob3JpemVkfVxuICAgICAgICAvPlxuICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgIE9ubHkgYXV0aG9yaXplZCB1c2VycyBjYW4gYWNjZXNzIHByaXZhdGUgY2hhdGJvdFxuICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgPENvbnRyb2xMYWJlbD5TdXNwZW5kPC9Db250cm9sTGFiZWw+XG4gICAgICAgIDxUb2dnbGVcbiAgICAgICAgICBvbkNoYW5nZT17Y2hlY2tlZCA9PiBvbkNoYW5nZSh7XG4gICAgICAgICAgICAuLi5mb3JtVmFsdWUsXG4gICAgICAgICAgICBzdXNwZW5kZWQ6IGNoZWNrZWQsXG4gICAgICAgICAgICBhdXRob3JpemVkOiBjaGVja2VkID8gZmFsc2UgOiBmb3JtVmFsdWUuYXV0aG9yaXplZFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIGNoZWNrZWQ9e2Zvcm1WYWx1ZS5zdXNwZW5kZWR9XG4gICAgICAgIC8+XG4gICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgU3VzcGVuZGVkIHVzZXIgY2Fubm90IGFjY2VzcyBhIHB1YmxpYyBjaGF0Ym90XG4gICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgPC9Gb3JtPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3VzcGVuZEZvcm07IiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJ3JzdWl0ZSc7XG5cbmNvbnN0IHsgU3RyaW5nVHlwZSwgQXJyYXlUeXBlLCBPYmplY3RUeXBlLCBEYXRlVHlwZSB9ID0gU2NoZW1hLlR5cGVzO1xuXG5jb25zdCBjYXJvdXNlbCA9IFNjaGVtYS5Nb2RlbCh7XG4gIG9wZW5pbmdzOiBBcnJheVR5cGUoKS5vZihPYmplY3RUeXBlKClcbiAgICAuc2hhcGUoe1xuICAgICAgc3RhcnQ6IERhdGVUeXBlKClcbiAgICAgICAgLmlzUmVxdWlyZWQoJ1NwZWNpZnkgc3RhcnRpbmcgaG91cicpLFxuICAgICAgZW5kOiBEYXRlVHlwZSgpXG4gICAgICAgIC5pc1JlcXVpcmVkKCdTcGVjaWZ5IGVuZGluZyBob3VyJyksXG4gICAgICByYW5nZTogU3RyaW5nVHlwZSgpXG4gICAgICAgIC5pc1JlcXVpcmVkKCdTZWxlY3QgYSByYW5nZSBmb3Igb3BlbmluZyBob3VycycpXG4gICAgfSkpXG4gICAgLmFkZFJ1bGUoXG4gICAgICB2YWx1ZSA9PiBfLmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCAhPT0gMCxcbiAgICAgICdTcGVjaWZ5IGF0IGxlYXN0IGFuIG9wZW5pbmcgaG91cidcbiAgICApXG59KTtcblxuZXhwb3J0IHsgY2Fyb3VzZWwgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IENvbnRlbnRBdXRvY29tcGxldGUgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29udGVudC1hdXRvY29tcGxldGUnO1xuXG5jb25zdCBDVVNUT01fRklFTERTID0gW1xuICB7XG4gICAga2V5OiAndXJsJyxcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBkZXNjcmlwdGlvbjogJ1RoZSB1cmwgb3BlbmVkIGNsaWNraW5nIG9uIHRoZSBjYXJkIGJ1dHRvbicsXG4gICAgZGVmYXVsdFZhbHVlOiAnaHR0cDovLycsXG4gICAgY29sb3I6ICdyZWQnXG4gIH0sXG4gIHtcbiAgICBrZXk6ICdsYWJlbEJ1dHRvbicsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgZGVzY3JpcHRpb246ICdUaGUgbGFiZWwgb2YgdGhlIGNhcmQgYnV0dG9uJyxcbiAgICBkZWZhdWx0VmFsdWU6ICdPcGVuJyxcbiAgICBjb2xvcjogJ29yYW5nZSdcbiAgfVxuXTtcblxuY29uc3QgRm9ybU9wZW5pbmcgPSAoeyB2YWx1ZSwgb25DaGFuZ2UsIGRpc2FibGVkID0gZmFsc2UgfSkgPT4gKFxuICA8ZGl2PlxuICAgIDxDb250ZW50QXV0b2NvbXBsZXRlXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgY2FuQ3JlYXRlPXt0cnVlfVxuICAgICAgdmFsdWU9e3ZhbHVlLnNsdWd9XG4gICAgICBjdXN0b21GaWVsZHNTY2hlbWE9e0NVU1RPTV9GSUVMRFN9XG4gICAgICBmbHVpZFxuICAgICAgb25DaGFuZ2U9e3NsdWcgPT4gb25DaGFuZ2UoeyAuLi52YWx1ZSwgc2x1ZyB9KX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5Gb3JtT3BlbmluZy5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHNsdWc6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtT3BlbmluZzsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEZvcm0sIEZvcm1Db250cm9sLCBCdXR0b25Ub29sYmFyLCBGb3JtR3JvdXAsIENvbnRyb2xMYWJlbCwgSGVscEJsb2NrLCBOYXYgfSBmcm9tICdyc3VpdGUnO1xuXG5pbXBvcnQgQ29sbGVjdGlvbkVkaXRvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb2xsZWN0aW9uLWVkaXRvcic7XG5pbXBvcnQgRGljdGlvbmFyeSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9kaWN0aW9uYXJ5JztcblxuaW1wb3J0IHsgY2Fyb3VzZWwgYXMgY2Fyb3VzZU1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCBGb3JtQ2FyZCBmcm9tICcuL2Zvcm0tY2FyZCc7XG5cbmNvbnN0IGRpY3Rpb25hcnlTY2hlbWEgPSBbXG4gIHtcbiAgICBuYW1lOiAnY2Fyb3VzZWwuaW50cm8nLFxuICAgIGRlc2NyaXB0aW9uOiAnSW50cm9kdWN0aW9uIHRleHQgb2YgdGhlIGNhcm91c2VsJ1xuICB9XG5dO1xuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbdGFiLCBzZXRUYWJdID0gdXNlU3RhdGUoJ2Nhcm91c2VsJyk7XG4gIGNvbnN0IGZvcm0gPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPE5hdiBhcHBlYXJhbmNlPVwidGFic1wiIGFjdGl2ZUtleT17dGFifSBvblNlbGVjdD17c2V0VGFifSBzdHlsZT17eyBtYXJnaW5Cb3R0b206ICcyNXB4JyB9fT5cbiAgICAgICAgPE5hdi5JdGVtIGV2ZW50S2V5PVwiY2Fyb3VzZWxcIj5DYXJvdXNlbDwvTmF2Lkl0ZW0+XG4gICAgICAgIDxOYXYuSXRlbSBldmVudEtleT1cInRyYW5zbGF0aW9uc1wiPlRyYW5zbGF0aW9uczwvTmF2Lkl0ZW0+XG4gICAgICA8L05hdj5cbiAgICAgIDxGb3JtXG4gICAgICAgIG1vZGVsPXtjYXJvdXNlTW9kZWx9XG4gICAgICAgIGRpc2FibGVkPXt0cnVlfVxuICAgICAgICBmb3JtVmFsdWU9e2Zvcm1WYWx1ZX1cbiAgICAgICAgZm9ybUVycm9yPXtmb3JtRXJyb3J9XG4gICAgICAgIHJlZj17Zm9ybX1cbiAgICAgICAgY2hlY2tUcmlnZ2VyPVwibm9uZVwiXG4gICAgICAgIGxheW91dD1cInZlcnRpY2FsXCJcbiAgICAgICAgZmx1aWRcbiAgICAgICAgb25DaGFuZ2U9e2Zvcm1WYWx1ZSA9PiB7XG4gICAgICAgICAgc2V0Rm9ybVZhbHVlKGZvcm1WYWx1ZSk7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKG51bGwpO1xuICAgICAgICB9fVxuICAgICAgICBvbkNoZWNrPXtlcnJvcnMgPT4ge1xuICAgICAgICAgIHNldEZvcm1FcnJvcihlcnJvcnMpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dGFiID09PSAndHJhbnNsYXRpb25zJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cInRyYW5zbGF0aW9uc1wiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0RpY3Rpb25hcnl9XG4gICAgICAgICAgICAgICAgc2NoZW1hPXtkaWN0aW9uYXJ5U2NoZW1hfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIHt0YWIgPT09ICdjYXJvdXNlbCcgJiYgKFxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+Q2Fyb3VzZWwgQ2FyZHNcbiAgICAgICAgICAgICAgICA8SGVscEJsb2NrIHRvb2x0aXA+U2VsZWN0IG9uZSBvciBtb3JlIGNvbnRlbnQ8L0hlbHBCbG9jaz5cbiAgICAgICAgICAgICAgPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIG5hbWU9XCJjYXJkc1wiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0NvbGxlY3Rpb25FZGl0b3J9XG4gICAgICAgICAgICAgICAgZm9ybT17Rm9ybUNhcmR9XG4gICAgICAgICAgICAgICAgbGFiZWxBZGQ9XCJBZGQgY2FyZFwiXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgICAgPEZvcm1Hcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICc0MHB4JyB9fT5cbiAgICAgICAgICA8QnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcm0uY3VycmVudC5jaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0KGZvcm1WYWx1ZSk7XG4gICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICBTYXZlIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oJ1Jlc2V0IGNvbmZpZ3VyYXRpb24/JykpIHtcbiAgICAgICAgICAgICAgICAgIHNldEZvcm1WYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSZXNldFxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9CdXR0b25Ub29sYmFyPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgIDwvRm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgcGx1ZyB9IGZyb20gJ2NvZGUtcGx1Zyc7XG5pbXBvcnQgeyBOb2RlUmVkTm9kZSwgU2x1Z0hlbHAgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9oZWxwLWVsZW1lbnRzJztcbmltcG9ydCB3aXRoQ29uZmlndXJhdGlvblBhZ2UgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvY29uZmlndXJhdGlvbi1wYWdlJztcblxuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvZm9ybSc7XG5cbmNvbnN0IExlZ2VuZCA9ICgpID0+IChcbiAgPGRpdj5cbiAgICA8Tm9kZVJlZE5vZGU+Q2FyZHM8L05vZGVSZWROb2RlPlxuICAgIDxwPkNvbmZpZ3VyZSB0aGUgY2Fyb3VzZWwgb2YgY2FyZHMgdG8gc2hvdyBpbiB0aGUgY2hhYm90OiBzZWxlY3Qgb25lIG9yIG1vcmUgPGVtPnNsdWdzPC9lbT4gZnJvbSB0aGUgPHN0cm9uZz5Db250ZW50PC9zdHJvbmc+IHNlY3Rpb24uPC9wPlxuICAgIDxTbHVnSGVscC8+XG4gIDwvZGl2PlxuKTtcblxucGx1Zygnc2lkZWJhcicsIG51bGwsIHtcbiAgaWQ6ICdjb25maWd1cmF0aW9uJyxcbiAgbGFiZWw6ICdDb25maWd1cmF0aW9uJyxcbiAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gIGljb246ICdjb2cnLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgaWQ6ICdjYXJvdXNlbCcsXG4gICAgICBsYWJlbDogJ0Nhcm91c2VsJyxcbiAgICAgIHVybDogJy9jb25maWd1cmF0aW9uLWNhcm91c2VsJyxcbiAgICB9XG4gIF1cbn0pO1xucGx1ZyhcbiAgJ3BhZ2VzJyxcbiAgd2l0aENvbmZpZ3VyYXRpb25QYWdlKFxuICAgICdjYXJvdXNlbCcsXG4gICAgQ29uZmlndXJhdGlvbkZvcm0sXG4gICAgeyBMZWdlbmQsIHRpdGxlOiAnQ2Fyb3VzZWwnIH1cbiAgKSxcbiAge1xuICAgIHBlcm1pc3Npb246ICdjb25maWd1cmUnLFxuICAgIHVybDogJy9jb25maWd1cmF0aW9uLWNhcm91c2VsJyxcbiAgICB0aXRsZTogJ0Nhcm91c2VsJyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24tY2Fyb3VzZWwnXG4gIH1cbik7XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAncnN1aXRlJztcblxuY29uc3QgeyBTdHJpbmdUeXBlLCBBcnJheVR5cGUsIE9iamVjdFR5cGUsIERhdGVUeXBlIH0gPSBTY2hlbWEuVHlwZXM7XG5cbmNvbnN0IGNvbW1hbmRzID0gU2NoZW1hLk1vZGVsKHtcbiAgY29tbWFuZHM6IEFycmF5VHlwZSgpLm9mKE9iamVjdFR5cGUoKVxuICAgIC5zaGFwZSh7XG4gICAgICBjb21tYW5kOiBTdHJpbmdUeXBlKClcbiAgICAgICAgLmlzUmVxdWlyZWQoJ1NwZWNpZnkgdGhlIGNvbW1hbmQnKVxuICAgICAgICAuYWRkUnVsZShcbiAgICAgICAgICB2YWx1ZSA9PiB2YWx1ZS5zdGFydHNXaXRoKCcvJyksXG4gICAgICAgICAgJ0NvbW1hbmQgc2hvdWxkIHN0YXJ0IHdpdGggXCIvXCInXG4gICAgICAgICksXG4gICAgICBzbHVnOiBTdHJpbmdUeXBlKClcbiAgICAgICAgLmlzUmVxdWlyZWQoJ1NwZWNpZmlnIGEgc2x1ZyAoc2hvcnRjdXQpIGZvciBhIGNvbnRlbnQnKVxuICAgIH0pKVxuICAgIC5hZGRSdWxlKFxuICAgICAgdmFsdWUgPT4ge1xuICAgICAgICBjb25zdCBjb21tYW5kcyA9IHZhbHVlLm1hcChpdGVtID0+IGl0ZW0uY29tbWFuZCk7XG4gICAgICAgIHJldHVybiBfLnVuaXEoY29tbWFuZHMpLmxlbmd0aCA9PT0gY29tbWFuZHMubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgICdTb21lIGNvbnRlbnRzIGhhdmUgdGhlIHNhbWUgY29tbWFuZCdcbiAgICApXG59KTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEZsZXhib3hHcmlkLCBJbnB1dCB9IGZyb20gJ3JzdWl0ZSc7XG5cbi8vaW1wb3J0IENvbnRlbnRBdXRvY29tcGxldGUgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29udGVudC1hdXRvY29tcGxldGUnO1xuXG4vL2ltcG9ydCBDb21wb25lbnRzIGZyb20gJy4uLy4uLy4uL3NyYy91aSc7XG4vL2NvbnNvbGUubG9nKCdDb21wb25lbnRzJywgQ29tcG9uZW50cylcbmltcG9ydCB7IENvbnRlbnRBdXRvY29tcGxldGUgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cyc7XG5cblxuY29uc3QgRm9ybUNvbW1hbmQgPSAoeyB2YWx1ZSwgb25DaGFuZ2UsIGRpc2FibGVkID0gZmFsc2UgfSkgPT4gKFxuICA8RmxleGJveEdyaWQganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIj5cbiAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXs4fT5cbiAgICAgIDxJbnB1dFxuICAgICAgICB2YWx1ZT17dmFsdWUuY29tbWFuZH1cbiAgICAgICAgcGxhY2Vob2xkZXI9XCIvY29tbWFuZFwiXG4gICAgICAgIG9uQ2hhbmdlPXtjb21tYW5kID0+IG9uQ2hhbmdlKHsgLi4udmFsdWUsIGNvbW1hbmQgfSl9XG4gICAgICAvPlxuICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXsxNX0+XG4gICAgICA8Q29udGVudEF1dG9jb21wbGV0ZVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIHVzZVNsdWc9e3RydWV9XG4gICAgICAgIGNhbkNyZWF0ZT17dHJ1ZX1cbiAgICAgICAgdmFsdWU9e3ZhbHVlLnNsdWd9XG4gICAgICAgIGZsdWlkXG4gICAgICAgIG9uQ2hhbmdlPXtzbHVnID0+IG9uQ2hhbmdlKHsgLi4udmFsdWUsIHNsdWcgfSl9XG4gICAgICAvPlxuICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgPC9GbGV4Ym94R3JpZD5cbik7XG5Gb3JtQ29tbWFuZC5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHNsdWc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29tbWFuZDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db21tYW5kOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgd2l0aENvbmZpZ3VyYXRpb25QYWdlLCBIZWxwRWxlbWVudHMgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cyc7XG5jb25zdCB7IE5vZGVSZWROb2RlLCBTbHVnSGVscCwgVHlwZUNvbW1hbmQgfSA9IEhlbHBFbGVtZW50cztcblxuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvZm9ybSc7XG5cbmNvbnN0IExlZ2VuZCA9ICgpID0+IChcbiAgPGRpdj5cbiAgICA8Tm9kZVJlZE5vZGU+Q29tbWFuZHM8L05vZGVSZWROb2RlPlxuICAgIDxwPlVzZSB0aGUgdGhpcyBub2RlIHRvIHNob3cgc29tZSBjb250ZW50cyBpbiByZXNwb25zZSBvZiBzb21lIGNvbW1hbmQtbGlrZSBtZXNzYWdlcyBmcm9tIHVzZXJzLCB0aGlzIGlzIGEgcGVyZmVjdCBwbGFjZVxuICAgICAgdG8gcHV0IHNvbWUgc3RhdGljcyBkb2N1bWVudHMgZm9yIHByaWNhY3kgb3IgdG9zIChmb3IgZXhhbXBsZSA8VHlwZUNvbW1hbmQ+L3ByaXZhY3k8L1R5cGVDb21tYW5kPiBvciA8VHlwZUNvbW1hbmQ+L3Rlcm1zPC9UeXBlQ29tbWFuZD4pLlxuICAgIDwvcD5cbiAgICA8U2x1Z0hlbHAvPlxuICA8L2Rpdj5cbik7XG5cbnBsdWcoJ3NpZGViYXInLCBudWxsLCB7XG4gIGlkOiAnY29uZmlndXJhdGlvbicsXG4gIGxhYmVsOiAnQ29uZmlndXJhdGlvbicsXG4gIHBlcm1pc3Npb246ICdjb25maWd1cmUnLFxuICBpY29uOiAnY29nJyxcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIGlkOiAnY29tbWFuZHMnLFxuICAgICAgbGFiZWw6ICdDb21tYW5kcycsXG4gICAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1jb21tYW5kcycsXG4gICAgfVxuICBdXG59KTtcbnBsdWcoXG4gICdwYWdlcycsXG4gIHdpdGhDb25maWd1cmF0aW9uUGFnZShcbiAgICAnY29tbWFuZHMnLFxuICAgIENvbmZpZ3VyYXRpb25Gb3JtLFxuICAgIHsgTGVnZW5kLCB0aXRsZTogJ0NvbW1hbmRzJyB9XG4gICksXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1jb21tYW5kcycsXG4gICAgdGl0bGU6ICdDb21tYW5kcycsXG4gICAgaWQ6ICdjb25maWd1cmF0aW9uLWNvbW1hbmRzJ1xuICB9XG4pO1xuXG5cblxuXG5leHBvcnQgZGVmYXVsdCB7IG5hbWU6ICdjb21tYW5kIHBsdWdpbicgfTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBGb3JtLCBGb3JtQ29udHJvbCwgQnV0dG9uVG9vbGJhciwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEhlbHBCbG9jayB9IGZyb20gJ3JzdWl0ZSc7XG5cbi8vaW1wb3J0IENvbGxlY3Rpb25FZGl0b3IgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29sbGVjdGlvbi1lZGl0b3InO1xuLy9pbXBvcnQgQ29tcG9uZW50cyBmcm9tICcuLi8uLi8uLi9zcmMvdWknO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkVkaXRvciB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuaW1wb3J0IHsgY29tbWFuZHMgYXMgY29tbWFuZHNNb2RlbCB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgRm9ybUNvbW1hbmQgZnJvbSAnLi9mb3JtLWNvbW1hbmQnO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgKHtcbiAgdmFsdWUsXG4gIG9uU3VibWl0ID0gKCkgPT4geyB9LFxuICBkaXNhYmxlZCA9IGZhbHNlXG59KSA9PiB7XG4gIGNvbnN0IFtmb3JtVmFsdWUsIHNldEZvcm1WYWx1ZV0gPSB1c2VTdGF0ZSh2YWx1ZSk7XG4gIGNvbnN0IFtmb3JtRXJyb3IsIHNldEZvcm1FcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgZm9ybSA9IHVzZVJlZihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Rm9ybVxuICAgICAgICBtb2RlbD17Y29tbWFuZHNNb2RlbH1cbiAgICAgICAgZGlzYWJsZWQ9e3RydWV9XG4gICAgICAgIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgICAgcmVmPXtmb3JtfVxuICAgICAgICBjaGVja1RyaWdnZXI9XCJub25lXCJcbiAgICAgICAgbGF5b3V0PVwidmVydGljYWxcIlxuICAgICAgICBmbHVpZFxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKTtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IobnVsbCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hlY2s9e2Vycm9ycyA9PiB7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5Db250ZW50IENvbW1hbmRzXG4gICAgICAgICAgICA8SGVscEJsb2NrIHRvb2x0aXA+U2VsZWN0IG9uZSBvciBtb3JlIGNvbnRlbnQgdG8gYmUgc2hvd24gYWZ0ZXIgYSBjb21tYW5kLWxpbmUgbWVzc2FnZSAobGlrZSA8ZW0+L3ByaXZhY3k8L2VtPiwgZXRjKTwvSGVscEJsb2NrPlxuICAgICAgICAgIDwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgbmFtZT1cImNvbW1hbmRzXCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtDb2xsZWN0aW9uRWRpdG9yfVxuICAgICAgICAgICAgZm9ybT17Rm9ybUNvbW1hbmR9XG4gICAgICAgICAgICBsYWJlbEFkZD1cIkFkZCBjb21tYW5kXCJcbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgIHNvcnRhYmxlPXtmYWxzZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPEZvcm1Hcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICc0MHB4JyB9fT5cbiAgICAgICAgICA8QnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcm0uY3VycmVudC5jaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0KGZvcm1WYWx1ZSk7XG4gICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICBTYXZlIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oJ1Jlc2V0IGNvbmZpZ3VyYXRpb24/JykpIHtcbiAgICAgICAgICAgICAgICAgIHNldEZvcm1WYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSZXNldFxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9CdXR0b25Ub29sYmFyPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgIDwvRm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBGb3JtLCBGb3JtQ29udHJvbCwgQnV0dG9uVG9vbGJhciwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEhlbHBCbG9jaywgTmF2LCBUb2dnbGUgfSBmcm9tICdyc3VpdGUnO1xuXG5pbXBvcnQgeyBEaWN0aW9uYXJ5LCBDb25maWRlbmNlLCBJbnB1dEludGVnZXIgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cyc7XG5cbmNvbnN0IGRpY3Rpb25hcnlTY2hlbWEgPSBbXG4gIHtcbiAgICBuYW1lOiAna25vd2xlZGdlLWJhc2UuYmVzdE1hdGNoJyxcbiAgICBkZXNjcmlwdGlvbjogJ1RleHQgc2hvd24gYmVmb3JlIHRoZSBsaXN0IG9mIG9wZW5pbmcgaG91cnMnXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAna25vd2xlZGdlLWJhc2Uuc29ycnlOb3RGb3VuZDEnLFxuICAgIGRlc2NyaXB0aW9uOiAnQW5zd2VyIHdoZW4gbm8gc3VwcG9ydCBhcnRpY2xlcyB3ZXJlIGZvdW5kIChmaXJzdCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS5zb3JyeU5vdEZvdW5kMicsXG4gICAgZGVzY3JpcHRpb246ICdBbnN3ZXIgd2hlbiBubyBzdXBwb3J0IGFydGljbGVzIHdlcmUgZm91bmQgKHNlY29uZCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS5zb3JyeU5vdEZvdW5kMycsXG4gICAgZGVzY3JpcHRpb246ICdBbnN3ZXIgd2hlbiBubyBzdXBwb3J0IGFydGljbGVzIHdlcmUgZm91bmQgKHRoaXJkIHZlcnNpb24pJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLmFza1NvbWV0aGluZzEnLFxuICAgIGRlc2NyaXB0aW9uOiAnV2hhdCB0aGUgY2hhdGJvdCBhbnN3ZXIgd2hlbiB0aGUgdXNlciByZXF1ZXN0cyBoZWxwIChmaXJzdCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS5hc2tTb21ldGhpbmcyJyxcbiAgICBkZXNjcmlwdGlvbjogJ1doYXQgdGhlIGNoYXRib3QgYW5zd2VyIHdoZW4gdGhlIHVzZXIgcmVxdWVzdHMgaGVscCAoc2Vjb25kIHZlcnNpb24pJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLmFza1NvbWV0aGluZzMnLFxuICAgIGRlc2NyaXB0aW9uOiAnV2hhdCB0aGUgY2hhdGJvdCBhbnN3ZXIgd2hlbiB0aGUgdXNlciByZXF1ZXN0cyBoZWxwICh0aGlyZCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS5ubydcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS55ZXMnXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAna25vd2xlZGdlLWJhc2Uub2snXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAna25vd2xlZGdlLWJhc2Uud2FzVXNlZnVsJyxcbiAgICBkZXNjcmlwdGlvbjogJ0Fza2VkIGlmIGFuIGFydGljbGUgaXMgdXNlZnVsIGFmdGVyIGEgc2VhcmNoJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLnRoYW5rc0J5ZTEnLFxuICAgIGRlc2NyaXB0aW9uOiAnQW5zd2VyIHdoZW4gdGhlIHVzZXIgaXMgc2F0aXNmaWVkIHdpdGggdGhlIGZvdW5kIGFydGljbGUgKGZpcnN0IHZlcnNpb24pJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLnRoYW5rc0J5ZTInLFxuICAgIGRlc2NyaXB0aW9uOiAnQW5zd2VyIHdoZW4gdGhlIHVzZXIgaXMgc2F0aXNmaWVkIHdpdGggdGhlIGZvdW5kIGFydGljbGUgKHNlY29uZCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS50aGFua3NCeWUzJyxcbiAgICBkZXNjcmlwdGlvbjogJ0Fuc3dlciB3aGVuIHRoZSB1c2VyIGlzIHNhdGlzZmllZCB3aXRoIHRoZSBmb3VuZCBhcnRpY2xlICh0aGlyZCB2ZXJzaW9uKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdrbm93bGVkZ2UtYmFzZS5zZWxlY3RPbmVPZlRoZXNlJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Nob3duIHdoZW4gdGhlIHVzZXIgaXMgYXNrZWQgdG8gc2VsZWN0IG9uIG9mIHRoZSByZWxhdGVkIGFydGljbGVzIG9mIGEgc2VhcmNoJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLnNvbWV0aGluZ1dlbnRXcm9uZycsXG4gICAgZGVzY3JpcHRpb246ICdTaG93biB3aGVuIGFuIHVucmVjb3ZlcmFibGUgZXJyb3Igb2NjdXJzJ1xuICB9LFxuICB7XG4gICAgbmFtZTogJ2tub3dsZWRnZS1iYXNlLm5vTW9yZUFydGljbGVzJyxcbiAgICBkZXNjcmlwdGlvbjogYFNob3duIHdoZW4gdXNlciBhc2sgdG8gbW9yZSByZXN1bHRzIGJ1dCB0aGVyZSBhcmVuJ3RgXG4gIH1cbl07XG5cblxuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbdGFiLCBzZXRUYWJdID0gdXNlU3RhdGUoJ29wZW5pbmdzJyk7XG4gIGNvbnN0IGZvcm0gPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPE5hdiBhcHBlYXJhbmNlPVwidGFic1wiIGFjdGl2ZUtleT17dGFifSBvblNlbGVjdD17c2V0VGFifSBzdHlsZT17eyBtYXJnaW5Cb3R0b206ICcyNXB4JyB9fT5cbiAgICAgICAgPE5hdi5JdGVtIGV2ZW50S2V5PVwib3BlbmluZ3NcIj5Lbm93bGVkZ2UgQmFzZTwvTmF2Lkl0ZW0+XG4gICAgICAgIDxOYXYuSXRlbSBldmVudEtleT1cInRyYW5zbGF0aW9uc1wiPlRyYW5zbGF0aW9uczwvTmF2Lkl0ZW0+XG4gICAgICA8L05hdj5cbiAgICAgIDxGb3JtXG4gICAgICAgIGRpc2FibGVkPXt0cnVlfVxuICAgICAgICBmb3JtVmFsdWU9e2Zvcm1WYWx1ZX1cbiAgICAgICAgZm9ybUVycm9yPXtmb3JtRXJyb3J9XG4gICAgICAgIHJlZj17Zm9ybX1cbiAgICAgICAgY2hlY2tUcmlnZ2VyPVwibm9uZVwiXG4gICAgICAgIGxheW91dD1cInZlcnRpY2FsXCJcbiAgICAgICAgZmx1aWRcbiAgICAgICAgb25DaGFuZ2U9e2Zvcm1WYWx1ZSA9PiB7XG4gICAgICAgICAgc2V0Rm9ybVZhbHVlKGZvcm1WYWx1ZSk7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKG51bGwpO1xuICAgICAgICB9fVxuICAgICAgICBvbkNoZWNrPXtlcnJvcnMgPT4ge1xuICAgICAgICAgIHNldEZvcm1FcnJvcihlcnJvcnMpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dGFiID09PSAndHJhbnNsYXRpb25zJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cInRyYW5zbGF0aW9uc1wiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0RpY3Rpb25hcnl9XG4gICAgICAgICAgICAgICAgc2NoZW1hPXtkaWN0aW9uYXJ5U2NoZW1hfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIHt0YWIgPT09ICdvcGVuaW5ncycgJiYgKFxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+QW5zd2VyIGJ5IERlZmF1bHQ8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cImFuc3dlckJ5RGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e1RvZ2dsZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICAgICAgV2l0aCB0aGlzIG9wdGlvbiA8ZW0+ZW5hYmxlZDwvZW0+LCB0aGUgYmxvY2sgZXhlY3V0ZSBhIHNlYXJjaCBmb3IgZXZlcnkgaW5wdXQgb2YgdGhlIHVzZXIsIGlmIDxlbT5kaXNhYmxlZDwvZW0+IHRoZVxuICAgICAgICAgICAgICAgIHVzZXIgaGFzIHRvIGVudGVyIGluIHRoZSA8ZW0+YXNrIHF1ZXN0aW9uIHN0YXRlPC9lbT4gZW50ZXJpbmcgc29tZSBzZW50ZW5jZXMgbGlrZSA8ZW0+XCJJIG5lZWQgaGVscFwiPC9lbT5cbiAgICAgICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+QXJ0aWNsZXMgU2Vuc2l0aXZpdHk8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIG5hbWU9XCJ0aHJlc2hvbGRcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtDb25maWRlbmNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgICAgICAgIFRoZSBtaW5pbXVtIHNjb3JlIG9mIGFuIGFydGljbGUgdG8gYmUgY29uc2lkZXJlZCByZWxldmFudC4gTG93ZXIgdGhpcyB2YWx1ZSBpZiB0aGUgc2VhcmNoIGRvZXNuJ3QgcmV0dXJuIGFueSB2YWx1ZS5cbiAgICAgICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+TkxQIFNlbnNpdGl2aXR5PC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBuYW1lPVwibmxwVGhyZXNob2xkXCJcbiAgICAgICAgICAgICAgICBhY2NlcHRlcj17Q29uZmlkZW5jZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEhlbHBCbG9jaz5cbiAgICAgICAgICAgICAgICBUaGUgbWluaW11bSBzY29yZSBvZiBhbiBpbnRlbnQgdG8gYmUgY29uc2lkZXJlZCByZWxldmFudC4gTG93ZXIgdGhpcyB2YWx1ZSBpZiB0aGUgTkxQIGRvZXNuJ3QgY2F0Y2ggYW55IGludGVudCBvZiB0aGUgdXNlciBpbnB1dCxcbiAgICAgICAgICAgICAgICByYWlzZSB0aGlzIHZhbHVlIGlmIHRoZSBOTFAgb2YgdGhpcyBibG9jayBpcyBpbnRlcmZlcmluZyB3aXRoIHRoZSBOTFAgb2Ygb3RoZXIgYmxvY2tzLlxuICAgICAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5TdWdnZXN0IEFydGljbGVzPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBuYW1lPVwiYXJ0aWNsZXNUb1N1Z2dlc3RcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dEludGVnZXJ9XG4gICAgICAgICAgICAgICAgbWluPXsxfVxuICAgICAgICAgICAgICAgIG1heD17MjB9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWF4V2lkdGg6ICcyMDBweCd9fVxuICAgICAgICAgICAgICAgIHBvc3RmaXg9ezxzcGFuPiBhcnRpY2xlczwvc3Bhbj59XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICAgICAgVGhlIG1heGltdW0gYXJ0aWNsZXMgdG8gc3VnZ2VzdCBpZiB1c2VyIGNsaWNrcyBvbiBcIk1vcmUgYXJ0aWNsZXNcIlxuICAgICAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIDxGb3JtR3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNDBweCcgfX0+XG4gICAgICAgICAgPEJ1dHRvblRvb2xiYXI+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JtLmN1cnJlbnQuY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdChmb3JtVmFsdWUpO1xuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgU2F2ZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKCdSZXNldCBjb25maWd1cmF0aW9uPycpKSB7XG4gICAgICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uLCBCdXR0b24gfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IHsgcGx1ZyB9IGZyb20gJ2NvZGUtcGx1Zyc7XG5cbmltcG9ydCB7IENvbnRlbnQsIHdpdGhDb25maWd1cmF0aW9uUGFnZSwgSGVscEVsZW1lbnRzIH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgdXNlTm9kZVJlZFNvY2tldCB9IGZyb20gJy4uLy4uL3NyYy9ob29rcy9zb2NrZXQnO1xuXG5jb25zdCB7IENvbnRlbnRzLCBDYXRlZ29yaWVzIH0gPSBDb250ZW50O1xuY29uc3QgeyBOb2RlUmVkTm9kZSwgU2x1Z0hlbHAsIFR5cGVDb21tYW5kLCBDaGF0Ym90U3RhdHVzIH0gPSBIZWxwRWxlbWVudHM7XG5cbmltcG9ydCBDb25maWd1cmF0aW9uRm9ybSBmcm9tICcuL3ZpZXdzL2Zvcm0nO1xuXG5jb25zdCBMZWdlbmQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgc2VuZE1lc3NhZ2UgfSA9IHVzZU5vZGVSZWRTb2NrZXQoKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPE5vZGVSZWROb2RlPktub3dsZWRnZSBCYXNlPC9Ob2RlUmVkTm9kZT5cbiAgICAgIDxwPlxuICAgICAgICBDb25maWd1cmUgdGhlIDxiPktub3dsZWRnZSBCYXNlPC9iPiBibG9jaywgdXNlIHRoZSA8Yj5BcnRpY2xlczwvYj4gc2VjdGlvbiB0byBlbnRlciB0aGUga25vd2xlZGdlIGJhc2Ugb2YgeW91ciBwcm9kdWN0IG9yXG4gICAgICAgIHNlcnZpY2UuPGJyLz5cbiAgICAgICAgRm9yIGFydGljbGVzIHRoYXQgcmVwcmVzZW50IHRoZSBzYW1lIGNvbnRlbnQgYnV0IGluIGRpZmZlcmVudCBsYW5ndWFnZXMsIHVzZSB0aGUgc2FtZSA8ZW0+c2x1ZzwvZW0+LCB0aGUgYmxvY2sgd2lsbCB0YWtlIGNhcmUgb2ZcbiAgICAgICAgdGhlIHJlc3QuXG4gICAgICA8L3A+XG4gICAgICA8cD5cbiAgICAgICAgQWRqdXN0IHRoZSBzZW5zaXRpdml0eSBvZiB0aGUgc2VhcmNoIGVuZ2luZSwgcmFpc2UgaXQgd2hlbiB0aGUgcmVzdWx0cyBhcmUgbm90IHJlbGV2YW50IHRvIHRoZSB1c2VyJ3MgcXVlc3Rpb24sIGxvd2VyIGl0IHdoZW4gdGhlXG4gICAgICAgIHNlYXJjaCBpcyBub3QgcmV0dXJuaW5nIGFueXRoaW5nLCBrZWVwIGFuIGV5ZSBvbiB0aGUgc3lzdGVtIGNvbnNvbGUgdG8gc2VlIHRoZSBzY29yZSBvZiB0aGUgc2VhcmNoZXMuPGJyLz5cbiAgICAgICAgV2l0aCA8Yj5BbnN3ZXIgYnkgRGVmYXVsdDwvYj4gdGhlIGJsb2NrIGNhbiBhbnN3ZXIgYXV0b21hdGljYWxseSB0byBhbnkgaW5wdXQgdGV4dCBtZXNzYWdlIG9yIGNhbiBzdGFydCBhbnN3ZXJpbmcgb25seSB3aGVuIHRoZVxuICAgICAgICBjaGF0Ym90IGluIDxDaGF0Ym90U3RhdHVzPmZhcS5hbnN3ZXI8L0NoYXRib3RTdGF0dXM+IHN0YXR1cywgd2hpY2ggaXMgZW50ZXJlZCB3aGVuIHRoZSB1c2VyIHR5cGVzIHNlbnRlY2VzIGxpa2UgPFR5cGVDb21tYW5kPkkgbmVlZCBoZWxwPC9UeXBlQ29tbWFuZD4uXG4gICAgICA8L3A+XG4gICAgICA8U2x1Z0hlbHAvPlxuICAgICAgPGRpdiBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInLCBtYXJnaW5Ub3A6ICcxMHB4JyB9fT5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBzZW5kTWVzc2FnZSgnZmFxLnJlZnJlc2gnKTtcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHsgdGl0bGU6ICdLbm93bGVkZ2UgQmFzZScsIGRlc2NyaXB0aW9uOiAnUmUtaW5kZXggb2YgYXJ0aWNsZXMgc3RhcnRlZCcgfSlcbiAgICAgICAgICB9fVxuICAgICAgICAgID5SZWZyZXNoIGluZGV4PC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxuXG4vLyBzaWRlYmFyIGl0ZW1zXG5wbHVnKFxuICAnc2lkZWJhcicsXG4gIG51bGwsXG4gIHtcbiAgICBpZDogJ2tub3dsZWRnZWJhc2UnLFxuICAgIGxhYmVsOiAnS25vd2xlZGdlIEJhc2UnLFxuICAgIHVybDogJy9rbm93bGVkZ2UtYmFzZScsXG4gICAgaWNvbjogJ2ZpbGUtdGV4dCcsXG4gICAgcGVybWlzc2lvbjogJ2ZhcS5lZGl0JyxcbiAgICBvcHRpb25zOiBbXG4gICAgICB7IGxhYmVsOiAnQXJ0aWNsZXMnLCB1cmw6ICcva25vd2xlZGdlLWJhc2UnLCBpZDogJ2ZhcXMnIH0sXG4gICAgICB7IGxhYmVsOiAnQ2F0ZWdvcmllcycsIHVybDogJy9rbm93bGVkZ2UtYmFzZS9jYXRlZ29yaWVzJywgaWQ6ICdmYXFzLWNhdGVnb3JpZXMnIH1cbiAgICBdXG4gIH1cbik7XG5wbHVnKFxuICAnc2lkZWJhcicsXG4gIG51bGwsXG4gIHtcbiAgICBpZDogJ2tub3dsZWRnZWJhc2UnLFxuICAgIGxhYmVsOiAnS25vd2xlZGdlIEJhc2UnLFxuICAgIHVybDogJy9rbm93bGVkZ2UtYmFzZScsXG4gICAgaWNvbjogJ2ZpbGUtdGV4dCcsXG4gICAgcGVybWlzc2lvbjogWydmYXEuY29uZmlndXJlJywgJ2NvbmZpZ3VyZSddLFxuICAgIG9wdGlvbnM6IFtcbiAgICAgIHsgbGFiZWw6ICdDb25maWd1cmF0aW9uJywgdXJsOiAnL2tub3dsZWRnZS1iYXNlL2NvbmZpZ3VyZScsIGlkOiAnZmFxcy1jb25maWd1cmUnIH1cbiAgICBdXG4gIH1cbik7XG4vLyBwYWdlc1xucGx1ZygncGFnZXMnLCBDYXRlZ29yaWVzLCB7XG4gIHVybDogJy9rbm93bGVkZ2UtYmFzZS9jYXRlZ29yaWVzJyxcbiAgdGl0bGU6ICdDYXRlZ29yaWVzJyxcbiAgaWQ6ICdmYXEtY2F0ZWdvcmllcycsXG4gIHBlcm1pc3Npb246ICdmYXEuZWRpdCcsXG4gIG5hbWVzcGFjZTogJ2ZhcScsXG4gIGJyZWFkY3J1bWJzOiBbXG4gICAgeyB0aXRsZTogJ0tub3dsZWRnZSBCYXNlJywgdXJsOiAnL2tub3dsZWRnZS1iYXNlJyB9LFxuICAgICdDYXRlZ29yaWVzJ1xuICBdXG59KTtcbnBsdWcoXG4gICdwYWdlcycsXG4gIHdpdGhDb25maWd1cmF0aW9uUGFnZShcbiAgICAna25vd2xlZGdlLWJhc2UnLFxuICAgIENvbmZpZ3VyYXRpb25Gb3JtLFxuICAgIHsgTGVnZW5kLCB0aXRsZTogJ0tub3dsZWRnZSBCYXNlJyB9XG4gICksXG4gIHtcbiAgICB1cmw6ICcva25vd2xlZGdlLWJhc2UvY29uZmlndXJlJyxcbiAgICB0aXRsZTogJ0NvbmZpZ3VyZScsXG4gICAgaWQ6ICdmYXFzLWNvbmZpZ3VyZScsXG4gICAgcGVybWlzc2lvbjogWydmYXEuY29uZmlndXJlJywgJ2NvbmZpZ3VyZSddLFxuICB9XG4pO1xucGx1ZygncGFnZXMnLCBDb250ZW50cywge1xuICB1cmw6ICcva25vd2xlZGdlLWJhc2UnLFxuICB0aXRsZTogJ0tub3dsZWRnZSBCYXNlJyxcbiAgaWQ6ICdmYXFzJyxcbiAgbmFtZXNwYWNlOiAnZmFxJyxcbiAgcGVybWlzc2lvbjogJ2ZhcS5lZGl0JyxcbiAgYnJlYWRjcnVtYnM6IFsnS25vd2xlZGdlIEJhc2UnLCAnQXJ0aWNsZXMnXSxcbiAgbGFiZWxzOiB7XG4gICAgc2F2ZUNvbnRlbnQ6ICdTYXZlIGFydGljbGUnLFxuICAgIGNyZWF0ZUNvbnRlbnQ6ICdDcmVhdGUgYXJ0aWNsZSdcbiAgfVxufSk7XG4vLyBwZXJtaXNzaW9uc1xucGx1ZyhcbiAgJ3Blcm1pc3Npb25zJyxcbiAgbnVsbCxcbiAge1xuICAgIHBlcm1pc3Npb246ICdmYXEuZWRpdCcsXG4gICAgbmFtZTogJ0VkaXQgS3dub3dsZWRnZSBiYXNlJyxcbiAgICBkZXNjcmlwdGlvbjogJ0FkZCBhbmQgZWRpdCBhcnRpY2xlcyBvZiB0aGUga25vd2xlZGdlIGJhc2UnLFxuICAgIGdyb3VwOiAnS25vd2xlZGdlIEJhc2UnXG4gIH1cbik7XG5wbHVnKFxuICAncGVybWlzc2lvbnMnLFxuICBudWxsLFxuICB7XG4gICAgcGVybWlzc2lvbjogJ2ZhcS5jb25maWd1cmUnLFxuICAgIG5hbWU6ICdDb25maWd1cmUgS3dub3dsZWRnZSBiYXNlJyxcbiAgICBkZXNjcmlwdGlvbjogJ0NvbmZpZ3VyZSBLd25vd2xlZGdlIGJhc2UnLFxuICAgIGdyb3VwOiAnS25vd2xlZGdlIEJhc2UnXG4gIH1cbik7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBOb3RpZmljYXRpb24gfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSAncmVhY3QtYXBvbGxvJztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0IHVzZUZldGNoIGZyb20gJ3VzZS1odHRwJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB1c2VDb25maWd1cmF0aW9uIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9jb25maWd1cmF0aW9uJztcblxuY29uc3QgQ09OVEVOVF9QTFVHSU5TID0gZ3FsYFxucXVlcnkge1xuICBjb250ZW50cyhuYW1lc3BhY2U6IFwicGx1Z2luc1wiKSB7XG4gICAgaWQsXG4gICAgdGl0bGUsXG4gICAgYm9keSxcbiAgICBwYXlsb2FkLFxuICAgIGZpZWxkcyB7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWVcbiAgICB9XG4gIH1cbn1cbmA7XG5cbi8vIEFQSSBmb3IganNvbmJpbi5pbzogaHR0cHM6Ly9qc29uYmluLmlvL2FwaS1yZWZlcmVuY2UvYmlucy9yZWFkXG5cbmNvbnN0IFB1Ymxpc2hQbHVnaW5zID0gKCkgPT4ge1xuICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcbiAgY29uc3QgeyBkYXRhIH0gPSB1c2VDb25maWd1cmF0aW9uKHsgbmFtZXNwYWNlOiAnbWFya2V0LXBsYWNlJyB9KTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgeyBwdXQgfSA9IHVzZUZldGNoKCdodHRwczovL2FwaS5qc29uYmluLmlvJywge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAnc2VjcmV0LWtleSc6IGRhdGEgIT0gbnVsbCA/IGRhdGEuanNvbmJpbl9rZXkgOiBudWxsLFxuICAgICAgJ3ZlcnNpb25pbmcnOiAnZmFsc2UnXG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFzU2VjcmV0S2V5ID0gZGF0YSAhPSBudWxsICYmICFfLmlzRW1wdHkoZGF0YS5qc29uYmluX2tleSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICBkaXNhYmxlZD17c3RhdGUgIT0gbnVsbCB8fCAhaGFzU2VjcmV0S2V5fVxuICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZSgnTG9hZGluZy4uLicpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5xdWVyeSh7IHF1ZXJ5OiBDT05URU5UX1BMVUdJTlMsIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JyB9KTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IHJlc3BvbnNlLmRhdGEuY29udGVudHMubWFwKHBsdWdpbiA9PiB7XG4gICAgICAgICAgY29uc3QgZmllbGRzID0gcGx1Z2luLmZpZWxkcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gKHsgLi4uYWNjLCBbaXRlbS5uYW1lXTogaXRlbS52YWx1ZSB9KSwge30pO1xuXG4gICAgICAgICAgbGV0IGNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgIGlmICghXy5pc0VtcHR5KGZpZWxkcy5jb250ZW50X3RpdGxlKSB8fCAhXy5pc0VtcHR5KGZpZWxkcy5jb250ZW50X3NsdWcpIHx8ICFfLmlzRW1wdHkoZmllbGRzLmNvbnRlbnRfYm9keSkpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgIHRpdGxlOiBmaWVsZHMuY29udGVudF90aXRsZSxcbiAgICAgICAgICAgICAgc2x1ZzogZmllbGRzLmNvbnRlbnRfc2x1ZyxcbiAgICAgICAgICAgICAgYm9keTogZmllbGRzLmNvbnRlbnRfYm9keSxcbiAgICAgICAgICAgICAgbmFtZXNwYWNlOiBmaWVsZHMuY29udGVudF9uYW1lc3BhY2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBmaWVsZHMuaWQsXG4gICAgICAgICAgICBuYW1lOiBwbHVnaW4udGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcGx1Z2luLmJvZHksXG4gICAgICAgICAgICB1cmw6IGZpZWxkcy51cmwsXG4gICAgICAgICAgICBmbG93OiBmaWVsZHMuZmxvdyxcbiAgICAgICAgICAgIHZlcnNpb246IGZpZWxkcy52ZXJzaW9uLFxuICAgICAgICAgICAgZ2l0aHViOiBmaWVsZHMuZ2l0aHViLFxuICAgICAgICAgICAga2V5d29yZHM6IGZpZWxkcy50YWdzLFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgIG5hbWU6IGZpZWxkcy5hdXRob3IsXG4gICAgICAgICAgICAgIHVybDogZmllbGRzLmF1dGhvcl91cmxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgaW5pdGlhbENvbmZpZ3VyYXRpb246IHBsdWdpbi5wYXlsb2FkICE9IG51bGwgJiYgIV8uaXNFbXB0eShwbHVnaW4ucGF5bG9hZC5pbml0aWFsX2NvbmZpZ3VyYXRpb24pID9cbiAgICAgICAgICAgICAgcGx1Z2luLnBheWxvYWQuaW5pdGlhbF9jb25maWd1cmF0aW9uIDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIHNldFN0YXRlKCdQdWJsaXNoaW5nLi4uJyk7XG4gICAgICAgIGF3YWl0IHB1dChgL2IvJHtkYXRhLmpzb25iaW5faWR9YCwgcGx1Z2lucyk7XG5cbiAgICAgICAgc2V0U3RhdGUobnVsbCk7XG4gICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHsgdGl0bGU6ICdQdWJsaXNoZWQnLCBkZXNjcmlwdGlvbjogJ1BsdWdpbiBsaXN0IHB1Ymxpc2hlZCBzdWNjZXNmdWxseSAnfSk7XG4gICAgICB9fVxuICAgID5cbiAgICAgIHtzdGF0ZSAhPSBudWxsID8gc3RhdGUgOiAnUHVibGlzaCBwbHVnaW5zJ31cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFB1Ymxpc2hQbHVnaW5zOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgd2l0aENvbmZpZ3VyYXRpb25QYWdlLCBDb250ZW50IH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5pbXBvcnQgUHVibGlzaFBsdWdpbnMgZnJvbSAnLi92aWV3cy9wdWJsaXNoLXBsdWdpbnMnO1xuaW1wb3J0IENvbmZpZ3VyZU1hcmtldFBsYWNlIGZyb20gJy4vdmlld3MvY29uZmlndXJlLW1hcmtldC1wbGFjZSc7XG5pbXBvcnQgRGVmYXVsdENvbmZpZ3VyYXRpb24gZnJvbSAnLi92aWV3cy9kZWZhdWx0LWNvbmZpZ3VyYXRpb24nO1xuXG5jb25zdCBMZWdlbmQgPSAoKSA9PiAoXG4gIDxkaXY+XG4gICAgQ29uZmlndXJlIHRoZSBpZCBhbmQgdGhlIGtleSB0byBhY2Nlc3MgPHN0cm9uZz5qc29uYmluZy5pbzwvc3Ryb25nPiBmb3IgdGhlIHBsdWdpbnMgbWV0IGluZm9ybWF0aW9uLlxuICAgIDxiciAvPlxuICAgIERvY3MgYWJvdXQgdGhlIEFQSSA8YSBocmVmPVwiaHR0cHM6Ly9qc29uYmluLmlvL2FwaS1yZWZlcmVuY2UvYmlucy9yZWFkXCIgdGFyZ2V0PVwiYmxhbmtcIj5oZXJlPC9hPi5cbiAgPC9kaXY+XG4pO1xuXG5wbHVnKFxuICAnc2lkZWJhcicsXG4gIG51bGwsXG4gIHtcbiAgICBpZDogJ21hcmtldC1wbGFjZScsXG4gICAgbGFiZWw6ICdNYXJrZXQgUGxhY2UnLFxuICAgIHVybDogJy9tYXJrZXQtcGxhY2UnLFxuICAgIGljb246ICdzaG9wcGluZy1iYXNrZXQnXG4gIH1cbik7XG5cbnBsdWcoJ3NpZGViYXInLCBudWxsLCB7XG4gIGlkOiAnY29uZmlndXJhdGlvbicsXG4gIGxhYmVsOiAnQ29uZmlndXJhdGlvbicsXG4gIHBlcm1pc3Npb246ICdjb25maWd1cmUnLFxuICBpY29uOiAnY29nJyxcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIGlkOiAnY29uZmlndXJhdGlvbi1tYXJrZXQtcGxhY2UnLFxuICAgICAgbGFiZWw6ICdNYXJrZXQgUGxhY2UnLFxuICAgICAgdXJsOiAnL2NvbmZpZ3VyYXRpb24tbWFya2V0LXBsYWNlJyxcbiAgICB9XG4gIF1cbn0pO1xuXG5wbHVnKFxuICAncGFnZXMnLFxuICB3aXRoQ29uZmlndXJhdGlvblBhZ2UoXG4gICAgJ21hcmtldC1wbGFjZScsXG4gICAgQ29uZmlndXJlTWFya2V0UGxhY2UsXG4gICAgeyBMZWdlbmQsIHRpdGxlOiAnTWFya2V0IFBsYWNlJyB9XG4gICksXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1tYXJrZXQtcGxhY2UnLFxuICAgIHRpdGxlOiAnTWFya2V0IFBsYWNlJyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24nXG4gIH1cbik7XG5cblxucGx1ZygncGFnZXMnLCBDb250ZW50LkNvbnRlbnRzLCB7XG4gIHVybDogJy9tYXJrZXQtcGxhY2UnLFxuICB0aXRsZTogJ01hcmtldCBQbGFjZScsXG4gIGlkOiAnbWFya2V0LXBsYWNlJyxcbiAgbmFtZXNwYWNlOiAncGx1Z2lucycsXG4gIGJyZWFkY3J1bWJzOiBbJ01hcmtldCBQbGFjZScsICdQbHVnaW5zJ10sXG4gIGxhYmVsczoge1xuICAgIHNhdmVDb250ZW50OiAnU2F2ZSBwbHVnaW4nLFxuICAgIGNyZWF0ZUNvbnRlbnQ6ICdDcmVhdGUgcGx1Z2luJyxcbiAgICBlbXB0eUNvbnRlbnQ6ICdObyBwbHVnaW5zJyxcbiAgfSxcbiAgY3VzdG9tOiAoKSA9PiA8UHVibGlzaFBsdWdpbnMgLz4sXG4gIGN1c3RvbUZpZWxkc1NjaGVtYTogW1xuICAgIHtcbiAgICAgIGtleTogJ3VybCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVVJMIG9mIHRoZSBjb21waWxlZCBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdjeWFuJ1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnZmxvdycsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVVJMIG9mIHRoZSBOb2RlLVJFRCBmbG93IGZvciB0aGlzIHBsdWdpbmAsXG4gICAgICBjb2xvcjogJ2N5YW4nXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdpZCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVW5pcXVlIGlkIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICd2ZXJzaW9uJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBUaGUgdmVyc2lvbiBvZiB0aGUgY3VycmVudCAobGF0ZXN0KSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdnaXRodWInLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoZSBVUkwgb2YgdGhlIGdpdGh1YiBwYWdlIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdhdXRob3InLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoZSB1c2VybmFtZSBvZiB0aGUgYXV0aG9yIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdvcmFuZ2UnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdhdXRob3JfdXJsJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBUaGUgaG9tZSBwYWdlIG9mIHRoZSB1c2VybmFtZSwgaWYgYW55YCxcbiAgICAgIGNvbG9yOiAnb3JhbmdlJ1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAndGFncycsXG4gICAgICB0eXBlOiAndGFncycsXG4gICAgICBkZXNjcmlwdGlvbjogYExpc3Qgb2Yga2V5d29yZHMsIGNvbW1hIHNlcGFyYXRlZGAsXG4gICAgICBjb2xvcjogJ3JlZCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogJ2NvbnRlbnRfdGl0bGUnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYENyZWF0ZSBhIGNvbnRlbnQgd2l0aCB0aGlzIHRpdGxlYCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9zbHVnJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBDcmVhdGUgYSBjb250ZW50IHdpdGggdGhpcyBzbHVnYCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9ib2R5JyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBDcmVhdGUgYSBjb250ZW50IHdpdGggdGhpcyBib2R5YCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9uYW1lc3BhY2UnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYENyZWF0ZSBhIGNvbnRlbnQgd2l0aCB0aGlzIG5hbWVzcGFjZWAsXG4gICAgICBjb2xvcjogJ3Zpb2xldCdcbiAgICB9XG4gIF1cbn0pO1xuXG5wbHVnKCdjb250ZW50LXRhYnMnLCBEZWZhdWx0Q29uZmlndXJhdGlvbiwge1xuICBpZDogJ2NvbnRlbnQtY29uZmlndXJhdGlvbicsXG4gIGxhYmVsOiAnQ29uZmlndXJhdGlvbicsXG4gIG5hbWVzcGFjZTogWydwbHVnaW5zJ11cbn0pOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5wdXQsIEZvcm0sIENvbnRyb2xMYWJlbCwgRm9ybUNvbnRyb2wsIEhlbHBCbG9jaywgQnV0dG9uLCBCdXR0b25Ub29sYmFyLCBGb3JtR3JvdXAgfSBmcm9tICdyc3VpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBmb3JtID0gdXNlUmVmKG51bGwpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxGb3JtXG4gICAgICAgIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgICAgcmVmPXtmb3JtfVxuICAgICAgICBjaGVja1RyaWdnZXI9XCJub25lXCJcbiAgICAgICAgbGF5b3V0PVwidmVydGljYWxcIlxuICAgICAgICBmbHVpZFxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKTtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IobnVsbCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hlY2s9e2Vycm9ycyA9PiB7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5KU09OYmluLmlvIGlkPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICBuYW1lPVwianNvbmJpbl9pZFwiXG4gICAgICAgICAgICBhY2NlcHRlcj17SW5wdXR9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgICAgVGhlIDxlbT5pZDwvZW0+IG9mIHRoZSA8c3Ryb25nPmpzb25iaW4uaW88L3N0cm9uZz4gc25pcHBldCBvZiB0aGUgcGx1Z2lucyBtZXRhIGluZm9cbiAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5KU09OYmluLmlvIGtleTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgbmFtZT1cImpzb25iaW5fa2V5XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBUaGUgPGVtPnNlY3JldCBrZXk8L2VtPiB0byB3cml0ZSBvbiA8c3Ryb25nPmpzb25iaW4uaW88L3N0cm9uZz5cbiAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtR3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNDBweCcgfX0+XG4gICAgICAgICAgPEJ1dHRvblRvb2xiYXI+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JtLmN1cnJlbnQuY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdChmb3JtVmFsdWUpO1xuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgU2F2ZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKCdSZXNldCBjb25maWd1cmF0aW9uPycpKSB7XG4gICAgICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBKc29uRWRpdG9yIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5jb25zdCBEZWZhdWx0Q29uZmlndXJhdGlvbiA9ICh7IGZvcm1WYWx1ZSA9IHt9LCBvbkNoYW5nZSA9ICgpID0+IHt9IH0pID0+IHtcblxuICBjb25zdCB7IGluaXRpYWxfY29uZmlndXJhdGlvbiB9ID0gZm9ybVZhbHVlIHx8IHt9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nQm90dG9tOiAnMTVweCcgfX0+XG4gICAgICA8SnNvbkVkaXRvclxuICAgICAgICB2YWx1ZT17IV8uaXNFbXB0eShpbml0aWFsX2NvbmZpZ3VyYXRpb24pID8gaW5pdGlhbF9jb25maWd1cmF0aW9uIDogJyd9XG4gICAgICAgIGhlaWdodD1cIjU1dmhcIlxuICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4ge1xuICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLmZvcm1WYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxfY29uZmlndXJhdGlvbjogIV8uaXNFbXB0eSh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0Q29uZmlndXJhdGlvbjsiLCJleHBvcnQgY29uc3Qgc2VjcmV0Q29sb3IgPSAodHlwZSkgPT4ge1xuICBpZiAodHlwZSA9PT0gJ2xvY2F0aW9uJykge1xuICAgIHJldHVybiAnIzVFODI2Myc7XG4gIH0gZWxzZSBpZiAodHlwZSkge1xuICAgIHJldHVybicjRDM2MTM1JztcbiAgfSBlbHNlIGlmICh0eXBlKSB7XG4gICAgcmV0dXJuICcjNTk1RDg4JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyMwMDAwMDAnO1xuICB9XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uLCBGbGV4Ym94R3JpZCB9IGZyb20gJ3JzdWl0ZSc7XG5cbmltcG9ydCB7IFNtYWxsVGFnLCBNYXBzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuaW1wb3J0IHVzZVNldHRpbmdzIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9zZXR0aW5ncyc7XG5cbmltcG9ydCB7IHNlY3JldENvbG9yIH0gZnJvbSAnLi4vaGVscGVycy9zZWNyZXQtY29sb3InO1xuaW1wb3J0ICcuLi9zdHlsZXMvc2VjcmV0LXZpZXdlci5zY3NzJztcblxuY29uc3QgUGluUG9pbnQgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEljb25cbiAgICAgIGNsYXNzTmFtZT1cIm1hcC1tYXJrZXJcIlxuICAgICAgaWNvbj1cIm1hcC1tYXJrZXJcIlxuICAgICAgc2l6ZT1cIjJ4XCJcbiAgICAgIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fVxuICAgIC8+XG4gICk7XG59XG5cbmNvbnN0IFNlY3JldFZpZXdlciA9ICh7IHJlY29yZCB9KSA9PiB7XG4gIGNvbnN0IHsgcGF5bG9hZCB9ID0gcmVjb3JkO1xuXG4gIGNvbnN0IGV4cGlyZURhdGUgPSBuZXcgRGF0ZShwYXlsb2FkLnNlY3JldF9kdXJhdGlvbik7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGR1cmF0aW9uID0gZXhwaXJlRGF0ZS5nZXRUaW1lKCkgLSBub3cuZ2V0VGltZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZWNyZXQtdmlld2VyXCI+XG4gICAgICA8RmxleGJveEdyaWQganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIiBzdHlsZT17eyBtYXJnaW5Ub3A6ICczMHB4JyB9fT5cbiAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17N30+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxiPlNlY3JldCBpczwvYj4gPFNtYWxsVGFnIGNvbG9yPXtzZWNyZXRDb2xvcihwYXlsb2FkLnNlY3JldF90eXBlKX0+e3BheWxvYWQuc2VjcmV0X3R5cGV9PC9TbWFsbFRhZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7KHBheWxvYWQuc2VjcmV0X3R5cGUgPT09ICd0aW1lJyB8fCBwYXlsb2FkLnNlY3JldF90eXBlID09PSAnbG9jYXRpb24rdGltZScpICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxiPlJldmVhbGVkIHdoZW48L2I+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIDxlbT57ZXhwaXJlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0sIHtleHBpcmVEYXRlLnRvTG9jYWxlVGltZVN0cmluZygpfTwvZW0+XG4gICAgICAgICAgICAgIHsoZHVyYXRpb24gPiAwKSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWNyZXQtcmV2ZWFsLWF0XCI+e01hdGgucm91bmQoZHVyYXRpb24vMTAwMC82MCl9IG1pbnV0ZXM8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgeyhkdXJhdGlvbiA8IDApICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2PlNlY3JldCBkYXRlIGlzIGR1ZTwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7cGF5bG9hZC5zZWNyZXRfYm91bnR5ICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPGI+SUNFIHByaWNlOjwvYj4ge3BheWxvYWQuc2VjcmV0X2JvdW50eX0gRVVSPGJyLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3BheWxvYWQuc2VjcmV0X3BheW1lbnQgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8Yj5Vc2VyIHBhaWQgdG8gcmV2ZWFsIHRoZSBzZWNyZXQ8L2I+PGJyLz5cbiAgICAgICAgICAgICAgPGI+RW1haWw6IDwvYj4ge3BheWxvYWQuc2VjcmV0X3BheW1lbnQub3JkZXJfaW5mby5lbWFpbH08YnIgLz5cbiAgICAgICAgICAgICAgPGI+Q3VycmVuY3k6IDwvYj4ge3BheWxvYWQuc2VjcmV0X3BheW1lbnQuY3VycmVuY3l9PGJyIC8+XG4gICAgICAgICAgICAgIDxiPkFtb3VudDogPC9iPiB7KHBheWxvYWQuc2VjcmV0X3BheW1lbnQudG90YWxfYW1vdW50IC8gMTAwKS50b0ZpeGVkKDIpfTxiciAvPlxuICAgICAgICAgICAgICA8Yj5QYXltZW50IElEOiA8L2I+IHtwYXlsb2FkLnNlY3JldF9wYXltZW50LnByb3ZpZGVyX3BheW1lbnRfY2hhcmdlX2lkfTxiciAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GbGV4Ym94R3JpZC5JdGVtPlxuICAgICAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXs3fT5cbiAgICAgICAgICB7cGF5bG9hZC5zZWNyZXRfdXJsICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGI+U2VjcmV0IGltYWdlPC9iPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cGF5bG9hZC5zZWNyZXRfdXJsfSB3aWR0aD1cIjEwMCVcIi8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtwYXlsb2FkLnNlY3JldCAhPSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxiPlNlY3JldCB0ZXh0PC9iPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpc3BsYXktc2VjcmV0XCI+XG4gICAgICAgICAgICAgICAge3BheWxvYWQuc2VjcmV0fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17N30+XG4gICAgICAgICAge3JlY29yZC5sYXRpdHVkZSAhPSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWktZGV2aWNlcy1tYXBcIiBzdHlsZT17eyBoZWlnaHQ6IGAzMDBweGAgfX0+XG4gICAgICAgICAgICAgIDxNYXBzXG4gICAgICAgICAgICAgICAgZGVmYXVsdENlbnRlcj17eyBsYXQ6IHJlY29yZC5sYXRpdHVkZSwgbG5nOiByZWNvcmQubG9uZ2l0dWRlIH19XG4gICAgICAgICAgICAgICAgZGVmYXVsdFpvb209ezExfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFBpblBvaW50IC8+XG4gICAgICAgICAgICAgIDwvTWFwcz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3JlY29yZC5sYXRpdHVkZSA9PSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxlbT5ObyBsb2NhdGlvbiBmb3IgdGhpcyBzZWNyZXQ8L2VtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GbGV4Ym94R3JpZC5JdGVtPlxuICAgICAgPC9GbGV4Ym94R3JpZD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4vKlN1cnZlcnlWaWV3ZXIucHJvcFR5cGVzID0ge1xuICByZWNvcmQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcXVlc3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWyd0ZXh0JywgJ251bWJlcicsICdtdWx0aXBsZScsICdpbWFnZSddKSxcbiAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgICB9KVxuICAgICAgXSlcbiAgICB9KVxuICB9KVxufTsqL1xuXG5leHBvcnQgZGVmYXVsdCBTZWNyZXRWaWV3ZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRodW1iOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtYXhXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtYXhIZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHRodW1iOiBudWxsLFxuICAgIGhlaWdodDogbnVsbCxcbiAgICB3aWR0aDogbnVsbCxcbiAgICBtYXhXaWR0aDogMjAwLFxuICAgIG1heEhlaWdodDogNDAwLFxuICAgIG9uQ2xpY2s6ICgpID0+IHt9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGh1bWIsIGhlaWdodCwgd2lkdGgsIG1heFdpZHRoLCBtYXhIZWlnaHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCByYXRpbyA9IGhlaWdodCAvIHdpZHRoO1xuICAgIGxldCBpbWFnZUhlaWdodCA9IE1hdGguZmxvb3IocmF0aW8gKiBtYXhXaWR0aCk7XG4gICAgaWYgKGltYWdlSGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICBpbWFnZUhlaWdodCA9IG1heEhlaWdodDtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RodW1ifSlgLFxuICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgIHdpZHRoOiBgJHttYXhXaWR0aH1weGAsXG4gICAgICBoZWlnaHQ6IGAke2ltYWdlSGVpZ2h0fXB4YFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9IC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uLCBQb3BvdmVyIH0gZnJvbSAncnN1aXRlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9pbWFnZSc7XG5cbmNvbnN0IEJhbGxvb24gPSAoeyB0b3BpYywgdHMsIGNvbnRlbnQsIG9uRGVsZXRlLCBvblpvb20sIHRodW1iLCBpbWFnZSwgd2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCAuLi5wcm9wcyB9KSA9PiB7XG4gIGxldCB0aHVtYkltYWdlO1xuICBpZiAoIV8uaXNFbXB0eSh0aHVtYikpIHtcbiAgICB0aHVtYkltYWdlID0gKFxuICAgICAgPEltYWdlXG4gICAgICAgIHRodW1iPXt0aHVtYn1cbiAgICAgICAgdG9waWM9e3RvcGljfVxuICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICBtYXhIZWlnaHQ9e21heEhlaWdodH1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGlja2VkJyk7XG4gICAgICAgICAgb25ab29tKHsgfSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFBvcG92ZXIgdGl0bGU9e3RvcGljfSB7Li4ucHJvcHN9IG9uTW91c2VMZWF2ZT17KCkgPT4ge319PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyLW1hcC1tYXJrZXJcIj5cbiAgICAgICAgdmFyaW9cbiAgICAgIDwvZGl2PlxuICAgIDwvUG9wb3Zlcj5cbiAgKTtcbn07XG5cbkJhbGxvb24ucHJvcFR5cGVzID0ge1xuICB0b3BpYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGh1bWI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0czogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbn07XG5cbkJhbGxvb24uZGVmYXVsdFByb3BzID0ge1xuICB0b3BpYzogbnVsbCxcbiAgdGh1bWI6IG51bGwsXG4gIGltYWdlOiBudWxsLFxuICBjb250ZW50OiBudWxsLFxuICB0czogbnVsbCxcbiAgb25EZWxldGU6ICgpID0+IHt9LFxuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYWxsb29uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24sIFRvb2x0aXAsIFdoaXNwZXIsIFBvcG92ZXIgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IEJhbGxvb24gZnJvbSAnLi9iYWxsb29uJztcblxuY2xhc3MgUGluUG9pbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcG9pbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0b3BpYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0czogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcG9wb3ZlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aHVtYjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaG93UG9wb3ZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaWNvbicsICd0b29sdGlwJ10pLFxuICAgIGlua0NvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1heEhlaWdodDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaWNvbjogJ21hcC1tYXJrZXInLFxuICAgIGNvbG9yOiAnI0ZGMzMwMCcsXG4gICAgdGV4dDogbnVsbCxcbiAgICBzaXplOiAnMngnLFxuICAgIHBvcG92ZXI6IG51bGwsXG4gICAgdGh1bWI6IG51bGwsXG4gICAgaW1hZ2U6IG51bGwsXG4gICAgdHlwZTogJ2ljb24nLFxuICAgIHNob3dQb3BvdmVyOiBmYWxzZSxcbiAgICBpbmtDb2xvcjogJyNmZmZmZmYnLFxuICAgIG1heEhlaWdodDogNDgwXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmhhbmRsZUxvYWRlZCA9IHRoaXMuaGFuZGxlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcblxuICAgIGNvbnN0IHsgdGh1bWIgfSA9IHByb3BzO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5lZWRQcmVsb2FkOiAhXy5pc0VtcHR5KHRodW1iKSxcbiAgICAgIHByZWxvYWQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB0eXBlLCBjb2xvcn0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKHRoaXMudG9vbHRpcCAhPSBudWxsICYmIHR5cGUgPT09ICd0b29sdGlwJykge1xuICAgICAgdGhpcy50b29sdGlwLnF1ZXJ5U2VsZWN0b3IoJy5ycy10b29sdGlwLWlubmVyJykuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgICB0aGlzLnRvb2x0aXAucXVlcnlTZWxlY3RvcignLnJzLXRvb2x0aXAtYXJyb3cnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVMb2FkZWQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcHJlbG9hZDogZmFsc2UsXG4gICAgICB3aWR0aDogZS50YXJnZXQud2lkdGgsXG4gICAgICBoZWlnaHQ6IGUudGFyZ2V0LmhlaWdodFxuICAgIH0sICgpID0+IHRoaXMudHJpZ2dlci5zaG93KCkpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgY29uc3QgeyB0aHVtYiB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghXy5pc0VtcHR5KHRodW1iKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByZWxvYWQ6IHRydWUgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyLnNob3coKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgcG9pbnQsIHRleHQsIHR5cGUsIHBvcG92ZXIsIHNob3dQb3BvdmVyLCB0aHVtYiwgaW1hZ2UsIGlua0NvbG9yLCBtYXhIZWlnaHQsIG9uRGVsZXRlUG9pbnQsIG9uU2hvd0ltYWdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IGljb24sIGNvbG9yLCBzaXplIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoLCBwcmVsb2FkLCBuZWVkUHJlbG9hZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChfLmlzRW1wdHkoaWNvbikpIHtcbiAgICAgIGljb24gPSAnbWFwLW1hcmtlcic7XG4gICAgfVxuICAgIGlmIChfLmlzRW1wdHkoc2l6ZSkpIHtcbiAgICAgIHNpemUgPSAnbGcnO1xuICAgIH1cbiAgICBpZiAoXy5pc0VtcHR5KGNvbG9yKSkge1xuICAgICAgY29sb3IgPSAnI0ZGMzMwMCc7XG4gICAgfVxuICAgIGlmIChfLmlzRW1wdHkoaW5rQ29sb3IpKSB7XG4gICAgICBjb2xvciA9ICcjMDAwMDAwJztcbiAgICB9XG4gICAgY29uc3QgdHMgPSBuZXcgRGF0ZShwYXJzZUludChwb2ludC50cywgMTApKTtcblxuICAgIGxldCBjb250ZW50O1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICBjYXNlICdpY29uJzpcbiAgICAgICAgY29udGVudCA9IChcbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj1cIiNcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCd3cmFwcGVyLW1hcC1tYXJrZXInLCB7IHByZWxvYWQgfSl9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAgICAgICAgICAgIHtwcmVsb2FkICYmIDxpbWcgc3JjPXt0aHVtYn0gc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fSBvbkxvYWQ9e3RoaXMuaGFuZGxlTG9hZGVkfSBhbHQ9XCJcIi8+fVxuICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdtYXAtbWFya2VyJywgeyAncG9pbnRlcic6IHNob3dQb3BvdmVyIH0pfVxuICAgICAgICAgICAgICBpY29uPXtpY29ufVxuICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvciB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9vbHRpcCc6XG4gICAgICAgIGNvbnRlbnQgPSAoXG4gICAgICAgICAgPGRpdiByZWY9e3JlZiA9PiB0aGlzLnRvb2x0aXAgPSByZWZ9IHN0eWxlPXt7IGhlaWdodDogMjAsIGJhY2tncm91bmRDb2xvcjogJyNmZjAwMDAnIH19PlxuICAgICAgICAgICAgPFRvb2x0aXAgdmlzaWJsZT48c3BhbiBzdHlsZT17eyBjb2xvcjogaW5rQ29sb3IgfX0+e3RleHR9PC9zcGFuPjwvVG9vbHRpcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250ZW50ID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gaWYgc2hvdyBwb3BvdmVyLCB0aGVuIGFkZCB3aGlzcGVyIHdyYXBwZXJcbiAgICBpZiAoc2hvd1BvcG92ZXIpIHtcbiAgICAgIC8vIGlmIG5lZWQgcHJlbG9hZCBhbmQgaXMgcHJlbG9hZGluZywgdGhlbiBqdXN0IHNob3cgdGhlIG1hcmtlciBhbmQgbm90IHRoZSB3aGlzcGVyZXJcbiAgICAgIGlmIChuZWVkUHJlbG9hZCAmJiBwcmVsb2FkKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BlYWtlciA9IChcbiAgICAgICAgPFBvcG92ZXIgb25Nb3VzZUxlYXZlPXsoKSA9PiB7fX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyLW1hcC1tYXJrZXJcIj5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxXaGlzcGVyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInRvcFwiIHNwZWFrZXI9e3NwZWFrZXJ9IHRyaWdnZXJSZWY9e3JlZiA9PiB0aGlzLnRyaWdnZXIgPSByZWZ9PlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICA8L1doaXNwZXI+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQaW5Qb2ludDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSAncmVhY3QtYXBvbGxvJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJ3JzdWl0ZSc7XG5cbmltcG9ydCB7IFBhZ2VDb250YWluZXIsIEJyZWFkY3J1bWJzLCBNYXBzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5pbXBvcnQgUGluUG9pbnQgZnJvbSAnLi4vdmlld3MvcGluLXBvaW50JztcblxuY29uc3QgR0VUX0xPQ0FUSU9OX1NFQ1JFVFMgPSBncWxgXG5xdWVyeSgkd2hlcmU6IEpTT04pIHtcbiAgcmVjb3JkcyhsaW1pdDogNTAsIG9yZGVyOiBcImdlb2hhc2hcIiwgd2hlcmU6ICR3aGVyZSkge1xuICAgIGlkLFxuICAgIHN0YXR1cyxcbiAgICB0aXRsZSxcbiAgICBsYXRpdHVkZSxcbiAgICBsb25naXR1ZGUsXG4gICAgZ2VvaGFzaCxcbiAgICBwYXlsb2FkXG4gIH1cbn1gO1xuXG5jb25zdCBTZWNyZXRzTWFwID0gKCkgPT4ge1xuICBjb25zdCBbc2VjcmV0cywgc2V0U2VjcmV0c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcblxuICBsZXQgbWFya2VycyA9IChzZWNyZXRzIHx8IFtdKVxuICAgIC5maWx0ZXIoc2VjcmV0ID0+IHNlY3JldC5sYXRpdHVkZSAhPSBudWxsICYmIHNlY3JldC5sb25naXR1ZGUgIT0gbnVsbClcbiAgICAubWFwKHNlY3JldCA9PiAoXG4gICAgICA8UGluUG9pbnRcbiAgICAgICAga2V5PXtzZWNyZXQuaWR9XG4gICAgICAgIGxhdD17c2VjcmV0LmxhdGl0dWRlfVxuICAgICAgICBsbmc9e3NlY3JldC5sb25naXR1ZGV9XG4gICAgICAgIHBvaW50PXt7fX1cbiAgICAgICAgcG9wb3Zlcj17c2VjcmV0LnRpdGxlfVxuICAgICAgICBzaG93UG9wb3Zlcj17dHJ1ZX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBzdHlsZT17e21pbkhlaWdodDogJzEyMHB4J319PjxzdHJvbmc+e3NlY3JldC50aXRsZX08L3N0cm9uZz5cbiAgICAgICAge3NlY3JldC5wYXlsb2FkLnNlY3JldF91cmwgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7c2VjcmV0LnBheWxvYWQuc2VjcmV0X3VybH0pYCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWluV2lkdGg6ICcxMjBweCcsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGAxMjBweGBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3NlY3JldC5wYXlsb2FkLnNlY3JldCAhPSBudWxsICYmIChcbiAgICAgICAgICA8ZGl2PntzZWNyZXQucGF5bG9hZC5zZWNyZXR9PC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxMaW5rIHRvPXtgL3JlY29yZC8ke3NlY3JldC5pZH1gfT52aWV3PC9MaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUGluUG9pbnQ+XG4gICAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8UGFnZUNvbnRhaW5lciBjbGFzc05hbWU9XCJteS1wYWdlXCI+XG4gICAgICA8QnJlYWRjcnVtYnMgcGFnZXM9e1snU2VjcmV0IGxvY2F0aW9ucyddfS8+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzQ1MHB4JywgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XG4gICAgICAgIHtsb2FkaW5nICYmIChcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6ICcyMHB4JywgbGVmdDogJzIwcHgnLCB6SW5kZXg6IDEwMDAwMDAwIH19PlxuICAgICAgICAgICAgPExvYWRlciBzaXplPVwibWRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8TWFwc1xuICAgICAgICAgIGRlZmF1bHRDZW50ZXI9e3sgbGF0OiA0NS40ODU0NzM5LCBsbmc6IDkuMjAyMjE3NiB9fVxuICAgICAgICAgIGRlZmF1bHRab29tPXsxMX1cbiAgICAgICAgICBoZWlnaHQ9ezQ1MH1cbiAgICAgICAgICBvbkNoYW5nZT17YXN5bmMgKHsgYm91bmRzIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2UsIG53IH0gPSBib3VuZHM7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHJlY29yZHMgfX0gPSBhd2FpdCBjbGllbnQucXVlcnkoe1xuICAgICAgICAgICAgICBxdWVyeTogR0VUX0xPQ0FUSU9OX1NFQ1JFVFMsXG4gICAgICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICBsYXRpdHVkZTogeyAnZ3RlJzogc2UubGF0LCAnbHRlJzogbncubGF0IH0sXG4gICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHsgJ2d0ZSc6IG53LmxuZywgJ2x0ZSc6IHNlLmxuZyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmZXRjaFBvbGljeTogJ25ldHdvcmstb25seSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0U2VjcmV0cyhyZWNvcmRzKTtcbiAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWFya2Vyc31cbiAgICAgICAgPC9NYXBzPlxuICAgICAgPC9kaXY+XG4gICAgPC9QYWdlQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VjcmV0c01hcDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgVXNlclJlY29yZHMsIFNtYWxsVGFnLCB3aXRoQ29uZmlndXJhdGlvblBhZ2UsIEhlbHBFbGVtZW50cyB9IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzJztcbmltcG9ydCBTZWNyZXRWaWV3ZXIgZnJvbSAnLi92aWV3cy9zZWNyZXQtdmlld2VyJztcbmltcG9ydCB7IHNlY3JldENvbG9yIH0gZnJvbSAnLi9oZWxwZXJzL3NlY3JldC1jb2xvcic7XG5pbXBvcnQgU2VjcmV0c01hcCBmcm9tICcuL3BhZ2VzL3NlY3JldC1tYXAnO1xuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvY29uZmlndXJhdGlvbic7XG5cbmNvbnN0IHsgTm9kZVJlZE5vZGUsIFNsdWdIZWxwLCBUeXBlQ29tbWFuZCB9ID0gSGVscEVsZW1lbnRzO1xuXG5wbHVnKCdzaWRlYmFyJywgbnVsbCwge1xuICBpZDogJ3dpZ2dsZScsXG4gIGxhYmVsOiAnUGFub3B0aWNvbicsXG4gIGljb246ICdsb2dvLXN1cnZleScsXG4gIHBlcm1pc3Npb246ICd3aWdnbGUudmlldycsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBpZDogJ3dpZ2dsZS1zZWNyZXRzJyxcbiAgICAgIGxhYmVsOiAnU2VjcmV0cycsXG4gICAgICB1cmw6ICcvc2VjcmV0cycsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3dpZ2dsZS1zZWNyZXRzLW1hcCcsXG4gICAgICBsYWJlbDogJ1NlY3JldHMgTWFwJyxcbiAgICAgIHVybDogJy9zZWNyZXRzLW1hcCcsXG4gICAgfVxuICBdXG59KTtcbi8vIHJlZ2lzdGVyIGEgcGFnZSBtYXAgZm9yIGFsbCBzZWNyZXRzXG5wbHVnKCdwYWdlcycsIFNlY3JldHNNYXAsIHtcbiAgdXJsOiAnL3NlY3JldHMtbWFwJyxcbiAgdGl0bGU6ICdTZWNyZXRzIE1hcCcsXG4gIGlkOiAnc2VjcmV0cy1tYXBzJyxcblxuICBwZXJtaXNzaW9uOiAnd2lnZ2xlLnZpZXcnLFxuICBicmVhZGNydW1iczogWydTZWNyZXRzIE1hcCddXG59KTtcblxuLy8gcmVnaXN0ZXIgYSBwYWdlIGZvciB1c2VyIHJlY29yZHMgb2YgdHlwZSBzdXJ2ZXlcbnBsdWcoJ3BhZ2VzJywgVXNlclJlY29yZHMsIHtcbiAgdXJsOiAnL3NlY3JldHMnLFxuICB0aXRsZTogJ1NlY3JldHMnLFxuICBpZDogJ3NlY3JldHMnLFxuICB0eXBlOiAnc2VjcmV0JyxcbiAgcGVybWlzc2lvbjogJ3dpZ2dsZS52aWV3JyxcbiAgYnJlYWRjcnVtYnM6IFsnU2VjcmV0cyddLFxuICBsYWJlbHM6IHtcbiAgICB0aXRsZTogJ05hbWUnLFxuICAgIHJlY29yZDogJ3NlY3JldCdcbiAgfSxcbiAgY29sdW1uczogW1xuICAgIHtcbiAgICAgIGlkOiAnc2VjcmV0LXR5cGUnLFxuICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgIHdpZHRoOiAxMjAsXG4gICAgICBjZWxsOiAoeyBwYXlsb2FkIH0pID0+IChcbiAgICAgICAgPFNtYWxsVGFnIGNvbG9yPXtzZWNyZXRDb2xvcihwYXlsb2FkLnNlY3JldF90eXBlKX0+e3BheWxvYWQuc2VjcmV0X3R5cGV9PC9TbWFsbFRhZz5cbiAgICAgIClcbiAgICB9XG4gIF1cbn0pO1xuLy8gcmVnaXN0ZXIgcGVybWlzc2lvbnNcbnBsdWcoXG4gICdwZXJtaXNzaW9ucycsXG4gIG51bGwsXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnd2lnZ2xlLnZpZXcnLFxuICAgIG5hbWU6ICdWaWV3IFBhbm9wdGljb24gc2VjcmV0JyxcbiAgICBkZXNjcmlwdGlvbjogYFZpZXcgc2VjcmV0cyBzdG9yZWQgaW4gUGFub3B0aWNvbiBCb3RgLFxuICAgIGdyb3VwOiAnUGFub3B0aWNvbidcbiAgfVxuKTtcbi8vIHJlZ2lzdGVyIHVzZXIgcmVjb3JkIHR5cGVcbnBsdWcoXG4gICd1c2VyLXJlY29yZC10eXBlcycsXG4gIG51bGwsXG4gIHtcbiAgICB0eXBlOiAnc2VjcmV0JyxcbiAgICBuYW1lOiAnU2VjcmV0JyxcbiAgICBsaXN0OiBgU2VjcmV0c2AsXG4gICAgZGVzY3JpcHRpb246ICdMaXN0IG9mIFBhbm9wdGljb24gc2VjcmV0cycsXG4gICAgZm9ybTogU2VjcmV0Vmlld2VyLFxuICAgIHN0YXR1czogW1xuICAgICAgeyB2YWx1ZTogJ3ByaXZhdGUnLCBsYWJlbDogJ1ByaXZhdGUnIH0sXG4gICAgICB7IHZhbHVlOiAncHVibGljJywgbGFiZWw6ICdQdWJsaWMnIH0sXG4gICAgICB7IHZhbHVlOiAnY3JhenknLCBsYWJlbDogJ0NyYXp5JyB9LFxuICAgICAgeyB2YWx1ZTogJ2tleWhvbGRlci1mcmVlJywgbGFiZWw6ICdLZXlob2xkZXIgZnJlZScgfSxcbiAgICAgIHsgdmFsdWU6ICdrZXlob2xkZXItdGFrZW4nLCBsYWJlbDogJ0tleWhvbGRlciB0YWtlbicgfVxuICAgIF1cbiAgfVxuKTtcblxuY29uc3QgTGVnZW5kID0gKCkgPT4gKFxuICA8ZGl2PlxuICAgIDxwPkNvbmZpZ3VyZSBzb21lIDxpPlBhbm9wdGljb248L2k+IHBhcmFtZXRlcnM8L3A+XG5cbiAgPC9kaXY+XG4pO1xuXG5cblxucGx1Zygnc2lkZWJhcicsIG51bGwsIHtcbiAgaWQ6ICdjb25maWd1cmF0aW9uJyxcbiAgbGFiZWw6ICdDb25maWd1cmF0aW9uJyxcbiAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gIGljb246ICdjb2cnLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgaWQ6ICdwYW5vcHRpY29uJyxcbiAgICAgIGxhYmVsOiAnUGFub3B0aWNvbicsXG4gICAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1wYW5vcHRpY29uJyxcbiAgICB9XG4gIF1cbn0pO1xucGx1ZyhcbiAgJ3BhZ2VzJyxcbiAgd2l0aENvbmZpZ3VyYXRpb25QYWdlKFxuICAgICdwYW5vcHRpY29uJyxcbiAgICBDb25maWd1cmF0aW9uRm9ybSxcbiAgICB7IExlZ2VuZCwgdGl0bGU6ICdQYW5vcHRpY29uJyB9XG4gICksXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1wYW5vcHRpY29uJyxcbiAgICB0aXRsZTogJ0NvbmZpZ3VyZSBQYW5vcHRpY29uJyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24tcGFub3B0aWNvbidcbiAgfVxuKTtcblxuXG5cbi8vIHJlZ2lzdGVyIGJ1dHRvbiBpbiB0aGUgdXNlciBtb2RhbCB0byByZWRpcmVjdCB0byBzdXJ2ZXkgbGlzdHNcbi8qcGx1ZyhcbiAgJ3VzZXItYnV0dG9uJyxcbiAgR29Ub1N1cnZleUJ1dHRvblxuKTsqL1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBGb3JtLCBGb3JtQ29udHJvbCwgQnV0dG9uVG9vbGJhciwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEhlbHBCbG9jaywgTmF2IH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IHsgQ29udGVudEF1dG9jb21wbGV0ZSwgQ29sbGVjdGlvbkVkaXRvciwgRGljdGlvbmFyeSwgQ29uZmlkZW5jZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuXG5cblxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIGNvbnN0IGZvcm0gPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEZvcm1cbiAgICAgICAgZGlzYWJsZWQ9e3RydWV9XG4gICAgICAgIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgICAgcmVmPXtmb3JtfVxuICAgICAgICBjaGVja1RyaWdnZXI9XCJub25lXCJcbiAgICAgICAgbGF5b3V0PVwidmVydGljYWxcIlxuICAgICAgICBmbHVpZFxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKTtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IobnVsbCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hlY2s9e2Vycm9ycyA9PiB7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH19XG4gICAgICA+XG5cblxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+Q29udGVudDwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBuYW1lPVwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0NvbnRlbnRBdXRvY29tcGxldGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICAgICAgU2VsZWN0IGEgPGVtPnNsdWc8L2VtPiBmb3IgYSBtdWx0aS1sYW5ndWFnZSBjb250ZW50IHRvIHNob3cgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB3aGVuIGEgdXNlciByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIGFib3V0IG9wZW5pbmcgaG91cnNcbiAgICAgICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+U2Vuc2l0aXZpdHk8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIG5hbWU9XCJ0aHJlc2hvbGRcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtDb25maWRlbmNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgICAgICAgIFRoZSBtaW5pbXVtIHNjb3JlIG9mIGFuIGludGVudCB0byBiZSBjb25zaWRlcmVkIHJlbGV2YW50LiBMb3dlciB0aGlzIHZhbHVlIGlmIHRoZSBOTFAgZG9lc24ndCBjYXRjaCBhbnkgaW50ZW50IG9mIHRoZSB1c2VyIGlucHV0LFxuICAgICAgICAgICAgICAgIHJhaXNlIHRoaXMgdmFsdWUgaWYgdGhlIE5MUCBvZiB0aGlzIGJsb2NrIGlzIGludGVyZmVyaW5nIHdpdGggdGhlIE5MUCBvZiBvdGhlciBibG9ja3MuXG4gICAgICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgPC9GcmFnbWVudD5cblxuICAgICAgICA8Rm9ybUdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzQwcHgnIH19PlxuICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZm9ybS5jdXJyZW50LmNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25TdWJtaXQoZm9ybVZhbHVlKTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIFNhdmUgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybSgnUmVzZXQgY29uZmlndXJhdGlvbj8nKSkge1xuICAgICAgICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlc2V0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEZvcm0sIEZvcm1Db250cm9sLCBCdXR0b25Ub29sYmFyLCBGb3JtR3JvdXAsIENvbnRyb2xMYWJlbCwgSGVscEJsb2NrLCBOYXYsIElucHV0IH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IHsgQ29udGVudEF1dG9jb21wbGV0ZSwgQ29sbGVjdGlvbkVkaXRvciwgRGljdGlvbmFyeSwgQ29uZmlkZW5jZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuXG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0ICh7XG4gIHZhbHVlLFxuICBvblN1Ym1pdCA9ICgpID0+IHsgfSxcbiAgZGlzYWJsZWQgPSBmYWxzZVxufSkgPT4ge1xuICBjb25zdCBbZm9ybVZhbHVlLCBzZXRGb3JtVmFsdWVdID0gdXNlU3RhdGUodmFsdWUpO1xuICBjb25zdCBbZm9ybUVycm9yLCBzZXRGb3JtRXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFt0YWIsIHNldFRhYl0gPSB1c2VTdGF0ZSgnb3BlbmluZ3MnKTtcbiAgY29uc3QgZm9ybSA9IHVzZVJlZihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8Rm9ybVxuICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgZm9ybVZhbHVlPXtmb3JtVmFsdWV9XG4gICAgICAgIGZvcm1FcnJvcj17Zm9ybUVycm9yfVxuICAgICAgICByZWY9e2Zvcm19XG4gICAgICAgIGNoZWNrVHJpZ2dlcj1cIm5vbmVcIlxuICAgICAgICBsYXlvdXQ9XCJ2ZXJ0aWNhbFwiXG4gICAgICAgIGZsdWlkXG4gICAgICAgIG9uQ2hhbmdlPXtmb3JtVmFsdWUgPT4ge1xuICAgICAgICAgIHNldEZvcm1WYWx1ZShmb3JtVmFsdWUpO1xuICAgICAgICAgIHNldEZvcm1FcnJvcihudWxsKTtcbiAgICAgICAgfX1cbiAgICAgICAgb25DaGVjaz17ZXJyb3JzID0+IHtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgfX1cbiAgICAgID5cblxuICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgIDxDb250cm9sTGFiZWw+Q2xpY2tTZW5kIHVzZXJuYW1lPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgcmVhZE9ubHk9e2Rpc2FibGVkfVxuICAgICAgICAgICAgbmFtZT1cImNsaWNrc2VuZFVzZXJcIlxuICAgICAgICAgICAgYWNjZXB0ZXI9e0lucHV0fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEhlbHBCbG9jaz5cbiAgICAgICAgICAgIFVzZXJuYW1lIGZvciBDbGlja1NlbmQgQVBJXG4gICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgIDxDb250cm9sTGFiZWw+Q2xpY2tTZW5kIEFQSSBLZXk8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgIHVzZVNsdWc9e3RydWV9XG4gICAgICAgICAgICByZWFkT25seT17ZGlzYWJsZWR9XG4gICAgICAgICAgICBuYW1lPVwiY2xpY2tzZW5kQXBpS2V5XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBTZWNyZXQgQVBJIGtleSBmb3IgQ2xpY2tTZW5kIEFQSVxuICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPkNsb3VkaW5hcnkgVXNlcm5hbWU8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgIHVzZVNsdWc9e3RydWV9XG4gICAgICAgICAgICByZWFkT25seT17ZGlzYWJsZWR9XG4gICAgICAgICAgICBuYW1lPVwiY2xvdWRpbmFyeVVzZXJuYW1lXCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBDbG91ZGluYXJ5IHVzZXJuYW1lLCB3aGVyZSB0aGUgaW1hZ2VzIGFyZSB1cGxvYWRlZFxuICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPkNsb3VkaW5hcnkgQVBJIEtleTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgdXNlU2x1Zz17dHJ1ZX1cbiAgICAgICAgICAgIHJlYWRPbmx5PXtkaXNhYmxlZH1cbiAgICAgICAgICAgIG5hbWU9XCJjbG91ZGluYXJ5QXBpS2V5XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPkNsb3VkaW5hcnkgU2VjcmV0PC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgcmVhZE9ubHk9e2Rpc2FibGVkfVxuICAgICAgICAgICAgbmFtZT1cImNsb3VkaW5hcnlTZWNyZXRcIlxuICAgICAgICAgICAgYWNjZXB0ZXI9e0lucHV0fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgIDxDb250cm9sTGFiZWw+UERGIFBhdGggKHByb2R1Y3Rpb24pPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgcmVhZE9ubHk9e2Rpc2FibGVkfVxuICAgICAgICAgICAgbmFtZT1cInBkZlBhdGhQcm9kdWN0aW9uXCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBQYXRoIHRvIHN0b3JlIGdlbmVyYXRlZCBQREYgaW4gcHJvZHVjdGlvblxuICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPlBERiBQYXRoIChkZXZlbG9wbWVudCk8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgIHVzZVNsdWc9e3RydWV9XG4gICAgICAgICAgICByZWFkT25seT17ZGlzYWJsZWR9XG4gICAgICAgICAgICBuYW1lPVwicGRmUGF0aERldmVsb3BtZW50XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBQYXRoIHRvIHN0b3JlIGdlbmVyYXRlZCBQREYgaW4gZGV2ZWxvcG1lbnRcbiAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5JbWFnZSBQYXRoIChwcm9kdWN0aW9uKTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgdXNlU2x1Zz17dHJ1ZX1cbiAgICAgICAgICAgIHJlYWRPbmx5PXtkaXNhYmxlZH1cbiAgICAgICAgICAgIG5hbWU9XCJpbWFnZVBhdGhQcm9kdWN0aW9uXCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBQYXRoIHRvIHN0b3JlIHVwbG9hZGVkIGltYWdlcyBpbiBwcm9kdWN0aW9uXG4gICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgIDxDb250cm9sTGFiZWw+SW1hZ2UgUGF0aCAoZGV2ZWxvcG1lbnQpPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgcmVhZE9ubHk9e2Rpc2FibGVkfVxuICAgICAgICAgICAgbmFtZT1cImltYWdlUGF0aERldmVsb3BtZW50XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBQYXRoIHRvIHN0b3JlIHVwbG9hZGVkIGltYWdlcyBpbiBkZXZlbG9wbWVudFxuICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICA8Rm9ybUdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzQwcHgnIH19PlxuICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZm9ybS5jdXJyZW50LmNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25TdWJtaXQoZm9ybVZhbHVlKTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIFNhdmUgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybSgnUmVzZXQgY29uZmlndXJhdGlvbj8nKSkge1xuICAgICAgICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlc2V0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGx1ZyB9IGZyb20gJ2NvZGUtcGx1Zyc7XG5cbmltcG9ydCB7IHdpdGhDb25maWd1cmF0aW9uUGFnZSwgSGVscEVsZW1lbnRzLCBVc2VyUmVjb3JkcywgU21hbGxUYWcgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cyc7XG5jb25zdCB7IE5vZGVSZWROb2RlLCBTbHVnSGVscCwgVHlwZUNvbW1hbmQgfSA9IEhlbHBFbGVtZW50cztcblxuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvZm9ybSc7XG5cbmNvbnN0IExlZ2VuZCA9ICgpID0+IChcbiAgPGRpdj5cbiAgICA8Tm9kZVJlZE5vZGU+T3BlbmluZyBIb3VycyBub2RlPC9Ob2RlUmVkTm9kZT5cbiAgICA8cD5Db25maWd1cmUgdGhlIGJlaGF2aW91ciBvZiB0aGlzIG5vZGU6IGN1c3RvbWl6ZSB0aGVcbiAgICBvcGVuaW5nIGhvdXJzIGFuZCBhbmQgc29tZSBhZGRpdGlvbmFsIGNvbnRlbnQgKGZvciBleGFtcGxlIHRvIHNob3cgZXh0cmEgb3BlbmluZ3MsIGV0YykuPC9wPlxuICAgIDxTbHVnSGVscC8+XG4gIDwvZGl2PlxuKTtcblxucGx1Zygnc2lkZWJhcicsIG51bGwsIHtcbiAgaWQ6ICdjb25maWd1cmF0aW9uJyxcbiAgbGFiZWw6ICdDb25maWd1cmF0aW9uJyxcbiAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gIGljb246ICdjb2cnLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgaWQ6ICdwb3N0Y2FyZC1ib3QnLFxuICAgICAgbGFiZWw6ICdQb3N0Y2FyZEJvdCcsXG4gICAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1wb3N0Y2FyZC1ib3QnLFxuICAgIH1cbiAgXVxufSk7XG5wbHVnKFxuICAncGFnZXMnLFxuICB3aXRoQ29uZmlndXJhdGlvblBhZ2UoXG4gICAgJ3Bvc3RjYXJkYm90JyxcbiAgICBDb25maWd1cmF0aW9uRm9ybSxcbiAgICB7IExlZ2VuZCwgdGl0bGU6ICdQb3N0Y2FyZEJvdCcgfVxuICApLFxuICB7XG4gICAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gICAgdXJsOiAnL2NvbmZpZ3VyYXRpb24tcG9zdGNhcmQtYm90JyxcbiAgICB0aXRsZTogJ1Bvc3RjYXJkQm90JyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24tcG9zdGNhcmQtYm90J1xuICB9XG4pO1xuXG5wbHVnKCdzaWRlYmFyJywgbnVsbCwge1xuICBpZDogJ3Bvc3RjYXJkYm90JyxcbiAgbGFiZWw6ICdQb3N0Y2FyZEJvdCcsXG4gIGljb246ICdsb2dvLXN1cnZleScsXG4gIC8vcGVybWlzc2lvbjogJ3dpZ2dsZS52aWV3JyxcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIGlkOiAncG9zdGNhcmQtaW52b2ljZXMnLFxuICAgICAgbGFiZWw6ICdJbnZvaWNlcycsXG4gICAgICB1cmw6ICcvaW52b2ljZXMnLFxuICAgIH1cbiAgXVxufSk7XG5cbi8vIHJlZ2lzdGVyIGEgcGFnZSBmb3IgdXNlciByZWNvcmRzIG9mIHR5cGUgc3VydmV5XG5wbHVnKCdwYWdlcycsIFVzZXJSZWNvcmRzLCB7XG4gIHVybDogJy9pbnZvaWNlcycsXG4gIHRpdGxlOiAnSW52b2ljZXMnLFxuICBpZDogJ2ludm9pY2VzJyxcbiAgdHlwZTogJ2ludm9pY2UnLFxuICAvL3Blcm1pc3Npb246ICd3aWdnbGUudmlldycsXG4gIGJyZWFkY3J1bWJzOiBbJ0ludm9pY2VzJ10sXG4gIGxhYmVsczoge1xuICAgIHRpdGxlOiAnTmFtZScsXG4gICAgcmVjb3JkOiAnaW52b2ljZSdcbiAgfSxcbiAgY29sdW1uczogW1xuICAgIC8qe1xuICAgICAgaWQ6ICdzZWNyZXQtdHlwZScsXG4gICAgICBsYWJlbDogJ1R5cGUnLFxuICAgICAgd2lkdGg6IDEyMCxcbiAgICAgIGNlbGw6ICh7IHBheWxvYWQgfSkgPT4gKFxuICAgICAgICA8U21hbGxUYWcgY29sb3I9e3NlY3JldENvbG9yKHBheWxvYWQuc2VjcmV0X3R5cGUpfT57cGF5bG9hZC5zZWNyZXRfdHlwZX08L1NtYWxsVGFnPlxuICAgICAgKVxuICAgIH0qL1xuICBdXG59KTtcblxucGx1ZyhcbiAgJ3VzZXItcmVjb3JkLXR5cGVzJyxcbiAgbnVsbCxcbiAge1xuICAgIHR5cGU6ICdpbnZvaWNlJyxcbiAgICBuYW1lOiAnSW52b2ljZScsXG4gICAgbGlzdDogYEludm9pY2VzYCxcbiAgICBkZXNjcmlwdGlvbjogJ0xpc3Qgb2YgUG9zdGNhcmRCb3QgaW52b2ljZXMnLFxuICAgIGZvcm06ICgpID0+IDxkaXY+b2s8L2Rpdj4sXG4gICAgc3RhdHVzOiBbXG4gICAgICB7IHZhbHVlOiAnbmV3JywgbGFiZWw6ICdOZXcnIH0sXG4gICAgICB7IHZhbHVlOiAncHJvYmxlbScsIGxhYmVsOiAnUHJvYmxlbScgfVxuICAgIF1cbiAgfVxuKTtcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXIgPT4ge1xuICBpZiAoIV8uaXNFbXB0eSh1c2VyLmZpcnN0X25hbWUpIHx8ICFfLmlzRW1wdHkodXNlci5sYXN0X25hbWUpKSB7XG4gICAgcmV0dXJuIFt1c2VyLmZpcnN0X25hbWUsIHVzZXIubGFzdF9uYW1lXS5maWx0ZXIocyA9PiAhXy5pc0VtcHR5KHMpKS5qb2luKCcgJyk7XG4gIH0gZWxzZSBpZiAoIV8uaXNFbXB0eSh1c2VybmFtZSkpIHtcbiAgICByZXR1cm4gdXNlci51c2VybmFtZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYEFub255bW91cyAoaWQ6IHtpZH0pYDtcbiAgfVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm0sIEZvcm1Hcm91cCwgQ29udHJvbExhYmVsLCBGbGV4Ym94R3JpZCwgSGVscEJsb2NrIH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IHVzZU1DQ29udGV4dCBmcm9tICcuLi8uLi8uLi9zcmMvaG9va3MvbWMtY29udGV4dCc7XG5pbXBvcnQgeyBVc2VyQXV0b2NvbXBsZXRlLCBTZWxlY3RUcmFuc3BvcnQgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cyc7XG5cbmNvbnN0IGhhc0NoYXRib3QgPSAoYWN0aXZlQ2hhdGJvdHMsIHRyYW5zcG9ydCkgPT4gYWN0aXZlQ2hhdGJvdHMuc29tZShjaGF0Ym90ID0+IGNoYXRib3QudHJhbnNwb3J0ID09PSB0cmFuc3BvcnQpO1xuXG5jb25zdCBTZW5kTWVzc2FnZUZvcm0gPSAoe1xuICB2YWx1ZTogZm9ybVZhbHVlLFxuICB2YWxpZGF0aW9uLFxuICBvbkNoYW5nZSA9ICgpID0+IHt9LFxuICBvblN1Ym1pdCA9ICgpID0+IHt9XG59KSA9PiB7XG4gIGNvbnN0IHsgc3RhdGU6IHsgYWN0aXZlQ2hhdGJvdHMgfSB9ID0gdXNlTUNDb250ZXh0KCk7XG5cblxuICBjb25zb2xlLmxvZygnLS0tLWFjdGl2ZUNoYXRib3RzJywgYWN0aXZlQ2hhdGJvdHMpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEZvcm0gZmx1aWQgZm9ybVZhbHVlPXtmb3JtVmFsdWV9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gZm9ybUVycm9yPXt2YWxpZGF0aW9ufT5cbiAgICAgICAgPEZsZXhib3hHcmlkIGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCI+XG4gICAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17MTV9PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5SZWNpcGllbnQ8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cInJlY2lwaWVudFwiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e1VzZXJBdXRvY29tcGxldGV9XG4gICAgICAgICAgICAgICAgY2xlYW5hYmxlPXt0cnVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt1c2VyID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICh1c2VyICE9IG51bGwgJiYgXy5pc0FycmF5KHVzZXIuY2hhdElkcykgJiYgIV8uaXNFbXB0eSh1c2VyLmNoYXRJZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGVjdCB0aGUgZmlyc3QgY2hhdElkIHdpdGggYW4gYXZhaWxhYmxlIGFjdGl2ZSBjaGF0Ym90XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB1c2VyLmNoYXRJZHMuZmluZChjaGF0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFzQ2hhdGJvdChhY3RpdmVDaGF0Ym90cywgY2hhdC50cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZvcm1WYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXRJZDogaXRlbS5jaGF0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXIudXNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50OiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0OiBpdGVtLnRyYW5zcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdE5vZGU6IGFjdGl2ZUNoYXRib3RzLmZpbmQoY2hhdGJvdCA9PiBjaGF0Ym90LnRyYW5zcG9ydCA9PT0gaXRlbS50cmFuc3BvcnQpLm5vZGVJZFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXs4fT5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29udHJvbExhYmVsPlxuICAgICAgICAgICAgICAgIFRyYW5zcG9ydFxuICAgICAgICAgICAgICAgIDxIZWxwQmxvY2sgdG9vbHRpcD5TaG93cyBvbmx5IHBsYXRmb3JtcyBmb3Igd2hpY2ggdGhlIHNlbGVjdGVkIHVzZXJzIGhhcyBhIHZhbGlkIDxlbT5jaGF0SWQ8L2VtPjwvSGVscEJsb2NrPlxuICAgICAgICAgICAgICA8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cImJvdE5vZGVcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtTZWxlY3RUcmFuc3BvcnR9XG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0cz17Zm9ybVZhbHVlLnJlY2lwaWVudCAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgIGZvcm1WYWx1ZS5yZWNpcGllbnQuY2hhdElkcy5tYXAoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydClcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17Zm9ybVZhbHVlLnJlY2lwaWVudCA9PSBudWxsfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtub2RlSWQgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgcmlnaHRcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUNoYXRCb3QgPSBhY3RpdmVDaGF0Ym90cy5maW5kKGl0ZW0gPT4gaXRlbS5ub2RlSWQgPT09IG5vZGVJZCk7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQ2hhdEJvdCAhPSBudWxsICYmIGZvcm1WYWx1ZS5yZWNpcGllbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBmb3JtVmFsdWUucmVjaXBpZW50LmNoYXRJZHMuZmluZChpdGVtID0+IGl0ZW0udHJhbnNwb3J0ID09PSBhY3RpdmVDaGF0Qm90LnRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHsgLi4uZm9ybVZhbHVlLCBjaGF0SWQ6IHJvdy5jaGF0SWQsIGJvdE5vZGU6IG5vZGVJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgYmxvY2tcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgPC9GbGV4Ym94R3JpZD5cbiAgICAgICAgPEZvcm1Hcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICcxNXB4JyB9fT5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPk1lc3NhZ2UgdG8gc2VuZDwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgbmFtZT1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgY29tcG9uZW50Q2xhc3M9XCJ0ZXh0YXJlYVwiXG4gICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6ICcxNTBweCcsIHJlc2l6ZTogJ25vbmUnIH19XG4gICAgICAgICAgICBvbktleVVwPXtldmVudCA9PiB7XG4gICAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSAmJiBldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIG9uU3VibWl0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZW5kTWVzc2FnZUZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBOb3RpZmljYXRpb24sIFNjaGVtYSB9IGZyb20gJ3JzdWl0ZSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBNb2RhbCwgdXNlTm9kZVJlZFNvY2tldCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcbi8vaW1wb3J0IHsgdXNlTm9kZVJlZFNvY2tldCB9IGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9zb2NrZXQnO1xuaW1wb3J0IHVzZU1DQ29udGV4dCBmcm9tICcuLi8uLi8uLi9zcmMvaG9va3MvbWMtY29udGV4dCc7XG5pbXBvcnQgbmFtZSBmcm9tICcuLi8uLi8uLi9zcmMvaGVscGVycy91c2VyL3JlYWRhYmxlLW5hbWUnO1xuXG5jb25zdCB7IHVzZU1vZGFsIH0gPSBNb2RhbDtcbmltcG9ydCBTZW5kTWVzc2FnZUZvcm0gZnJvbSAnLi9zZW5kLWZvcm0nO1xuXG5jb25zdCBpc1ZhbGlkTWVzc2FnZSA9IHZhbHVlID0+IHZhbHVlLnJlY2lwaWVudCAhPSBudWxsICYmIHZhbHVlLmNoYXRJZCAgIT0gbnVsbCAmJiB2YWx1ZS5ib3ROb2RlICE9IG51bGwgJiYgIV8uaXNFbXB0eSh2YWx1ZS5tZXNzYWdlKTtcblxuY29uc3QgeyBTdHJpbmdUeXBlLCBPYmplY3RUeXBlIH0gPSBTY2hlbWEuVHlwZXM7XG5jb25zdCBtZXNzYWdlTW9kZWwgPSBTY2hlbWEuTW9kZWwoe1xuICByZWNpcGllbnQ6IE9iamVjdFR5cGUoKVxuICAgIC5pc1JlcXVpcmVkKCdTZWxlY3QgcmVjaXBpZW50JyksXG4gIGJvdE5vZGU6IFN0cmluZ1R5cGUoKVxuICAgIC5pc1JlcXVpcmVkKCdTZWxlY3QgY2hhdGJvdCBwbGF0b2Zvcm0nKSxcbiAgbWVzc2FnZTogU3RyaW5nVHlwZSgpXG4gICAgLmlzUmVxdWlyZWQoJ0VudGVyIG1lc3NhZ2UgZm9yIHRoZSB1c2VyJylcbn0pO1xuXG5cbmNvbnN0IFNlbmRNZXNzYWdlQnV0dG9uID0gKHsgdXNlciwgYXBwZWFyYW5jZSA9ICdnaG9zdCcsIHRyYW5zcG9ydCB9KSA9PiB7XG4gIGNvbnN0IHsgc2VuZE1lc3NhZ2UgfSA9IHVzZU5vZGVSZWRTb2NrZXQoKTtcbiAgY29uc3QgeyBzdGF0ZTogeyBhY3RpdmVDaGF0Ym90cyB9IH0gPSB1c2VNQ0NvbnRleHQoKTtcbiAgY29uc3QgeyBvcGVuLCBjbG9zZSwgdmFsaWRhdGUsIGVycm9yLCBkaXNhYmxlLCBvcGVuV2l0aE1vZGVsLCBvcGVuV2l0aCB9ID0gdXNlTW9kYWwoe1xuICAgIHZpZXc6IFNlbmRNZXNzYWdlRm9ybSxcbiAgICB0aXRsZTogJ1NlbmQgbWVzc2FnZScsXG4gICAgbGFiZWxTdWJtaXQ6ICdTZW5kIG1lc3NhZ2UnLFxuICAgIHNpemU6ICdzbSdcbiAgfSk7XG5cbiAgbGV0IGJvdE5vZGU7XG4gIGxldCBjaGF0SWQ7XG4gIGlmICghXy5pc0VtcHR5KHRyYW5zcG9ydCkpIHtcbiAgICAvLyBUT0RPIHByZWRlZmluZSB0cmFuc3BvcnQgaWYgbmVlZGVkXG4gICAgY29uc3QgaGFzQ2hhdElkID0gdXNlci5jaGF0SWRzLnNvbWUoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydCA9PT0gdHJhbnNwb3J0KTtcblxuICAgIGlmIChoYXNDaGF0SWQpIHtcbiAgICAgIGNvbnN0IGNoYXRCb3QgPSBhY3RpdmVDaGF0Ym90cy5maW5kKGNoYXRCb3QgPT4gY2hhdEJvdC50cmFuc3BvcnQgPT09IHRyYW5zcG9ydCk7XG4gICAgICBjb25zb2xlLmxvZygnY2hhdEJvdCcsIGNoYXRCb3QsIGFjdGl2ZUNoYXRib3RzLCB0cmFuc3BvcnQpXG4gICAgICBpZiAoY2hhdEJvdCAhPSBudWxsKSB7XG4gICAgICAgIGJvdE5vZGUgPSBjaGF0Qm90Lm5vZGVJZDtcbiAgICAgICAgY2hhdElkID0gdXNlci5jaGF0SWRzLmZpbmQoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydCA9PT0gdHJhbnNwb3J0KS5jaGF0SWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBtc2cgPSB7IHJlY2lwaWVudDogdXNlciwgYm90Tm9kZSwgY2hhdElkLCBtZXNzYWdlOiAnJyB9O1xuICAgICAgICBtc2cgPSBhd2FpdCBvcGVuV2l0aChtc2csIGlzVmFsaWRNZXNzYWdlKTtcbiAgICAgICAgaWYgKG1zZykge1xuICAgICAgICAgIHNlbmRNZXNzYWdlKCdtZXNzYWdlLnNlbmQnLCBtc2cpO1xuICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHtcbiAgICAgICAgICAgIHRpdGxlOiAnTWVzc2FnZSBzZW50JyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgTWVzc2FnZSBzZW50IHN1Y2Nlc3NmdWxseSB0byBcIiR7bmFtZShtc2cucmVjaXBpZW50KX1cImBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICA+Q29udGFjdCBVc2VyPC9CdXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZW5kTWVzc2FnZUJ1dHRvbjsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEJ1dHRvblRvb2xiYXIsIEZvcm1Hcm91cCB9IGZyb20gJ3JzdWl0ZSc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgUGFuZWwgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBXaWRnZXRGb3JtIGFzIFdpZGdldHMgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cyc7XG5pbXBvcnQgeyB1c2VOb2RlUmVkU29ja2V0IH0gZnJvbSAnLi4vLi4vc3JjL2hvb2tzL3NvY2tldCc7XG5cbmltcG9ydCBTZW5kTWVzc2FnZUJ1dHRvbiBmcm9tICcuL3ZpZXdzL3NlbmQtbWVzc2FnZS1idXR0b24nO1xuaW1wb3J0ICcuL3dpZGdldC1zZW5kLnNjc3MnO1xuaW1wb3J0IFNlbmRGb3JtIGZyb20gJy4vdmlld3Mvc2VuZC1mb3JtJztcblxuY29uc3QgeyBXaWRnZXRGb3JtLCBDb250ZW50LCBGb290ZXIgfSA9IFdpZGdldHM7XG5cblxuY29uc3QgU2VuZE1lc3NhZ2VXaWRnZXQgPSAoeyBzdGF0cyB9KSA9PiB7XG4gIGNvbnN0IFtmb3JtVmFsdWUsIHNldEZvcm1WYWx1ZV0gPSB1c2VTdGF0ZSh7IG1lc3NhZ2U6ICcnIH0pO1xuICBjb25zdCBjYW5TZW5kID0gIV8uaXNFbXB0eShmb3JtVmFsdWUuY2hhdElkKSAmJiAhXy5pc0VtcHR5KGZvcm1WYWx1ZS5ib3ROb2RlKTtcbiAgY29uc3QgeyBzZW5kTWVzc2FnZSB9ID0gdXNlTm9kZVJlZFNvY2tldCgpO1xuXG4gIHJldHVybiAoXG4gICAgPFBhbmVsIHRpdGxlPVwiU2VuZCBNZXNzYWdlXCIgY2xhc3NOYW1lPVwid2lkZ2V0LXNlbmQtbWVzc2FnZVwiPlxuICAgICAgPFdpZGdldEZvcm0gZmx1aWQgZm9ybVZhbHVlPXtmb3JtVmFsdWV9IG9uQ2hhbmdlPXtmb3JtVmFsdWUgPT4gc2V0Rm9ybVZhbHVlKGZvcm1WYWx1ZSl9PlxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8U2VuZEZvcm1cbiAgICAgICAgICAgIHZhbHVlPXtmb3JtVmFsdWV9XG4gICAgICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4gc2V0Rm9ybVZhbHVlKHZhbHVlKX1cbiAgICAgICAgICAgIG9uU3VibWl0PXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbmRNZXNzYWdlKCdtZXNzYWdlLnNlbmQnLCBmb3JtVmFsdWUpO1xuICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUoeyAuLi5mb3JtVmFsdWUsIG1lc3NhZ2U6ICcnIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0NvbnRlbnQ+XG4gICAgICAgIDxGb290ZXI+XG4gICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgICA8QnV0dG9uIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCIgZGlzYWJsZWQ9eyFjYW5TZW5kfSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UoJ21lc3NhZ2Uuc2VuZCcsIGZvcm1WYWx1ZSk7XG4gICAgICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHsgLi4uZm9ybVZhbHVlLCBtZXNzYWdlOiAnJyB9KTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgU2VuZCBNZXNzYWdlXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtleS1oaW50XCI+XG4gICAgICAgICAgICAgICAgU2hpZnQgKyBFbnRlciB0byBTZW5kXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgZmxvYXQ6ICdyaWdodCcgfX1cbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVmYXVsdFwiIG9uQ2xpY2s9eygpID0+IHNldEZvcm1WYWx1ZSh7IGJvdE5vZGU6IG51bGwsIHJlY2lwaWVudDogbnVsbCwgY2hhdElkOiBudWxsLCBtZXNzYWdlOiAnJyB9KX0+XG4gICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9CdXR0b25Ub29sYmFyPlxuICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICA8L0Zvb3Rlcj5cbiAgICAgIDwvV2lkZ2V0Rm9ybT5cbiAgICA8L1BhbmVsPlxuICApO1xufVxuXG5wbHVnKCd3aWRnZXRzJywgU2VuZE1lc3NhZ2VXaWRnZXQsIHsgeDogMCwgeTogMCwgdzogMiwgaDogNiwgaXNSZXNpemFibGU6IGZhbHNlLCBpZDogMSB9KTtcblxuLy8gcmVnaXN0ZXIgYnV0dG9uIGluIHRoZSB1c2VyIG1vZGFsIHRvIHJlZGlyZWN0IHRvIHN1cnZleSBsaXN0c1xucGx1ZyhcbiAgJ3VzZXItYnV0dG9uJyxcbiAgU2VuZE1lc3NhZ2VCdXR0b25cbik7XG5wbHVnKFxuICAndXNlci1yZWNvcmQtYnV0dG9ucycsXG4gICh7IHJlY29yZCB9KSA9PiA8U2VuZE1lc3NhZ2VCdXR0b24gdHJhbnNwb3J0PXtyZWNvcmQudHJhbnNwb3J0fSBhcHBlYXJhbmNlPVwicHJpbWFyeVwiIHVzZXI9e3JlY29yZC51c2VyfS8+LFxuICB7XG4gICAgdHlwZTogJ3N1cnZleSdcbiAgfVxuKTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBGbGV4Ym94R3JpZCwgTW9kYWwsIEJ1dHRvbiwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEZvcm0sIEZvcm1Db250cm9sIH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IExhbmd1YWdlUGlja2VyIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2xhbmd1YWdlLXBpY2tlcic7XG5pbXBvcnQgVXNlckF1dG9jb21wbGV0ZSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy91c2VyLWF1dG9jb21wbGV0ZSc7XG5pbXBvcnQgU2VsZWN0VHJhbnNwb3J0IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NlbGVjdC10cmFuc3BvcnQnO1xuXG5cblxuLy8gVE9ETyBkZWZhdWx0IHVzZXIgaW4gdXNlciBhdXRvY29tcGxldGVcblxuY29uc3QgU2ltdWxhdG9yUGFyYW1zTW9kYWwgPSAoe1xuICBwYXJhbXMsXG4gIG9uQ2FuY2VsID0gKCkgPT4ge30sXG4gIG9uU3VibWl0ID0gKCkgPT4ge30sXG4gIGRpc2FibGVkID0gZmFsc2UsXG4gIGFjdGl2ZUNoYXRib3RzXG59KSA9PiB7XG4gIGNvbnN0IFtmb3JtVmFsdWUsIHNldEZvcm1WYWx1ZV0gPSB1c2VTdGF0ZShwYXJhbXMpO1xuXG4gIHJldHVybiAoXG4gICAgPE1vZGFsXG4gICAgICBiYWNrZHJvcFxuICAgICAgc2hvd1xuICAgICAgb25IaWRlPXtvbkNhbmNlbH1cbiAgICAgIGtleWJvYXJkPXtmYWxzZX1cbiAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLXNpbXVsYXRvclwiPlxuICAgICAgPE1vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLlRpdGxlPlNpbXVsYXRvciBDb25maWd1cmF0aW9uPC9Nb2RhbC5UaXRsZT5cbiAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgZm9ybVZhbHVlPXtmb3JtVmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e25ld0Zvcm1WYWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB7Li4ubmV3Rm9ybVZhbHVlfTtcbiAgICAgICAgICAgIC8vIGlmIHVzZXIgY2hhbmdlZCBhbmQgaGFzIGEgcHJlZGVmaW5lZCBsYW5ndWFnZSwgdGhlbiBzZXQgdGhlIGxhbmd1YWdlXG4gICAgICAgICAgICBpZiAobmV3Rm9ybVZhbHVlLnVzZXIgIT0gbnVsbCAmJiAoZm9ybVZhbHVlLnVzZXIgPT0gbnVsbCB8fCBmb3JtVmFsdWUudXNlci5pZCAhPT0gbmV3Rm9ybVZhbHVlLnVzZXIuaWQpXG4gICAgICAgICAgICAgICYmIG5ld0Zvcm1WYWx1ZS51c2VyLmxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgIHZhbHVlcy5sYW5ndWFnZSA9IG5ld0Zvcm1WYWx1ZS51c2VyLmxhbmd1YWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHZhbHVlcyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBmbHVpZFxuICAgICAgICA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5JbXBlcnNvbmF0ZWQgVXNlcjwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgYWNjZXB0ZXI9e1VzZXJBdXRvY29tcGxldGV9XG4gICAgICAgICAgICBuYW1lPVwidXNlclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlRlc3QgVXNlclwiXG4gICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGbGV4Ym94R3JpZCBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiIHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzIwcHgnIH19PlxuICAgICAgICAgIDxGbGV4Ym94R3JpZC5JdGVtIGNvbHNwYW49ezExfT5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+TGFuZ3VhZ2U8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0xhbmd1YWdlUGlja2VyfVxuICAgICAgICAgICAgICAgIG5hbWU9XCJsYW5ndWFnZVwiXG4gICAgICAgICAgICAgICAgYmxvY2tcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICA8L0ZsZXhib3hHcmlkLkl0ZW0+XG4gICAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17MTF9PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5UcmFuc3BvcnQ8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e1NlbGVjdFRyYW5zcG9ydH1cbiAgICAgICAgICAgICAgICBuYW1lPVwibm9kZUlkXCJcbiAgICAgICAgICAgICAgICBibG9ja1xuICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgY2xlYW5hYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgPC9GbGV4Ym94R3JpZD5cbiAgICAgICAgPC9Gb3JtPlxuICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtvbkNhbmNlbH0gYXBwZWFyYW5jZT1cInN1YnRsZVwiPlxuICAgICAgICAgIENhbmNlbFxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU3VibWl0KHtcbiAgICAgICAgICAgIC4uLmZvcm1WYWx1ZSxcbiAgICAgICAgICAgIGNoYXRCb3Q6IGFjdGl2ZUNoYXRib3RzLmZpbmQoY2hhdGJvdCA9PiBjaGF0Ym90Lm5vZGVJZCA9PT0gZm9ybVZhbHVlLm5vZGVJZClcbiAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIFNhdmUgY29uZmlndXJhdGlvblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgIDwvTW9kYWw+XG4gICk7XG59O1xuU2ltdWxhdG9yUGFyYW1zTW9kYWwucHJvcFR5cGVzID0ge1xuICBwYXJhbXM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFuZ3VhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGlkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgdXNlcklkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgdXNlcm5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBsYW5ndWFnZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pLFxuICAgIG5vZGVJZDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgYWN0aXZlQ2hhdGJvdHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHJhbnNwb3J0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5vZGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yUGFyYW1zTW9kYWw7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJY29uLCBJY29uQnV0dG9uIH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IExhbmd1YWdlIGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2xhbmd1YWdlJztcblxuaW1wb3J0IFNpbXVsYXRvclBhcmFtc01vZGFsIGZyb20gJy4vc2ltdWxhdG9yLW1vZGFsJztcblxuY29uc3QgUGFuZWxNZW51ID0gKHsgdXNlciwgbGFuZ3VhZ2UsIG5vZGVJZCwgYWN0aXZlQ2hhdGJvdHMsIGRpc3BhdGNoIH0pID0+IHtcbiAgY29uc3QgW3BhcmFtcywgc2V0UGFyYW1zXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzaW11bGF0b3ItdHJhbnNwb3J0LW1lbnUgY2FuY2VsLWRyYWdcIj5cbiAgICAgIHtwYXJhbXMgIT0gbnVsbCAmJiAoICAgICAgICBcbiAgICAgICAgPFNpbXVsYXRvclBhcmFtc01vZGFsIFxuICAgICAgICAgIGFjdGl2ZUNoYXRib3RzPXthY3RpdmVDaGF0Ym90c31cbiAgICAgICAgICBwYXJhbXM9e3BhcmFtc31cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT4gc2V0UGFyYW1zKG51bGwpfVxuICAgICAgICAgIG9uU3VibWl0PXtwYXJhbXMgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAncGFyYW1zJywgcGFyYW1zIH0pO1xuICAgICAgICAgICAgc2V0UGFyYW1zKG51bGwpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+ICAgICAgICAgICAgICBcbiAgICAgICl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFcIj5cbiAgICAgICAge3VzZXIgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyXCI+e3VzZXIudXNlcm5hbWV9IDxlbT4oe3VzZXIudXNlcklkfSk8L2VtPjwvZGl2PlxuICAgICAgICApfVxuICAgICAgICB7dXNlciA9PSBudWxsICYmIDxkaXYgY2xhc3NOYW1lPVwidXNlclwiPlRlc3QgVXNlcjwvZGl2Pn1cbiAgICAgICAgPExhbmd1YWdlPntsYW5ndWFnZX08L0xhbmd1YWdlPlxuICAgICAgPC9kaXY+ICAgICAgXG4gICAgICA8SWNvbkJ1dHRvbiBcbiAgICAgICAgYXBwZWFyYW5jZT1cInN1YnRsZVwiIFxuICAgICAgICBpY29uPXs8SWNvbiBpY29uPVwiY29nXCIgLz59XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFBhcmFtcyh7IHVzZXI6IHVzZXIsIGxhbmd1YWdlLCBub2RlSWQgfSl9IFxuICAgICAgICBzdHlsZT17eyBtYXJnaW5Ub3A6ICctM3B4JywgbWFyZ2luUmlnaHQ6ICcxcHgnIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApOyAgXG59O1xuUGFuZWxNZW51LnByb3BUeXBlcyA9IHtcbiAgdXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB1c2VySWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdXNlcm5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFuZ3VhZ2U6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksXG4gIGxhbmd1YWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBub2RlSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWN0aXZlQ2hhdGJvdHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHJhbnNwb3J0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5vZGVJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFuZWxNZW51OyIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmNvbnN0IGhhbmRsZU1lc3NhZ2VzID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcblxuICBzd2l0Y2goYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgIC8vIGFkZCBtZXNzYWdlIHRvIHRoZSByaWdodCBxdWV1ZVxuICAgICAgY29uc3QgeyBwYXlsb2FkLCB0b3BpYyB9ID0gYWN0aW9uO1xuICAgICAgLy8gZXhpdCBpZiBub3QgZnJvbSBzaW11bGF0b3JcbiAgICAgIGlmICh0b3BpYyAhPT0gJ3NpbXVsYXRvcicpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXJyZW50ID0gXy5pc0FycmF5KHN0YXRlLnNpbXVsYXRvci5tZXNzYWdlc1twYXlsb2FkLnRyYW5zcG9ydF0pID8gc3RhdGUuc2ltdWxhdG9yICAubWVzc2FnZXNbcGF5bG9hZC50cmFuc3BvcnRdIDogW107XG5cbiAgICAgIGxldCB0b0FkZDtcbiAgICAgIGlmICghXy5pc0FycmF5KHBheWxvYWQucGF5bG9hZCkpIHtcbiAgICAgICAgdG9BZGQgPSB7IC4uLnBheWxvYWQsIHRzOiBtb21lbnQoKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b0FkZCA9IHBheWxvYWQucGF5bG9hZC5tYXAoY3VycmVudCA9PiAoeyAuLi5wYXlsb2FkLCAuLi5jdXJyZW50LCBwYXlsb2FkOiB1bmRlZmluZWQsIHRzOiBtb21lbnQoKSB9KSlcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0ge1xuICAgICAgICAuLi5zdGF0ZS5tZXNzYWdlcyxcbiAgICAgICAgLy8gbXVsdGlwbGUgbWVzc2FnZXMgY2FuIGJlIGVucXVldWVkXG4gICAgICAgIFtwYXlsb2FkLnRyYW5zcG9ydF06IFtcbiAgICAgICAgICAuLi5jdXJyZW50LFxuICAgICAgICAgIHRvQWRkXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzaW11bGF0b3I6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zaW11bGF0b3IsXG4gICAgICAgICAgbWVzc2FnZXNcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIGNhc2UgJ2NsZWFyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzaW11bGF0b3I6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zaW11bGF0b3IsXG4gICAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIC4uLnN0YXRlLm1lc3NhZ2VzLFxuICAgICAgICAgICAgW2FjdGlvbi50cmFuc3BvcnRdOiBbXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIGNhc2UgJ2dsb2JhbHMnOlxuICAgICAgLy8gc2V0IGdsb2JhbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzaW11bGF0b3I6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5zaW11bGF0b3IsXG4gICAgICAgICAgZ2xvYmFsczogYWN0aW9uLmdsb2JhbHNcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIGNhc2UgJ3BhcmFtcyc6XG4gICAgICBjb25zdCB7IHBhcmFtcyB9ID0gYWN0aW9uO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNpbXVsYXRvcjoge1xuICAgICAgICAgIC4uLnN0YXRlLnNpbXVsYXRvcixcbiAgICAgICAgICB0cmFuc3BvcnQ6IHBhcmFtcy5jaGF0Qm90LnRyYW5zcG9ydCxcbiAgICAgICAgICBub2RlSWQ6IHBhcmFtcy5jaGF0Qm90Lm5vZGVJZCxcbiAgICAgICAgICBsYW5ndWFnZTogcGFyYW1zLmxhbmd1YWdlLFxuICAgICAgICAgIHVzZXI6IHBhcmFtcy51c2VyXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVNZXNzYWdlczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFwcENvbnRleHQgZnJvbSAnLi4vY29tbW9uL2FwcC1jb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgKENvbXBvbmVudCkgPT4ge1xuICByZXR1cm4gKHByb3BzKSA9PiAoXG4gICAgPEFwcENvbnRleHQuQ29uc3VtZXI+XG4gICAgICB7KHsgYWN0aXZlQ2hhdGJvdHMgfSkgPT4ge1xuICAgICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IGFjdGl2ZUNoYXRib3RzPXthY3RpdmVDaGF0Ym90c30+e3Byb3BzLmNoaWxkcmVufTwvQ29tcG9uZW50PjtcbiAgICAgIH19XG4gICAgPC9BcHBDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgcGx1ZyB9IGZyb20gJ2NvZGUtcGx1Zyc7XG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvZ3JpZC1wYW5lbCc7XG5pbXBvcnQgd2l0aEFjdGl2ZUNoYXRib3RzIGZyb20gJy4uLy4uL3NyYy93cmFwcGVycy93aXRoLWFjdGl2ZS1jaGF0Ym90cyc7XG5pbXBvcnQgd2l0aFN0YXRlIGZyb20gJy4uLy4uL3NyYy93cmFwcGVycy93aXRoLXN0YXRlJztcbmltcG9ydCB7IHVzZU5vZGVSZWRTb2NrZXQgfSBmcm9tICcuLi8uLi9zcmMvaG9va3Mvc29ja2V0JztcbmltcG9ydCB1c2VSZWR1Y2VyIGZyb20gJy4uLy4uL3NyYy9ob29rcy91c2UtcmVkdWNlcic7XG5cbmltcG9ydCB7XG4gIE1lc3NhZ2VzLFxuICBDaGF0V2luZG93LFxuICBNZXNzYWdlQ29tcG9zZXJcbn0gZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvY2hhdCc7XG5cblxuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJpYy1jaGF0LW1lc3NhZ2UnO1xuXG5pbXBvcnQgJy4vc2ltdWxhdG9yLnNjc3MnO1xuaW1wb3J0IFBhbmVsTWVudSBmcm9tICcuL3ZpZXdzL3BhbmVsLW1lbnUnO1xuaW1wb3J0IGhhbmRsZU1lc3NhZ2VzIGZyb20gJy4vcmVkdWNlcic7XG5cbmltcG9ydCBTaW11bGF0b3JDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5cbmNvbnN0IHVzZVNpbXVsYXRvciA9ICh7IGFjdGl2ZUNoYXRib3RzIH0pID0+IHtcblxuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlUmVkdWNlcih7XG4gICAgc2ltdWxhdG9yOiB7XG4gICAgICBtZXNzYWdlczoge30sXG4gICAgICB0cmFuc3BvcnQ6ICFfLmlzRW1wdHkoYWN0aXZlQ2hhdGJvdHMpID8gYWN0aXZlQ2hhdGJvdHNbMF0udHJhbnNwb3J0IDogbnVsbCxcbiAgICAgIG5vZGVJZDogIV8uaXNFbXB0eShhY3RpdmVDaGF0Ym90cykgPyBhY3RpdmVDaGF0Ym90c1swXS5ub2RlSWQgOiBudWxsLFxuICAgICAgZ2xvYmFsczogbnVsbCxcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgdXNlcjogbnVsbFxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgeyBzZW5kTWVzc2FnZSB9ID0gdXNlTm9kZVJlZFNvY2tldCh7XG4gICAgb25SZWNlaXZlOiAodG9waWMsIHBheWxvYWQpID0+IHtcbiAgICAgIGlmICh0b3BpYyA9PT0gJ3NpbXVsYXRvcicpIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnbWVzc2FnZScsIHBheWxvYWQsIHRvcGljIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZSxcbiAgICBkaXNwYXRjaCxcbiAgICBzZW5kTWVzc2FnZTogKHRleHQsIHsgZWNobyA9IHRydWUgfSA9IHt9KSA9PiB7XG4gICAgICBjb25zdCB7IHRyYW5zcG9ydCwgbm9kZUlkLCBsYW5ndWFnZSwgdXNlcjogaW1wZXJzb25hdGVkVXNlciB9ID0gc3RhdGUuc2ltdWxhdG9yO1xuICAgICAgc2VuZE1lc3NhZ2UoJ3NpbXVsYXRvcicsIHtcbiAgICAgICAgdHJhbnNwb3J0LFxuICAgICAgICBub2RlSWQsXG4gICAgICAgIGxhbmd1YWdlLFxuICAgICAgICB1c2VySWQ6IGltcGVyc29uYXRlZFVzZXIgIT0gbnVsbCA/IGltcGVyc29uYXRlZFVzZXIudXNlcklkIDogNDIsXG4gICAgICAgIHVzZXJuYW1lOiBpbXBlcnNvbmF0ZWRVc2VyICE9IG51bGwgPyBpbXBlcnNvbmF0ZWRVc2VyLnVzZXJuYW1lIDogJ3Rlc3RVc2VyJyxcbiAgICAgICAgZmlyc3ROYW1lOiBpbXBlcnNvbmF0ZWRVc2VyICE9IG51bGwgPyBpbXBlcnNvbmF0ZWRVc2VyLmZpcnN0X25hbWUgOiBudWxsLFxuICAgICAgICBsYXN0TmFtZTogaW1wZXJzb25hdGVkVXNlciAhPSBudWxsID8gaW1wZXJzb25hdGVkVXNlci5sYXN0X25hbWUgOiBudWxsLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgY29udGVudDogdGV4dCxcbiAgICAgICAgICB0eXBlOiAnbWVzc2FnZSdcbiAgICAgICAgfSxcbiAgICAgICAgc2ltdWxhdG9yT3B0aW9uczoge1xuICAgICAgICAgIGVjaG9cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG59XG5cblxuXG5jb25zdCBTaW11bGF0b3JXaWRnZXQgPSAoeyBhY3RpdmVDaGF0Ym90cywgdXNlciB9KSA9PiB7XG4gIGNvbnN0IHsgc3RhdGU6IHsgc2ltdWxhdG9yIH0sIGRpc3BhdGNoLCBzZW5kTWVzc2FnZSB9ID0gdXNlU2ltdWxhdG9yKHsgYWN0aXZlQ2hhdGJvdHMgfSk7XG4gIGNvbnN0IHsgbWVzc2FnZXMsIHRyYW5zcG9ydCwgbm9kZUlkLCBsYW5ndWFnZSwgdXNlcjogaW1wZXJzb25hdGVkVXNlciB9ID0gc2ltdWxhdG9yO1xuICBjb25zdCBsb2FkaW5nID0gYWN0aXZlQ2hhdGJvdHMgPT0gbnVsbDtcblxuICBjb25zdCBjbGlja0hhbmRsZXIgPSAob2JqKSA9PiB7XG4gICAgaWYgKF8uaXNPYmplY3Qob2JqKSAmJiAob2JqLnR5cGUgPT09ICdwb3N0YmFjaycgfHwgb2JqLnR5cGUgPT09ICdxdWljay1yZXBseScpKSB7XG4gICAgICAvLyBkb24ndCBzaG93IG9uIHNpbXVsYXRvciB0aGUgdmFsdWUgc2VudCBieSB0aGUgYnV0dG9uXG4gICAgICBzZW5kTWVzc2FnZShvYmoudmFsdWUsIHsgZWNobzogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UGFuZWxcbiAgICAgIHRpdGxlPVwiQ2hhdCBTaW11bGF0b3JcIlxuICAgICAgY2xhc3NOYW1lPVwiY2hhdC1zaW11bGF0b3JcIlxuICAgICAgbWVudT17IWxvYWRpbmcgJiYgPFBhbmVsTWVudVxuICAgICAgICB1c2VyPXtpbXBlcnNvbmF0ZWRVc2VyfVxuICAgICAgICBsYW5ndWFnZT17bGFuZ3VhZ2V9XG4gICAgICAgIG5vZGVJZD17bm9kZUlkfVxuICAgICAgICB0cmFuc3BvcnQ9e3RyYW5zcG9ydH1cbiAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICBhY3RpdmVDaGF0Ym90cz17YWN0aXZlQ2hhdGJvdHN9XG4gICAgICAgIG9uQ2hhbmdlPXtjaGF0Qm90ID0+IGRpc3BhdGNoKHsgdHlwZTogJ2NoYXRCb3QnLCBjaGF0Qm90IH0pfVxuICAgICAgLz59XG4gICAgPlxuICAgICAgeyFsb2FkaW5nICYmIChcbiAgICAgICAgPFNpbXVsYXRvckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3NpbXVsYXRvcn0+XG4gICAgICAgIDxDaGF0V2luZG93PlxuICAgICAgICAgIDxNZXNzYWdlcz5cbiAgICAgICAgICAgIHttZXNzYWdlc1t0cmFuc3BvcnRdICE9IG51bGwgJiYgbWVzc2FnZXNbdHJhbnNwb3J0XS5tYXAobWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChfLmlzQXJyYXkobWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBtZXNzYWdlcyBhcmUgYWx3YXlzIGluYm91bmRcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2xpY2tIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICBrZXk9e21lc3NhZ2UubWFwKG1lc3NhZ2UgPT4gbWVzc2FnZS5tZXNzYWdlSWQpLmpvaW4oKX1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZS5tYXAobWVzc2FnZSA9PiAoeyAuLi5tZXNzYWdlLCB1c2VybmFtZTogJ2NoYXRib3QnIH0pKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2xpY2tIYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICBrZXk9e21lc3NhZ2UubWVzc2FnZUlkfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXshbWVzc2FnZS5pbmJvdW5kID8geyAuLi5tZXNzYWdlLCB1c2VybmFtZTogJ2NoYXRib3QnIH0gOiBtZXNzYWdlIH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9NZXNzYWdlcz5cbiAgICAgICAgICA8TWVzc2FnZUNvbXBvc2VyXG4gICAgICAgICAgICBvblNlbmQ9e21lc3NhZ2UgPT4gc2VuZE1lc3NhZ2UobWVzc2FnZSl9XG4gICAgICAgICAgICBvbkNsZWFyPXsoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdjbGVhcicsIHRyYW5zcG9ydCB9KX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0NoYXRXaW5kb3c+XG4gICAgICAgIDwvU2ltdWxhdG9yQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICl9XG4gICAgPC9QYW5lbD5cbiAgKTtcbn07XG5cbnBsdWcoXG4gICd3aWRnZXRzJyxcbiAgd2l0aFN0YXRlKHdpdGhBY3RpdmVDaGF0Ym90cyhTaW11bGF0b3JXaWRnZXQpLCAndXNlcicpLFxuICB7IHg6IDAsIHk6IDAsIHc6IDIsIGg6IDgsIGlzUmVzaXphYmxlOiB0cnVlLCBpZDogJ3NpbXVsYXRvci13aWRnZXQnLCBwZXJtaXNzaW9uOiAnc2ltdWxhdG9yJyB9XG4pO1xuXG5cbi8vIFRPRE8gbW92ZSBmcm9tIGhlcmVcbnBsdWcoJ3JlZHVjZXJzJywgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgaWYgKGFjdGlvbi50eXBlID09PSAnZGVmYXVsdCcpIHtcbiAgICByZXR1cm4geyAuLi5zdGF0ZSwgW2FjdGlvbi5rZXldOiBhY3Rpb24udmFsdWUgfTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59KTtcblxuXG5wbHVnKCdyZWR1Y2VycycsIGhhbmRsZU1lc3NhZ2VzKTtcblxuXG5cbnBsdWcoXG4gICdwZXJtaXNzaW9ucycsXG4gIG51bGwsXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnc2ltdWxhdG9yJyxcbiAgICBuYW1lOiAnQ2hhdCBTaW11bGF0b3InLFxuICAgIGRlc2NyaXB0aW9uOiAnQWNjZXNzIHRvIGNoYXQgc2ltdWxhdG9yJyxcbiAgICBncm91cDogJ0dlbmVyYWwnXG4gIH1cbik7XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBBcHBDb250ZXh0IGZyb20gJy4uL2NvbW1vbi9hcHAtY29udGV4dCc7XG5cbmNvbnN0IHVzZVJlZHVjZXIgPSBpbml0aWFsU3RhdGUgPT4ge1xuICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChBcHBDb250ZXh0KTtcblxuICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyhpbml0aWFsU3RhdGUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgIGlmIChzdGF0ZVtmaWVsZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdkZWZhdWx0Jywga2V5OiBmaWVsZCwgdmFsdWU6IGluaXRpYWxTdGF0ZVtmaWVsZF0gfSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSwgW10pO1xuXG4gIC8vIHJldHVybiBpbW1lZGlhdGVseSB0aGUgZGVmYXVsdCwgaWYgdGhlIHZpZXcgYnJlYWtzIHRoZSB1c2UgZWZmZWN0IHdpbGwgbmV2ZXIgYmUgY2FsbGVkXG4gIGNvbnN0IGZpbHRlcmVkU3RhdGUgPSBmaWVsZHMucmVkdWNlKChhY2N1bXVsYXRvciwgZmllbGQpID0+IHtcbiAgICBhY2N1bXVsYXRvcltmaWVsZF0gPSBzdGF0ZVtmaWVsZF0gIT09IHVuZGVmaW5lZCA/IHN0YXRlW2ZpZWxkXSA6IGluaXRpYWxTdGF0ZVtmaWVsZF07XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZTogZmlsdGVyZWRTdGF0ZSxcbiAgICBkaXNwYXRjaFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlUmVkdWNlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgJy4uL3N0eWxlcy9zdXJ2ZXktdmlld2VyLnNjc3MnO1xuXG5jb25zdCBBTFBIQUJFVCA9ICdBQkNERUZHSElMTU5PUFFSVFNVVlonO1xuXG5jb25zdCBBbnN3ZXIgPSAoeyBxdWVzdGlvbiB9KSA9PiB7XG4gIHN3aXRjaCAocXVlc3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ3RleHQnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnYW5zd2VyJywgeyBbcXVlc3Rpb24udHlwZV06IHRydWUgfSl9PntxdWVzdGlvbi5hbnN3ZXJ9PC9kaXY+XG4gICAgICApO1xuICAgIGNhc2UgJ211bHRpcGxlJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5zd2VyIG11bHRpcGxlXCI+XG4gICAgICAgICAge3F1ZXN0aW9uLmRhdGEubWFwKChhbnN3ZXIsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnY2hvaWNlJywgeyBzZWxlY3RlZDogYW5zd2VyLmFuc3dlciA9PT0gcXVlc3Rpb24uYW5zd2VyIHx8IGFuc3dlci52YWx1ZSA9PT0gcXVlc3Rpb24uYW5zd2VyIH0pfT5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicGxhY2Vob2xkZXJcIj57QUxQSEFCRVRbaW5kZXhdfTwvc3Bhbj4ge2Fuc3dlci5hbnN3ZXJ9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICB9XG59O1xuQW5zd2VyLnByb3BUeXBlcyA9IHtcbiAgcXVlc3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsndGV4dCcsICdudW1iZXInLCAnbXVsdGlwbGUnLCAnaW1hZ2UnXSksXG4gICAgYW5zd2VyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIH0pXG4gICAgXSlcbiAgfSlcbn07XG5cblxuY29uc3QgU3VydmVyeVZpZXdlciA9ICh7IHJlY29yZCB9KSA9PiB7XG4gIGNvbnN0IHsgcGF5bG9hZDogcXVlc3Rpb25zIH0gPSByZWNvcmQ7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN1cnZleS12aWV3ZXJcIj5cbiAgICAgIHtxdWVzdGlvbnMubWFwKHF1ZXN0aW9uID0+IChcbiAgICAgICAgPGRpdiBrZXk9e3F1ZXN0aW9uLmlkfSBjbGFzc05hbWU9XCJxdWVzdGlvblwiPlxuICAgICAgICAgIDxoNT57cXVlc3Rpb24udGl0bGV9PC9oNT5cbiAgICAgICAgICA8QW5zd2VyIHF1ZXN0aW9uPXtxdWVzdGlvbn0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApO1xufTtcblN1cnZlcnlWaWV3ZXIucHJvcFR5cGVzID0ge1xuICByZWNvcmQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcXVlc3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWyd0ZXh0JywgJ251bWJlcicsICdtdWx0aXBsZScsICdpbWFnZSddKSxcbiAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgICB9KVxuICAgICAgXSlcbiAgICB9KVxuICB9KVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3VydmVyeVZpZXdlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEljb24sIFdoaXNwZXIsIFRvb2x0aXAgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuY29uc3QgQmFkZ2VJY29uVG9vbHRpcCA9ICh7IGljb24sIHRleHQsIHRvb2x0aXAsIGNvbG9yIH0pID0+IHtcbiAgY29uc3QgZG9tID0gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCd1aS1iYWRnZS1pY29uLXRvb2x0aXAnLCB7IFtjb2xvcl06IHRydWUgfSl9PlxuICAgICAgPEljb24gaWNvbj17aWNvbn0gLz5cbiAgICAgIHt0ZXh0ICE9IG51bGwgJiYgPHNwYW4gY2xhc3NOYW1lPVwidGV4dFwiPnt0ZXh0fTwvc3Bhbj59XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgaWYgKHRvb2x0aXAgIT0gbnVsbCkge1xuICAgIHJldHVybiAoXG4gICAgICA8V2hpc3BlciB0cmlnZ2VyPVwiaG92ZXJcIiBwbGFjZW1lbnQ9XCJ0b3BcIiBzcGVha2VyPXs8VG9vbHRpcD57dG9vbHRpcH08L1Rvb2x0aXA+fT5cbiAgICAgICAge2RvbX1cbiAgICAgIDwvV2hpc3Blcj5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkb207XG4gIH1cbn07XG5CYWRnZUljb25Ub29sdGlwLnByb3BUeXBlcyA9IHtcbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3JlZCcsICdvcmFuZ2UnXSksXG4gIC8vIHRleHQgbmV4dCB0byB0aGUgaWNvblxuICB0ZXh0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvb2x0aXA6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhZGdlSWNvblRvb2x0aXA7IiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHVuaXF1ZUlkIGZyb20gJy4uLy4uL2hlbHBlcnMvdW5pcXVlLWlkJztcblxuY29uc3QgZmluZFF1ZXN0aW9uID0gKHF1ZXN0aW9ucywgcXVlc3Rpb24pID0+IHtcbiAgcmV0dXJuIHF1ZXN0aW9ucy5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gcXVlc3Rpb24uaWQpO1xufTtcblxuLy8gY2hlY2sgaWYgYSBxdWVzdGlvbiBpcyB0aGUgZmlyc3Qgb2YgYSBuZXN0ZWQgcXVlc3Rpb25cbi8vIGlmIHRoZSBwcmV2aW91cyBxdWVzdGlvbiBpcyBhbHNvIHRoZSBwYXJlbnRcbmNvbnN0IGlzRmlyc3RPZk5lc3RlZCA9IChxdWVzdGlvbnMsIHF1ZXN0aW9uKSA9PiB7XG4gIGNvbnN0IGlkeCA9IHF1ZXN0aW9ucy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09PSBxdWVzdGlvbi5pZCk7XG4gIHJldHVybiBpZHggIT09IC0xICYmIGlkeCAhPT0gMCAmJiBxdWVzdGlvbi5wYXJlbnQgPT09IHF1ZXN0aW9uc1tpZHggLSAxXS5pZDtcbn07XG5cbi8vIGdldCB0aGUgcGFyZW50IG9mIGEgcXVlc3Rpb24gaWYgYW55XG5jb25zdCBmaW5kUGFyZW50ID0gKHF1ZXN0aW9ucywgcXVlc3Rpb24pID0+IHtcbiAgcmV0dXJuIHF1ZXN0aW9uLnBhcmVudCAhPSBudWxsID8gcXVlc3Rpb25zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBxdWVzdGlvbi5wYXJlbnQpIDogbnVsbFxufTtcblxuY29uc3QgaGFzQ2hpbGRyZW4gPSAocXVlc3Rpb25zLCBxdWVzdGlvbikgPT4ge1xuICByZXR1cm4gcXVlc3Rpb25zLnNvbWUoaXRlbSA9PiBpdGVtLnBhcmVudCA9PT0gcXVlc3Rpb24uaWQpXG59O1xuXG5jb25zdCByZW1vdmUgPSAocXVlc3Rpb25zLCBxdWVzdGlvbikgPT4ge1xuICAvLyBpZiB3ZSBhcmUgcmVtb3ZpbmcgYSBxdWVzdGlvbiB3aXRoIGNoaWxkcmVuLCBtb3ZlIGFsbCBxdWVzdGlvbnMgdXBcbiAgY29uc3QgcGFyZW50ID0gZmluZFBhcmVudChxdWVzdGlvbnMsIHF1ZXN0aW9uKTtcblxuICByZXR1cm4gcXVlc3Rpb25zXG4gICAgLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgIT09IHF1ZXN0aW9uLmlkKVxuICAgIC5tYXAoaXRlbSA9PiB7XG4gICAgICAvLyBpZiBpdGVtIGlzIGNoaWxkcmVuIG9mIHRoZSByZW1vdmVkIGVsZW1lbnRcbiAgICAgIGlmIChpdGVtLnBhcmVudCA9PSBxdWVzdGlvbi5pZCkge1xuICAgICAgICAvLyB0cmFuc2ZlciB0byB0aGUgcGFyZW50IG9mIHRoZSByZW1vdmVkIGNoaWxkcmVuLCBvdGhlcndpc2UgdG8gcm9vdFxuICAgICAgICByZXR1cm4gcGFyZW50ICE9IG51bGwgPyB7IC4uLml0ZW0sIHBhcmVudDogcGFyZW50LmlkIH0gOiBfLm9taXQoaXRlbSwgJ3BhcmVudCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG59O1xuXG5jb25zdCByZXBsYWNlID0gKGl0ZW1zLCBvbGRFbGVtZW50LCBuZXdFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFsuLi5pdGVtc107XG4gIGNvbnN0IGlkeCA9IGl0ZW1zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IG9sZEVsZW1lbnQpO1xuICByZXN1bHRbaWR4XSA9IG5ld0VsZW1lbnQ7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBhZGQgPSAocXVlc3Rpb25zLCBwYXJhbXMpID0+IHtcbiAgY29uc3QgbmV3UXVlc3Rpb24gPSB7XG4gICAgaWQ6IHVuaXF1ZUlkKCdxXycpLFxuICAgIHRpdGxlOiAnJyxcbiAgICB0eXBlOiAnbXVsdGlwbGUnLFxuICAgIGRhdGE6IFtdXG4gIH07XG5cbiAgbGV0IG5ld1F1ZXN0aW9ucztcblxuICBpZiAocGFyYW1zLmFmdGVyICE9IG51bGwpIHtcbiAgICBjb25zdCBxdWVzdGlvbiA9IGZpbmRRdWVzdGlvbihxdWVzdGlvbnMsIHBhcmFtcy5hZnRlcik7XG4gICAgaWYgKGhhc0NoaWxkcmVuKHF1ZXN0aW9ucywgcXVlc3Rpb24pKSB7XG4gICAgICAvLyBpZiB0aGUgcXVlc3Rpb24gSSdtIGFkZGluZyBhZnRlciBoYXMgY2hpbGRyZW4sIHRoZW4gdGhlIG5ldyBxdWVzdGlvbiBpcyBpdCdzIGZpcnN0XG4gICAgICAvLyBjaGlsZHJlbiB0b29cbiAgICAgIG5ld1F1ZXN0aW9uLnBhcmVudCA9IHF1ZXN0aW9uLmlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBubyBzdWIgaXRlbXMsIHRoZW4gaXQganVzdCBpbmhlcml0cyB0aGUgc2FtZSBsZXZlbCAodGhlIHNhbWUgcGFyZW50KVxuICAgICAgbmV3UXVlc3Rpb24ucGFyZW50ID0gcXVlc3Rpb24ucGFyZW50O1xuICAgIH1cbiAgICBuZXdRdWVzdGlvbnMgPSBfLmZsYXR0ZW4ocXVlc3Rpb25zLm1hcChpdGVtID0+IGl0ZW0uaWQgPT09IHF1ZXN0aW9uLmlkID8gW3F1ZXN0aW9uLCBuZXdRdWVzdGlvbl0gOiBpdGVtKSk7XG4gIH0gZWxzZSBpZiAocGFyYW1zLmJlZm9yZSAhPSBudWxsKSB7XG4gICAgY29uc3QgcXVlc3Rpb24gPSBmaW5kUXVlc3Rpb24ocXVlc3Rpb25zLCBwYXJhbXMuYmVmb3JlKTtcbiAgICBuZXdRdWVzdGlvbi5wYXJlbnQgPSBxdWVzdGlvbi5wYXJlbnQ7XG4gICAgbmV3UXVlc3Rpb25zID0gXy5mbGF0dGVuKHF1ZXN0aW9ucy5tYXAoaXRlbSA9PiBpdGVtLmlkID09PSBxdWVzdGlvbi5pZCA/IFtuZXdRdWVzdGlvbiwgcXVlc3Rpb25dIDogaXRlbSkpO1xuICB9IGVsc2UgaWYgKHBhcmFtcy5uZXN0ZWQgIT0gbnVsbCkge1xuICAgIGNvbnN0IHF1ZXN0aW9uID0gZmluZFF1ZXN0aW9uKHF1ZXN0aW9ucywgcGFyYW1zLm5lc3RlZCk7XG4gICAgLy8gc2V0IHRoZSBwcmV2aW91cyBxdWVzdGlvbiBhcyBmYXRoZXJcbiAgICBuZXdRdWVzdGlvbi5wYXJlbnQgPSBxdWVzdGlvbi5pZDtcbiAgICBuZXdRdWVzdGlvbnMgPSBfLmZsYXR0ZW4ocXVlc3Rpb25zLm1hcChpdGVtID0+IGl0ZW0uaWQgPT09IHF1ZXN0aW9uLmlkID8gW3F1ZXN0aW9uLCBuZXdRdWVzdGlvbl0gOiBpdGVtKSk7XG4gIH1cblxuXG4gIHJldHVybiB7XG4gICAgcXVlc3Rpb246IG5ld1F1ZXN0aW9uLFxuICAgIHF1ZXN0aW9uczogcmV0YWcobmV3UXVlc3Rpb25zKVxuICB9O1xufTtcblxuLy8gcmV0dXJucyBhbiBoYXNoLCBmb3IgZWFjaCBub2RlIGlkIHRoZSBuZXN0ZWQgbGV2ZWwsIG15X2lkOiAzIG1lYW5zIHRoYXQgdGhlIHF1ZXN0aW9uc1xuLy8gd2l0aCBwYXJlbnQgPSAnbXlfaWQnIGlzIGF0IGxldmVsIDNcbmNvbnN0IGdldExldmVscyA9IHF1ZXN0aW9ucyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBxdWVzdGlvbnMuZm9yRWFjaChxdWVzdGlvbiA9PiB7XG4gICAgLy8gaWYgcXVlc3Rpb24gaGFzIHBhcmVudFxuICAgIGlmIChxdWVzdGlvbi5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgLy8gaWYgbGV2ZWwgb2YgdGhlIHBhcmVudCBpcyBub3QgeWV0IGNhbGN1bGF0ZWRcbiAgICAgIGlmIChyZXN1bHRbcXVlc3Rpb24ucGFyZW50XSA9PSBudWxsKSB7XG4gICAgICAgIC8vIGdldCB0aGUgcGFyZW50IHF1ZXN0aW9uXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHF1ZXN0aW9ucy5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PT0gcXVlc3Rpb24ucGFyZW50KTtcbiAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBoYXMgYSBwYXJlbnQsIHRoZW4ganVzdCBpbmNyZWFzZSB0aGUgbGV2ZWxcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdFtxdWVzdGlvbi5wYXJlbnRdID0gcmVzdWx0W3BhcmVudC5wYXJlbnRdICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRbcXVlc3Rpb24ucGFyZW50XSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIHJldGFnXG4gKiBSZWJ1aWxkIHRhZ3MgZm9yIHRlIHF1ZXN0aW9ucywgYWxzbyBzdG9yZSB0aGUgbGV2ZWwgb2YgdGhlIHF1ZXN0aW9uICgwIC0gcm9vdCkgdXNlZCBpbiB0aGUgbm9kZS1yZWQgbm9kZVxuICovXG5jb25zdCByZXRhZyA9IHF1ZXN0aW9ucyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFsuLi5xdWVzdGlvbnNdO1xuICBjb25zdCBsZXZlbHMgPSBnZXRMZXZlbHMocXVlc3Rpb25zKTtcbiAgY29uc3QgY291bnRlcnMgPSB7XG4gICAgcm9vdDogMFxuICB9O1xuXG4gIGNvbnN0IGdldFBhdGggPSBxdWVzdGlvbiA9PiB7XG4gICAgaWYgKHF1ZXN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3QgcGFyZW50ID0gcXVlc3Rpb24ucGFyZW50ICE9IG51bGwgPyBxdWVzdGlvbnMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IHF1ZXN0aW9uLnBhcmVudCkgOiBudWxsO1xuICAgIHJldHVybiBgJHtwYXJlbnQgIT0gbnVsbCA/IGdldFBhdGgocGFyZW50KSA6ICcnfSR7Y291bnRlcnNbcGFyZW50ICE9IG51bGwgPyBwYXJlbnQuaWQgOiAncm9vdCddfS5gXG4gIH07XG5cbiAgY29uc3QgZ2V0TGFiZWwgPSBxdWVzdGlvbiA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gcXVlc3Rpb24ucGFyZW50ICE9IG51bGwgPyBxdWVzdGlvbnMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IHF1ZXN0aW9uLnBhcmVudCkgOiBudWxsO1xuXG4gICAgbGV0IGluZGV4O1xuICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGNvdW50ZXJzW3BhcmVudC5pZF0gIT0gbnVsbCkge1xuICAgICAgICBjb3VudGVyc1twYXJlbnQuaWRdICs9IDE7XG4gICAgICAgIGluZGV4ID0gY291bnRlcnNbcGFyZW50LmlkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ZXJzW3BhcmVudC5pZF0gPSAxO1xuICAgICAgICBpbmRleCA9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ZXJzLnJvb3QgKz0gMTtcbiAgICAgIGluZGV4ID0gY291bnRlcnMucm9vdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYFEke2dldFBhdGgocGFyZW50KX0ke2luZGV4fWA7XG4gIH1cblxuICByZXR1cm4gcXVlc3Rpb25zLm1hcChxdWVzdGlvbiA9PiAoe1xuICAgIC4uLnF1ZXN0aW9uLFxuICAgIHRhZzogZ2V0TGFiZWwocXVlc3Rpb24pLFxuICAgIGxldmVsOiBfLmlzRW1wdHkocXVlc3Rpb24ucGFyZW50KSA/IDAgOiBsZXZlbHNbcXVlc3Rpb24ucGFyZW50XVxuICB9KSk7XG59XG5cbmNvbnN0IHN3YXAgPSAocXVlc3Rpb25zLCBvbGRJbmRleCwgbmV3SW5kZXgpID0+IHtcbiAgLy8gZG8gbm90IG1vdmUgaW50byBpdHNlbGZcbiAgaWYgKG9sZEluZGV4ID09PSBuZXdJbmRleCkge1xuICAgIHJldHVybiBxdWVzdGlvbnM7XG4gIH1cblxuICBjb25zdCBuZXdRdWVzdGlvbnMgPSBbLi4ucXVlc3Rpb25zXTtcbiAgY29uc3QgdG8gPSBuZXdJbmRleDtcbiAgY29uc3QgZnJvbSA9IG9sZEluZGV4XG5cbiAgY29uc3Qgc3RhcnRJbmRleCA9IHRvIDwgMCA/IG5ld1F1ZXN0aW9ucy5sZW5ndGggKyB0byA6IHRvO1xuICBjb25zdCBpdGVtID0gbmV3UXVlc3Rpb25zLnNwbGljZShmcm9tLCAxKVswXTtcbiAgbmV3UXVlc3Rpb25zLnNwbGljZShzdGFydEluZGV4LCAwLCBpdGVtKTtcblxuICBjb25zdCBtb3ZlZFF1ZXN0aW9uID0gbmV3UXVlc3Rpb25zW25ld0luZGV4XTtcbiAgY29uc3QgcHJldmlvdXMgPSBuZXdJbmRleCA+IDAgPyBuZXdRdWVzdGlvbnNbbmV3SW5kZXggLSAxXSA6IG51bGw7XG4gIGNvbnN0IGhhc1N1YlF1ZXN0aW9ucyA9IGhhc0NoaWxkcmVuKHF1ZXN0aW9ucywgbW92ZWRRdWVzdGlvbik7XG4gIGNvbnN0IHBhcmVudCA9IGZpbmRQYXJlbnQocXVlc3Rpb25zLCBtb3ZlZFF1ZXN0aW9uKTtcblxuICAvL2NvbnNvbGUubG9nKCdtb3ZlZFF1ZXN0aW9uJywgbW92ZWRRdWVzdGlvbilcbiAgLy9jb25zb2xlLmxvZygncHJldmlvdXMnLCBwcmV2aW91cylcbiAgLy9jb25zb2xlLmxvZygnaGFzU3ViUXVlc3Rpb25zJywgaGFzU3ViUXVlc3Rpb25zKVxuICAvL2NvbnNvbGUubG9nKCdwYXJlbnQnLCBwYXJlbnQpXG4gIC8vIGlmIHRoZSBwcmV2aW91cyBhcnRpY2xlIGhhcyBzb21lIGNoaWxkcmVuLCB0aGVuIHRoZSBtb3ZlZCBxdWVzdGlvbiBiZWNvbWVzXG4gIC8vIGl0cyBjaGlsZHJlbiB0b29cbiAgaWYgKHByZXZpb3VzICE9IG51bGwgJiYgaGFzQ2hpbGRyZW4ocXVlc3Rpb25zLCBwcmV2aW91cykpIHtcbiAgICBuZXdRdWVzdGlvbnNbbmV3SW5kZXhdLnBhcmVudCA9IHByZXZpb3VzLmlkO1xuICB9IGVsc2Uge1xuICAgIG5ld1F1ZXN0aW9uc1tuZXdJbmRleF0ucGFyZW50ID0gbnVsbDtcbiAgfVxuICAvLyBpZiB0aGUgbW92ZWQgcXVlc3Rpb24gaGFzIGNoaWxkcmVuLCB0aGVuIG1vdmUgdXAgb25lIGxldmVsXG4gIGlmIChoYXNTdWJRdWVzdGlvbnMpIHtcbiAgICBxdWVzdGlvbnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGlmIChpdGVtLnBhcmVudCA9PT0gbW92ZWRRdWVzdGlvbi5pZCkge1xuICAgICAgICBpdGVtLnBhcmVudCA9IHBhcmVudCAhPSBudWxsID8gcGFyZW50LmlkIDogbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdRdWVzdGlvbnM7XG59O1xuXG5leHBvcnQgeyBmaW5kUXVlc3Rpb24sIGlzRmlyc3RPZk5lc3RlZCwgZmluZFBhcmVudCwgaGFzQ2hpbGRyZW4sIHJlbW92ZSwgcmVwbGFjZSwgYWRkLCBnZXRMZXZlbHMsIHJldGFnLCBzd2FwIH07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgU3VydmV5RWRpdG9yQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5leHBvcnQgZGVmYXVsdCBTdXJ2ZXlFZGl0b3JDb250ZXh0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0ICcuLi9zdHlsZXMvdGFnLnNjc3MnO1xuXG5jb25zdCBUYWcgPSAoeyBjaGlsZHJlbiwgc2l6ZSA9ICdzbWFsbCcgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygncXVlc3Rpb24tdGFnJywgeyBbc2l6ZV06IHRydWUgfSl9PntjaGlsZHJlbn08L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFRhZztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgc29ydGFibGVIYW5kbGUsIHNvcnRhYmxlRWxlbWVudCB9IGZyb20gJ3JlYWN0LXNvcnRhYmxlLWhvYyc7XG5cbmltcG9ydCBJY29uVG9vbHRpcCBmcm9tICcuLi8uLi9iYWRnZS1pY29uLXRvb2x0aXAnO1xuXG5pbXBvcnQgeyBpc0ZpcnN0T2ZOZXN0ZWQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCBTdXJ2ZXlFZGl0b3JDb250ZXh0IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IFRhZyBmcm9tICcuL3RhZyc7XG5cbmNvbnN0IElOREVOVF9TSVpFID0gODtcbmNvbnN0IERyYWdIYW5kbGUgPSBzb3J0YWJsZUhhbmRsZSgoKSA9PiA8ZGl2IGNsYXNzTmFtZT1cImdyaXBweVwiPjwvZGl2Pik7XG5cbmNvbnN0IFF1ZXN0aW9uID0gKHtcbiAgcXVlc3Rpb24sXG4gIG9uU2VsZWN0ID0gKCkgPT4ge30sXG4gIGFjdGl2ZSA9IGZhbHNlLFxuICBsZXZlbCA9IG51bGxcbn0pID0+IHtcbiAgY29uc3QgeyBxdWVzdGlvbnMgfSA9IHVzZUNvbnRleHQoU3VydmV5RWRpdG9yQ29udGV4dCk7XG5cbiAgY29uc3QgZm9ya3MgPSAoXy5pc0FycmF5KHF1ZXN0aW9uLmRhdGEpID8gcXVlc3Rpb24uZGF0YSA6IFtdKVxuICAgIC5maWx0ZXIoYW5zd2VyID0+IGFuc3dlci5qdW1wICE9IG51bGwpXG4gICAgLm1hcChhbnN3ZXIgPT4ge1xuICAgICAgY29uc3QganVtcFRvID0gcXVlc3Rpb25zLmZpbmQocXVlc3Rpb24gPT4gcXVlc3Rpb24uaWQgPT09IGFuc3dlci5qdW1wKTtcbiAgICAgIGlmIChqdW1wVG8gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxJY29uVG9vbHRpcFxuICAgICAgICAgICAga2V5PXtqdW1wVG8udGFnfVxuICAgICAgICAgICAgaWNvbj1cImNvZGUtZm9ya1wiXG4gICAgICAgICAgICB0ZXh0PXtqdW1wVG8udGFnfVxuICAgICAgICAgICAgY29sb3I9XCJvcmFuZ2VcIlxuICAgICAgICAgICAgdG9vbHRpcD17YEp1bXAgdG8gJHtqdW1wVG8udGFnfSBpZiB1c2VyIHNlbGVjdHMgXCIke2Fuc3dlci5hbnN3ZXJ9XCJgfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgbGV0IHdhcm5pbmdzO1xuICBpZiAocXVlc3Rpb24ucGFyZW50ICE9IG51bGwgJiYgaXNGaXJzdE9mTmVzdGVkKHF1ZXN0aW9ucywgcXVlc3Rpb24pKSB7XG4gICAgLy8gZmluZCBhdCBsZWFzdCBhIHF1ZXN0aW9uIHdoaWNoIGp1bXBzIHRvIHRoaXMgcXVlc3Rpb24sIHNpbmNlIGl0J3MgbmVzdGVkXG4gICAgLy8gaXQgd2lsbCBuZXZlciBiZSByZWFjaGVkIGluIHRoZSBzdXJ2ZXksIG9ubHkgY2hlY2sgZm9yIHRoZSBmaXJzdCBvZiB0aGUgZ3JvdXBcbiAgICAvLyBvZiBuZXN0ZWQgcXVlc3Rpb25zXG4gICAgY29uc3QgaGFzSnVtcCA9IF8ocXVlc3Rpb25zKS5jaGFpbigpXG4gICAgICAuZmlsdGVyKHF1ZXN0aW9uID0+IHF1ZXN0aW9uLnR5cGUgPT09ICdtdWx0aXBsZScpXG4gICAgICAubWFwKHF1ZXN0aW9uID0+IF8uaXNBcnJheShxdWVzdGlvbi5kYXRhKSA/IHF1ZXN0aW9uLmRhdGEgOiBbXSlcbiAgICAgIC5mbGF0dGVuKClcbiAgICAgIC5zb21lKGFuc3dlciA9PiBhbnN3ZXIuanVtcCA9PT0gcXVlc3Rpb24uaWQpXG4gICAgICAudmFsdWUoKTtcblxuICAgIGlmICghaGFzSnVtcCkge1xuICAgIHdhcm5pbmdzID0gKFxuICAgICAgPEljb25Ub29sdGlwXG4gICAgICAgIGljb249XCJleGNsYW1hdGlvbi10cmlhbmdsZVwiXG4gICAgICAgIGtleT1cImp1bXAtd2FybmluZ1wiXG4gICAgICAgIGNvbG9yPVwicmVkXCJcbiAgICAgICAgdG9vbHRpcD17YE5vIGNvbmRpdGlvbmFsIGp1bXAgdG8gdGhpcyBxdWVzdGlvbi5cbiAgICAgICAgVGhpcyBpcyBhIG5lc3RlZCBxdWVzdGlvbiBhbmQgY2FuIG9ubHkgYmUgcmVhY2hlZCBpbiB0aGUgc3VydmV5IHdpdGggYSBjb25kaXRpb25hbCBhbnN3ZXIgaW4gYSBtdWx0aXBsZSBjaG9pY2UgcXVlc3Rpb25gfVxuICAgICAgLz5cbiAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3VpLXN1cnZleS1xdWVzdGlvbicsIHsgYWN0aXZlIH0pfT5cbiAgICAgIHtsZXZlbCAhPSBudWxsICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmRlbnRcIiBzdHlsZT17eyBmbGV4OiBgMCAwICR7SU5ERU5UX1NJWkUgKiBsZXZlbH1weGB9fS8+XG4gICAgICApfVxuICAgICAgPERyYWdIYW5kbGUgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFwiIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uU2VsZWN0KHF1ZXN0aW9uKVxuICAgICAgfX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YVwiPlxuICAgICAgICAgIDxUYWc+e3F1ZXN0aW9uLnRhZ308L1RhZz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImljb25zXCI+XG4gICAgICAgICAgICB7Zm9ya3N9XG4gICAgICAgICAgICB7d2FybmluZ3N9XG4gICAgICAgICAgICB7cXVlc3Rpb24udHlwZSA9PT0gJ211bHRpcGxlJyAmJiAoXG4gICAgICAgICAgICAgIDxJY29uVG9vbHRpcFxuICAgICAgICAgICAgICAgIGljb249XCJsaXN0XCJcbiAgICAgICAgICAgICAgICB0ZXh0PXtxdWVzdGlvbi5kYXRhLmxlbmd0aH1cbiAgICAgICAgICAgICAgICB0b29sdGlwPVwiTXVsdGlwbGUgY2hvaWNlIHF1ZXN0aW9uXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cXVlc3Rpb24udHlwZSA9PT0gJ3RleHQnICYmIChcbiAgICAgICAgICAgICAgPEljb25Ub29sdGlwXG4gICAgICAgICAgICAgICAgaWNvbj1cImZvbnRcIlxuICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJGcmVlIHRleHQgcXVlc3Rpb25cIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtxdWVzdGlvbi50eXBlID09PSAnbnVtYmVyJyAmJiAoXG4gICAgICAgICAgICAgIDxJY29uVG9vbHRpcFxuICAgICAgICAgICAgICAgIGljb249XCJwZXJjZW50XCJcbiAgICAgICAgICAgICAgICB0b29sdGlwPVwiTnVtZXJpYyBxdWVzdGlvblwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3F1ZXN0aW9uLnR5cGUgPT09ICdpbWFnZScgJiYgKFxuICAgICAgICAgICAgICA8SWNvblRvb2x0aXBcbiAgICAgICAgICAgICAgICBpY29uPVwiaW1hZ2VcIlxuICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJJbWFnZSAgIHF1ZXN0aW9uXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAge3F1ZXN0aW9uLnRpdGxlfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3Rpb24tYmFyXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5RdWVzdGlvbi5wcm9wVHlwZXMgPSB7XG4gIHF1ZXN0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGV2ZWw6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgdGFnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnbXVsdGlwbGUnLCAnc3RyaW5nJywgJ251bWJlcicsICdpbWFnZSddKS5pc1JlcXVpcmVkLFxuICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgYW5zd2VyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGp1bXA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgICB9KSlcbiAgICBdKVxuICB9KSxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBsZXZlbDogUHJvcFR5cGVzLm51bWJlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc29ydGFibGVFbGVtZW50KFF1ZXN0aW9uKTtcbiIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgTW9kYWwgfSBmcm9tICdyc3VpdGUnO1xuXG5sZXQgZG9tID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyRE9NKCkge1xuICBpZiAoIWRvbSkge1xuICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgfVxuXG4gIHJldHVybiBkb207XG59XG5cbmZ1bmN0aW9uIEludGVyYWN0aW9uTW9kYWwoe1xuICBva0J1dHRvblRleHQgPSAnT2snLFxuICBvbk9rLFxuICBzaG93Q2FuY2VsQnV0dG9uID0gdHJ1ZSxcbiAgY2FuY2VsQnV0dG9uVGV4dCA9ICdDYW5jZWwnLFxuICBvbkNhbmNlbCxcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgW3Nob3VsZFNob3dNb2RhbCwgc2V0U2hvdWxkU2hvd01vZGFsXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIGNvbnN0IGhhbmRsZU9rID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgc2V0U2hvdWxkU2hvd01vZGFsKGZhbHNlKTtcbiAgICAgIG9uT2sgJiYgb25PaygpO1xuICB9LCBbb25Pa10pO1xuXG4gIGNvbnN0IGhhbmRsZUNhbmNlbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHNldFNob3VsZFNob3dNb2RhbChmYWxzZSk7XG4gICAgICBvbkNhbmNlbCAmJiBvbkNhbmNlbCgpO1xuICB9LCBbb25DYW5jZWxdKTtcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbCBzaXplPVwic21cIiBzaG93PXtzaG91bGRTaG93TW9kYWx9PlxuICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgIHtzaG93Q2FuY2VsQnV0dG9uICYmIChcbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNhbmNlbH0+XG4gICAgICAgICAgICB7Y2FuY2VsQnV0dG9uVGV4dH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVPa30gYXBwZWFyYW5jZT1cInByaW1hcnlcIj5cbiAgICAgICAgICB7b2tCdXR0b25UZXh0fVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgIDwvTW9kYWw+XG4gICk7XG59XG5cbmNvbnN0IHByb21wdCA9IChGb3JtLCB2YWx1ZSwgeyBva0xhYmVsID0gJ09rJywgY2FuY2VsTGFiZWwgPSAnQ2FuY2VsJyB9ID0geyB9KSA9PiB7XG4gIGxldCBjdXJyZW50VmFsdWUgPSB7IC4uLnZhbHVlIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgPEludGVyYWN0aW9uTW9kYWxcbiAgICAgICAgb2tCdXR0b25UZXh0PXtva0xhYmVsfVxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0PXtjYW5jZWxMYWJlbH1cbiAgICAgICAga2V5PXtEYXRlLm5vdygpfVxuICAgICAgICBvbk9rPXsoKSA9PiByZXNvbHZlKGN1cnJlbnRWYWx1ZSl9XG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiByZXNvbHZlKG51bGwpfVxuICAgICAgPlxuICAgICAgICA8Rm9ybVxuICAgICAgICAgIGZvcm1WYWx1ZT17Y3VycmVudFZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtVmFsdWUgPT4gY3VycmVudFZhbHVlID0gZm9ybVZhbHVlfVxuICAgICAgICAvPlxuICAgICAgPC9JbnRlcmFjdGlvbk1vZGFsPixcbiAgICAgIGdldENvbnRhaW5lckRPTSgpXG4gICAgKTtcbiAgfSk7XG59XG5cblxuXG5leHBvcnQgZGVmYXVsdCBwcm9tcHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm0sIEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFNlbGVjdFBpY2tlciwgSGVscEJsb2NrLCBDb250cm9sTGFiZWwgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IFRhZyBmcm9tICcuLi8uLi90YWcnO1xuXG5jb25zdCBHb1RvRm9ybSA9ICh7IGZvcm1WYWx1ZSwgcXVlc3Rpb25zLCBvbkNoYW5nZSA9ICgpID0+IHt9LCBleGNsdWRlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEZvcm1cbiAgICAgICAgZm9ybURlZmF1bHRWYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIGZsdWlkXG4gICAgICA+XG4gICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICA8Q29udHJvbExhYmVsPkp1bXAgVG8gUXVlc3Rpb248L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgbmFtZT1cImp1bXBcIlxuICAgICAgICAgIGFjY2VwdGVyPXtTZWxlY3RQaWNrZXJ9XG4gICAgICAgICAgYmxvY2s9e3RydWV9XG4gICAgICAgICAgZGF0YT17cXVlc3Rpb25zXG4gICAgICAgICAgICAuZmlsdGVyKHF1ZXN0aW9uID0+IGV4Y2x1ZGUgPT0gbnVsbCB8fCBxdWVzdGlvbi5pZCAhPT0gZXhjbHVkZSlcbiAgICAgICAgICAgIC5tYXAocXVlc3Rpb24gPT4gKHtcbiAgICAgICAgICAgICAgdmFsdWU6IHF1ZXN0aW9uLmlkLFxuICAgICAgICAgICAgICBsYWJlbDogcXVlc3Rpb24udGl0bGUsXG4gICAgICAgICAgICAgIC4uLnF1ZXN0aW9uXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyTWVudUl0ZW09eyhsYWJlbCwgaXRlbSkgPT4gKDxkaXY+PFRhZz57aXRlbS50YWd9PC9UYWc+IHtpdGVtLnRpdGxlfTwvZGl2Pil9XG4gICAgICAgICAgcmVuZGVyVmFsdWU9eyhsYWJlbCwgaXRlbSkgPT4gKDxkaXY+PFRhZz57aXRlbS50YWd9PC9UYWc+IHtpdGVtLnRpdGxlfTwvZGl2Pil9XG4gICAgICAgICAgb25DbGVhbj17KCkgPT4gb25DaGFuZ2UoeyAuLi5mb3JtVmFsdWUsIGp1bXA6IG51bGwgfSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgU2VsZWN0IHRoZSBxdWVzdGlvbiB0byBqdW1wIHRvIGlmIHRoZSB1c2VyIHNlbGVjdCB0aGlzIHRoZSBhbnN3ZXIgPGVtPlwie2Zvcm1WYWx1ZS5hbnN3ZXJ9XCI8L2VtPlxuICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR29Ub0Zvcm07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgUXVlc3Rpb25EZXRhaWxDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uRGV0YWlsQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBJbnB1dCwgSWNvbiwgSWNvbkJ1dHRvbiwgRm9ybSwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgSGVscEJsb2NrLCBDb250cm9sTGFiZWwgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IENvbGxlY3Rpb25FZGl0b3IgZnJvbSAnLi4vLi4vLi4vY29sbGVjdGlvbi1lZGl0b3InO1xuaW1wb3J0IHByb21wdCBmcm9tICcuLi8uLi8uLi9wcm9tcHQnO1xuXG5pbXBvcnQgU3VydmV5RWRpdG9yQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0JztcbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuaW1wb3J0IEdvVG9Gb3JtIGZyb20gJy4vdmlld3MvZ28tdG8nO1xuaW1wb3J0IFF1ZXN0aW9uRGV0YWlsQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0LXF1ZXN0aW9uLWRldGFpbCc7XG5cbmNvbnN0IEFMUEhBQkVUID0gJ0FCQ0RFRkdISUxNTk9QUVJUU1VWWic7XG5cbmNvbnN0IEFuc3dlclZhbHVlID0gKHsgZm9ybVZhbHVlLCBvbkNoYW5nZSA9ICgpID0+IHt9IH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEZvcm1cbiAgICAgICAgZm9ybURlZmF1bHRWYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBpZiAoXy5pc0VtcHR5KGZvcm1WYWx1ZS52YWx1ZSkpIHtcbiAgICAgICAgICAgIGZvcm1WYWx1ZS52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9uQ2hhbmdlKGZvcm1WYWx1ZSk7XG4gICAgICAgIH19XG4gICAgICAgIGZsdWlkXG4gICAgICA+XG4gICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICA8Q29udHJvbExhYmVsPlN0b3JlIHZhbHVlIGZvciB0aGUgYW5zd2VyPC9Db250cm9sTGFiZWw+XG4gICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgIG5hbWU9XCJ2YWx1ZVwiXG4gICAgICAgICAgYWNjZXB0ZXI9e0lucHV0fVxuICAgICAgICAvPlxuICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgIFNlbGVjdCB0aGUgdmFsdWUgZm9yIHRoZSBhbnN3ZXIgPGVtPlwie2Zvcm1WYWx1ZS5hbnN3ZXJ9XCI8L2VtPiAod2hpY2ggaXMgd2hhdCB0aGUgdXNlciB3aWxsIHNlZSksIHNlbGVjdCB0aGEgcmVhbFxuICAgICAgICAgIHZhbHVlIHRoYXQgd2lsbCBiZSBzdG9yZWQgKGdlbmVyYWxseSBhIG1vcmUgY29uY2lzZSBzdHJpbmcpXG4gICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuQW5zd2VyVmFsdWUucHJvcFR5cGVzID0ge1xuICBmb3JtRGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbmNvbnN0IEFuc3dlckZvcm0gPSAoeyB2YWx1ZSwgb25DaGFuZ2UsIG9yZGVyIH0pID0+IHtcbiAgY29uc3QgeyBxdWVzdGlvbnMgfSA9IHVzZUNvbnRleHQoU3VydmV5RWRpdG9yQ29udGV4dCk7XG4gIGNvbnN0IHsgcXVlc3Rpb24gfSA9IHVzZUNvbnRleHQoUXVlc3Rpb25EZXRhaWxDb250ZXh0KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1aS1zdXJ2ZXktZWRpdG9yLW11bHRpcGxlLWFuc3dlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwbGFjZWhvbGRlclwiPntBTFBIQUJFVFtvcmRlcl19PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuc3dlclwiPlxuICAgICAgICA8SW5wdXQgdmFsdWU9e3ZhbHVlLmFuc3dlcn0gb25DaGFuZ2U9e2Fuc3dlciA9PiBvbkNoYW5nZSh7IC4uLnZhbHVlLCBhbnN3ZXIgfSl9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sc1wiPlxuICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgIGFwcGVhcmFuY2U9e3ZhbHVlLnZhbHVlICE9IG51bGwgPyAncHJpbWFyeScgOiAnZGVmYXVsdCd9XG4gICAgICAgICAgaWNvbj17PEljb24gaWNvbj1cImFsaWduLWp1c3RpZnlcIiBzaXplPVwibGdcIi8+fVxuICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdoYXQgPSBhd2FpdCBwcm9tcHQoQW5zd2VyVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh3aGF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgb25DaGFuZ2UoeyAuLi52YWx1ZSwgdmFsdWU6IHdoYXQudmFsdWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgJm5ic3A7XG4gICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgYXBwZWFyYW5jZT17dmFsdWUuanVtcCAhPSBudWxsID8gJ3ByaW1hcnknIDogJ2RlZmF1bHQnfVxuICAgICAgICAgIGljb249ezxJY29uIGljb249XCJhcnJvdy1jaXJjbGUtcmlnaHRcIiBzaXplPVwibGdcIi8+fVxuICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdoYXQgPSBhd2FpdCBwcm9tcHQocHJvcHMgPT4gPEdvVG9Gb3JtIHsuLi5wcm9wc30gZXhjbHVkZT17cXVlc3Rpb24uaWR9IHF1ZXN0aW9ucz17cXVlc3Rpb25zfSAvPiwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHdoYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBvbkNoYW5nZSh7IC4uLnZhbHVlLCBqdW1wOiB3aGF0Lmp1bXAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59O1xuQW5zd2VyRm9ybS5wcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAganVtcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvcmRlcjogUHJvcFR5cGVzLm51bWJlclxufVxuXG5cbmNvbnN0IE11bHRpcGxlID0gKHsgZGF0YSwgb25DaGFuZ2UgPSAoKSA9PiB7fSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sIGNvbnRyb2wtbXVsdGlwbGVcIj5cbiAgICAgIDxDb2xsZWN0aW9uRWRpdG9yXG4gICAgICAgIHZhbHVlPXtkYXRhfVxuICAgICAgICBmb3JtPXtBbnN3ZXJGb3JtfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIGxhYmVsQWRkPVwiQWRkIGFuc3dlclwiXG4gICAgICAgIGxhYmVsRW1wdHk9XCJObyBhbnN3ZXJzXCJcbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuTXVsdGlwbGUucHJvcFR5cGVzID0ge1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBhbnN3ZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBqdW1wOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KSlcbiAgXSlcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBNdWx0aXBsZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IERyb3Bkb3duLCBCdXR0b25Ub29sYmFyLCBCdXR0b24sIEJ1dHRvbkdyb3VwLCBJY29uQnV0dG9uLCBJY29uIH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IGNvbmZpcm0gZnJvbSAnLi4vLi4vY29uZmlybSc7XG5cbmltcG9ydCBUYWcgZnJvbSAnLi90YWcnO1xuaW1wb3J0IE11bHRpcGxlIGZyb20gJy4vY29udHJvbHMvbXVsdGlwbGUnO1xuXG5pbXBvcnQgUXVlc3Rpb25EZXRhaWxDb250ZXh0IGZyb20gJy4uL2NvbnRleHQtcXVlc3Rpb24tZGV0YWlsJztcblxuaW1wb3J0ICcuLi9zdHlsZXMvcXVlc3Rpb24tZGV0YWlsLnNjc3MnO1xuXG5jb25zdCBDT05UUk9MUyA9IFtcbiAgeyB0eXBlOiAnbXVsdGlwbGUnLCBsYWJlbDogJ011bHRpcGxlIENob2ljZScsIGRlZmF1bHQ6IFtdIH0sXG4gIHsgdHlwZTogJ3RleHQnLCBsYWJlbDogJ0ZyZWUgVGV4dCcsIGRlZmF1bHQ6IG51bGwgfSxcbiAgeyB0eXBlOiAnbnVtYmVyJywgbGFiZWw6ICdOdW1iZXInLCBkZWZhdWx0OiBudWxsIH0sXG4gIHsgdHlwZTogJ2ltYWdlJywgbGFiZWw6ICdVcGxvYWQgaW1hZ2UnLCBkZWZhdWx0OiBudWxsIH1cbl07XG5cbmNvbnN0IFF1ZXN0aW9uRGV0YWlsID0gKHtcbiAgcXVlc3Rpb24sXG4gIG9uQ2hhbmdlID0gKCkgPT4ge30sXG4gIG9uUmVtb3ZlID0gKCkgPT4ge30sXG4gIG9uQWRkID0gKCkgPT4ge31cbn0pID0+IHtcblxuICBsZXQgY29uZmlndXJhdGlvbjtcbiAgc3dpdGNoIChxdWVzdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnbXVsdGlwbGUnOlxuICAgICAgY29uZmlndXJhdGlvbiA9IChcbiAgICAgICAgPE11bHRpcGxlXG4gICAgICAgICAgZGF0YT17cXVlc3Rpb24uZGF0YX1cbiAgICAgICAgICBvbkNoYW5nZT17ZGF0YSA9PiBvbkNoYW5nZSh7IC4uLnF1ZXN0aW9uLCBkYXRhIH0pfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25maWd1cmF0aW9uID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wgY29udHJvbC1lbXB0eVwiPlxuICAgICAgICAgIE5vIGNvbmZpZ3VyYXRpb24gYXZhaWxhYmxlIGZvciB0aGlzIHR5cGUgb2YgcXVlc3Rpb25cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UXVlc3Rpb25EZXRhaWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHF1ZXN0aW9uIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJxdWVzdGlvbi1kZXRhaWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICA8VGFnIHNpemU9XCJsYXJnZVwiPntxdWVzdGlvbi50YWd9PC9UYWc+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25zXCI+XG4gICAgICAgICAgICA8QnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgcmVuZGVyVGl0bGU9eygpPT57XG4gICAgICAgICAgICAgICAgICByZXR1cm4gPEljb25CdXR0b24gYXBwZWFyYW5jZT1cInByaW1hcnlcIiBpY29uPXs8SWNvbiBpY29uPVwicGx1c1wiIC8+fSAvPlxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24uSXRlbSBvblNlbGVjdD17KCkgPT4gb25BZGQoeyBhZnRlcjogcXVlc3Rpb24gfSl9PkFkZCBxdWVzdGlvbiBhZnRlcjwvRHJvcGRvd24uSXRlbT5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd24uSXRlbSBvblNlbGVjdD17KCkgPT4gb25BZGQoeyBiZWZvcmU6IHF1ZXN0aW9uIH0pfT5BZGQgcXVlc3Rpb24gYmVmb3JlPC9Ecm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgIDxEcm9wZG93bi5JdGVtIG9uU2VsZWN0PXsoKSA9PiBvbkFkZCh7IG5lc3RlZDogcXVlc3Rpb24gfSl9PkFkZCBuZXN0ZWQgcXVlc3Rpb248L0Ryb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGF3YWl0IGNvbmZpcm0oXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlIHRoZSBxdWVzdGlvbiA8VGFnPntxdWVzdGlvbi50YWd9PC9UYWc+XG4gICAgICAgICAgICAgICAgICAgICAgeyFfLmlzRW1wdHkocXVlc3Rpb24udGl0bGUpID8gPGVtPiBcIntxdWVzdGlvbi50aXRsZX1cIjwvZW0+IDogbnVsbH0gP1xuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4sXG4gICAgICAgICAgICAgICAgICAgIHsgb2tMYWJlbDogJ1llcywgcmVtb3ZlJyB9XG4gICAgICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVtb3ZlKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGljb249ezxJY29uIGljb249XCJ0cmFzaDJcIiAvPn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInJzLWlucHV0XCJcbiAgICAgICAgICAgIHJvd3M9ezN9XG4gICAgICAgICAgICB2YWx1ZT17cXVlc3Rpb24udGl0bGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBvbkNoYW5nZSh7IC4uLnF1ZXN0aW9uLCB0aXRsZTogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgIDxCdXR0b25Hcm91cD5cbiAgICAgICAgICAgIHtDT05UUk9MUy5tYXAoY29udHJvbCA9PiAoXG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBrZXk9e2NvbnRyb2wudHlwZX1cbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPXtxdWVzdGlvbi50eXBlID09PSBjb250cm9sLnR5cGUgPyAncHJpbWFyeScgOiAnZ2hvc3QnfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlKHsgLi4ucXVlc3Rpb24sIHR5cGU6IGNvbnRyb2wudHlwZSwgZGF0YTogY29udHJvbC5kZWZhdWx0IH0pfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2NvbnRyb2wubGFiZWx9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9CdXR0b25Hcm91cD5cbiAgICAgICAgPC9CdXR0b25Ub29sYmFyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpZ3VyYXRpb25cIj5cbiAgICAgICAgICB7Y29uZmlndXJhdGlvbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L1F1ZXN0aW9uRGV0YWlsQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblF1ZXN0aW9uRGV0YWlsLnByb3BUeXBlcyA9IHtcbiAgcXVlc3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBsZXZlbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0YWc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydtdWx0aXBsZScsICdzdHJpbmcnLCAnbnVtYmVyJywgJ2ltYWdlJ10pLmlzUmVxdWlyZWQsXG4gICAgZGF0YTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBhbnN3ZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAganVtcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIH0pKVxuICAgIF0pXG4gIH0pLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQWRkOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25SZW1vdmU6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5leHBvcnQgZGVmYXVsdCBRdWVzdGlvbkRldGFpbDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBzb3J0YWJsZUNvbnRhaW5lciB9IGZyb20gJ3JlYWN0LXNvcnRhYmxlLWhvYyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgJy4vc3R5bGUuc2Nzcyc7XG5pbXBvcnQgUXVlc3Rpb24gZnJvbSAnLi92aWV3cy9xdWVzdGlvbic7XG5pbXBvcnQgUXVlc3Rpb25EZXRhaWwgZnJvbSAnLi92aWV3cy9xdWVzdGlvbi1kZXRhaWwnO1xuaW1wb3J0IFN1cnZleUVkaXRvckNvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCB7IHJlbW92ZSwgcmVwbGFjZSwgYWRkLCBnZXRMZXZlbHMsIHJldGFnLCBzd2FwIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuY29uc3QgU29ydGFibGVDb250YWluZXIgPSBzb3J0YWJsZUNvbnRhaW5lcigoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInF1ZXN0aW9uc1wiPntjaGlsZHJlbn08L2Rpdj47XG59KTtcblxuY29uc3QgU3VydmV5RWRpdG9yID0gKHsgdmFsdWU6IHF1ZXN0aW9ucyA9IFt7fV0sIG9uQ2hhbmdlID0gKCkgPT4ge30gfSkgPT4ge1xuICBjb25zdCBbYWN0aXZlLCBzZXRBY3RpdmVdID0gdXNlU3RhdGUoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY3RpdmUgPT0gbnVsbCkge1xuICAgICAgc2V0QWN0aXZlKCFfLmlzRW1wdHkocXVlc3Rpb25zKSA/IHF1ZXN0aW9uc1swXS5pZCA6IG51bGwpXG4gICAgfVxuICB9LCBbcXVlc3Rpb25zXSlcblxuICBjb25zdCBvblNvcnRFbmQgPSB1c2VDYWxsYmFjaygoeyBvbGRJbmRleCwgbmV3SW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IG5ld1F1ZXN0aW9ucyA9IHN3YXAocXVlc3Rpb25zLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xuICAgIG9uQ2hhbmdlKHJldGFnKG5ld1F1ZXN0aW9ucykpO1xuICB9KTtcblxuICBjb25zdCBhY3RpdmVRdWVzdGlvbiA9IHF1ZXN0aW9ucy5maW5kKHF1ZXN0aW9uID0+IHF1ZXN0aW9uLmlkID09PSBhY3RpdmUpO1xuICAvLyBnZXQgbGV2ZWxzLCBpbiBvcmRlciB0byBrbm93IGZvciBldmVyeSBwYXJlbnQgd2hhdCdzIHRoZSBpbmRlbnQgbGV2ZWxcbiAgY29uc3QgbGV2ZWxzID0gZ2V0TGV2ZWxzKHF1ZXN0aW9ucyk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3VydmV5RWRpdG9yQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBxdWVzdGlvbnMgfX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVpLXN1cnZleS1lZGl0b3JcIj5cbiAgICAgICAgPFNvcnRhYmxlQ29udGFpbmVyIG9uU29ydEVuZD17b25Tb3J0RW5kfSBoZWxwZXJDbGFzcz1cInNvcnRpbmdcIiB1c2VEcmFnSGFuZGxlPlxuICAgICAgICAgIHtxdWVzdGlvbnMubWFwKChxdWVzdGlvbiwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxRdWVzdGlvblxuICAgICAgICAgICAgICBrZXk9e3F1ZXN0aW9uLmlkfVxuICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgIHF1ZXN0aW9uPXtxdWVzdGlvbn1cbiAgICAgICAgICAgICAgbGV2ZWw9e3F1ZXN0aW9uLnBhcmVudCAhPSBudWxsID8gbGV2ZWxzW3F1ZXN0aW9uLnBhcmVudF0gOiBudWxsfVxuICAgICAgICAgICAgICBhY3RpdmU9e2FjdGl2ZSA9PT0gcXVlc3Rpb24uaWR9XG4gICAgICAgICAgICAgIG9uU2VsZWN0PXtxdWVzdGlvbiA9PiBzZXRBY3RpdmUocXVlc3Rpb24uaWQpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9Tb3J0YWJsZUNvbnRhaW5lcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxdWVzdGlvbi1kZXRhaWxcIj5cbiAgICAgICAgICB7YWN0aXZlUXVlc3Rpb24gIT0gbnVsbCAmJiAoXG4gICAgICAgICAgICA8UXVlc3Rpb25EZXRhaWxcbiAgICAgICAgICAgICAga2V5PXthY3RpdmVRdWVzdGlvbi5pZH1cbiAgICAgICAgICAgICAgcXVlc3Rpb249e2FjdGl2ZVF1ZXN0aW9ufVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cXVlc3Rpb24gPT4gb25DaGFuZ2UocmVwbGFjZShxdWVzdGlvbnMsIGFjdGl2ZSwgcXVlc3Rpb24pKX1cbiAgICAgICAgICAgICAgb25SZW1vdmU9e3F1ZXN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgb25DaGFuZ2UocmV0YWcocmVtb3ZlKHF1ZXN0aW9ucywgcXVlc3Rpb24pKSlcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgb25BZGQ9e3BhcmFtcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBxdWVzdGlvbnM6IG5ld1F1ZXN0aW9ucywgcXVlc3Rpb24gfSA9IGFkZChxdWVzdGlvbnMsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlKHF1ZXN0aW9uLmlkKTtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZShuZXdRdWVzdGlvbnMpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvU3VydmV5RWRpdG9yQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5TdXJ2ZXlFZGl0b3IucHJvcFR5cGVzID0ge1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgdmFsdWU6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBsZXZlbDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB0YWc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydtdWx0aXBsZScsICdzdHJpbmcnLCAnbnVtYmVyJywgJ2ltYWdlJ10pLmlzUmVxdWlyZWQsXG4gICAgZGF0YTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBhbnN3ZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAganVtcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIH0pKVxuICAgIF0pXG4gIH0pKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3VydmV5RWRpdG9yOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgRm9ybSwgRm9ybUNvbnRyb2wsIEJ1dHRvblRvb2xiYXIsIEZvcm1Hcm91cCwgQ29udHJvbExhYmVsLCBIZWxwQmxvY2ssIE5hdiwgSW5wdXQgfSBmcm9tICdyc3VpdGUnO1xuXG5cbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2RpY3Rpb25hcnknO1xuaW1wb3J0IENvbnRlbnRBdXRvY29tcGxldGUgZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29udGVudC1hdXRvY29tcGxldGUnO1xuaW1wb3J0IFN1cnZleUVkaXRvciBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zdXJ2ZXktZWRpdG9yJztcblxuXG5cblxuLy8gVE9ETyBjaGVjayBtb2RlbHMgYW5kIHNjaGVtYSwgc3RhcnQgPCBlbmQsIG5vIHJlcGV0aXRpb25zIGluIHJhbmdlXG5cblxuY29uc3QgZGljdGlvbmFyeVNjaGVtYSA9IFtcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkuaW50cm8nLFxuICAgIGRlc2NyaXB0aW9uOiAnVGV4dCBzaG93biBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdXJ2ZXkgaWYgbm8gY29udGVudCBpcyBwcm92aWRlZCdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkuZW5kMScsXG4gICAgZGVzY3JpcHRpb246ICdFbmQgb2YgdGhlIHN1cnZleSAodmVyc2lvbiAxKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkuZW5kMicsXG4gICAgZGVzY3JpcHRpb246ICdFbmQgb2YgdGhlIHN1cnZleSAodmVyc2lvbiAyKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkuZW5kMycsXG4gICAgZGVzY3JpcHRpb246ICdFbmQgb2YgdGhlIHN1cnZleSAodmVyc2lvbiAzKSdcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkud3JvbmdBbnN3ZXInLFxuICAgIGRlc2NyaXB0aW9uOiBgV2hlbiB0aGUgdXNlciBpbnB1dCBhIHdyb25nIGFuc3dlciwgZm9yIGV4YW1wbGUgYW4gYW5zd2VyIHdoaWNoIGlzIG5vdCBsaXN0ZWQgaW4gdGhlIG11bHRpcGxlIGNob2ljZSxcbiAgICAgIGEgc3RyaW5nIHdoZXJlIGlzIGV4cGVjdGVkIGEgbnVtYmVyLCBldGMgIGBcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdzdXJ2ZXkuZXJyb3InLFxuICAgIGRlc2NyaXB0aW9uOiAnU2hvd24gd2hlbiB1bnJlY292ZXJhYmxlIGVycm9yIGhhcHBlbmVkIGluIHRoZSBzdXJ2ZXkgZmxvdydcbiAgfVxuXTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0ICh7XG4gIHZhbHVlLFxuICBvblN1Ym1pdCA9ICgpID0+IHsgfSxcbiAgZGlzYWJsZWQgPSBmYWxzZVxufSkgPT4ge1xuICBjb25zdCBbZm9ybVZhbHVlLCBzZXRGb3JtVmFsdWVdID0gdXNlU3RhdGUodmFsdWUpO1xuICBjb25zdCBbZm9ybUVycm9yLCBzZXRGb3JtRXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFt0YWIsIHNldFRhYl0gPSB1c2VTdGF0ZSgncXVlc3Rpb25zJyk7XG4gIGNvbnN0IGZvcm0gPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPE5hdiBhcHBlYXJhbmNlPVwidGFic1wiIGFjdGl2ZUtleT17dGFifSBvblNlbGVjdD17c2V0VGFifSBzdHlsZT17eyBtYXJnaW5Cb3R0b206ICcyNXB4JyB9fT5cbiAgICAgICAgPE5hdi5JdGVtIGV2ZW50S2V5PVwic3VydmV5c1wiPlN1cnZleTwvTmF2Lkl0ZW0+XG4gICAgICAgIDxOYXYuSXRlbSBldmVudEtleT1cInF1ZXN0aW9uc1wiPlF1ZXN0aW9uczwvTmF2Lkl0ZW0+XG4gICAgICAgIDxOYXYuSXRlbSBldmVudEtleT1cInRyYW5zbGF0aW9uc1wiPlRyYW5zbGF0aW9uczwvTmF2Lkl0ZW0+XG4gICAgICA8L05hdj5cbiAgICAgIDxGb3JtXG4gICAgICAgIGRpc2FibGVkPXt0cnVlfVxuICAgICAgICBmb3JtVmFsdWU9e2Zvcm1WYWx1ZX1cbiAgICAgICAgZm9ybUVycm9yPXtmb3JtRXJyb3J9XG4gICAgICAgIHJlZj17Zm9ybX1cbiAgICAgICAgY2hlY2tUcmlnZ2VyPVwibm9uZVwiXG4gICAgICAgIGxheW91dD1cInZlcnRpY2FsXCJcbiAgICAgICAgZmx1aWRcbiAgICAgICAgb25DaGFuZ2U9e2Zvcm1WYWx1ZSA9PiB7XG4gICAgICAgICAgc2V0Rm9ybVZhbHVlKGZvcm1WYWx1ZSk7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKG51bGwpO1xuICAgICAgICB9fVxuICAgICAgICBvbkNoZWNrPXtlcnJvcnMgPT4ge1xuICAgICAgICAgIHNldEZvcm1FcnJvcihlcnJvcnMpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7dGFiID09PSAndHJhbnNsYXRpb25zJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cInRyYW5zbGF0aW9uc1wiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0RpY3Rpb25hcnl9XG4gICAgICAgICAgICAgICAgc2NoZW1hPXtkaWN0aW9uYXJ5U2NoZW1hfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIHt0YWIgPT09ICdzdXJ2ZXlzJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPENvbnRyb2xMYWJlbD5OYW1lPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+SW50cm9kdWN0aW9uIE1lc3NhZ2VcbiAgICAgICAgICAgICAgICA8SGVscEJsb2NrIHRvb2x0aXA+U2VsZWN0IHRoZSBjb250ZW50IHRvIHNob3cgd2hlbiB0aGUgdXNlciBzdGFydHMgdGhlIHN1cnZleTwvSGVscEJsb2NrPlxuICAgICAgICAgICAgICA8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cImludHJvZHVjdGlvblwiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0NvbnRlbnRBdXRvY29tcGxldGV9XG4gICAgICAgICAgICAgICAgdXNlU2x1Zz17dHJ1ZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApfVxuICAgICAgICB7dGFiID09PSAncXVlc3Rpb25zJyAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvcm1Hcm91cD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cInF1ZXN0aW9uc1wiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e1N1cnZleUVkaXRvcn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cblxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIDxGb3JtR3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNDBweCcgfX0+XG4gICAgICAgICAgPEJ1dHRvblRvb2xiYXI+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JtLmN1cnJlbnQuY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdChmb3JtVmFsdWUpO1xuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgU2F2ZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKCdSZXNldCBjb25maWd1cmF0aW9uPycpKSB7XG4gICAgICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYWcgfSBmcm9tICdyc3VpdGUnO1xuXG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcbmltcG9ydCB3aXRoQ29uZmlndXJhdGlvblBhZ2UgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvY29uZmlndXJhdGlvbi1wYWdlJztcbmltcG9ydCB7IFVzZXJSZWNvcmRzIH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvdXNlci1yZWNvcmRzL2luZGV4LmpzJ1xuXG5pbXBvcnQgU3VydmV5Vmlld2VyIGZyb20gJy4vdmlld3Mvc3VydmV5LXZpZXdlcic7XG5pbXBvcnQgQ29uZmlndXJhdGlvbkZvcm0gZnJvbSAnLi92aWV3cy9jb25maWd1cmF0aW9uLWZvcm0nO1xuaW1wb3J0IEdvVG9TdXJ2ZXlCdXR0b24gZnJvbSAnLi92aWV3cy9nby10by1zdXJ2ZXktYnV0dG9uJztcblxuY29uc3QgTGVnZW5kID0gKCkgPT4gKFxuICA8ZGl2PlxuICAgIFN1cnZ1ZXMgVEJEXG4gIDwvZGl2PlxuKTtcblxucGx1Zygnc2lkZWJhcicsIG51bGwsIHtcbiAgaWQ6ICdzdXJ2ZXlzJyxcbiAgbGFiZWw6ICdTdXJ2ZXlzJyxcbiAgaWNvbjogJ2xvZ28tc3VydmV5JyxcbiAgcGVybWlzc2lvbjogJ3N1cnZleXMudmlldycsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBpZDogJ2Fuc3dlci1zdXJ2ZXlzJyxcbiAgICAgIGxhYmVsOiAnU3VydmV5cycsXG4gICAgICB1cmw6ICcvc3VydmV5cycsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2NvbmZpZ3VyYXRpb24tc3VydmV5JyxcbiAgICAgIGxhYmVsOiAnQ29uZmlndXJlIHN1cnZleScsXG4gICAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1zdXJ2ZXlzJyxcbiAgICB9XG4gIF1cbn0pO1xuLy8gcmVnaXN0ZXIgYSBwYWdlIHRvIGNvbmZpZ3VyZSB0aGUgc3VydmV5XG5wbHVnKFxuICAncGFnZXMnLFxuICB3aXRoQ29uZmlndXJhdGlvblBhZ2UoXG4gICAgJ3N1cnZleScsXG4gICAgQ29uZmlndXJhdGlvbkZvcm0sXG4gICAgeyBMZWdlbmQsIHRpdGxlOiAnU3VydmV5cycgfVxuICApLFxuICB7XG4gICAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gICAgdXJsOiAnL2NvbmZpZ3VyYXRpb24tc3VydmV5cycsXG4gICAgdGl0bGU6ICdTdXJ2ZXknLFxuICAgIGlkOiAnY29uZmlndXJhdGlvbi1zdXJ2ZXlzJ1xuICB9XG4pO1xuLy8gcmVnaXN0ZXIgYSBwYWdlIGZvciB1c2VyIHJlY29yZHMgb2YgdHlwZSBzdXJ2ZXlcbnBsdWcoJ3BhZ2VzJywgVXNlclJlY29yZHMsIHtcbiAgdXJsOiAnL3N1cnZleXMnLFxuICB0aXRsZTogJ1N1cnZleXMnLFxuICBpZDogJ3N1cnZleXMnLFxuICB0eXBlOiAnc3VydmV5JyxcbiAgcGVybWlzc2lvbjogJ3N1cnZleXMudmlldycsXG4gIGJyZWFkY3J1bWJzOiBbJ1N1cnZleXMnXSxcbiAgbGFiZWxzOiB7XG4gICAgLy8gc2F2ZUNvbnRlbnQ6ICdTYXZlIGFydGljbGUnXG4gIH1cbn0pO1xuLy8gcmVnaXN0ZXIgcGVybWlzc2lvbnNcbnBsdWcoXG4gICdwZXJtaXNzaW9ucycsXG4gIG51bGwsXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnc3VydmV5cy52aWV3JyxcbiAgICBuYW1lOiAnVmlldyBzdXJ2ZXlzJyxcbiAgICBkZXNjcmlwdGlvbjogYFZpZXcgc3VydmV5cyBhbnN3ZXJlZCBieSBjaGF0Ym90IHVzZXJzYCxcbiAgICBncm91cDogJ1N1cnZleXMnXG4gIH1cbik7XG4vLyByZWdpc3RlciB1c2VyIHJlY29yZCB0eXBlXG5wbHVnKFxuICAndXNlci1yZWNvcmQtdHlwZXMnLFxuICBudWxsLFxuICB7XG4gICAgdHlwZTogJ3N1cnZleScsXG4gICAgbmFtZTogJ1N1cnZleScsXG4gICAgbGlzdDogYFN1cnZleXNgLFxuICAgIGRlc2NyaXB0aW9uOiAnQW5zd2VyIHRvIHN1cnZleXMnLFxuICAgIGZvcm06IFN1cnZleVZpZXdlcixcbiAgICBzdGF0dXM6IFtcbiAgICAgIHsgdmFsdWU6ICduZXcnLCBsYWJlbDogJ05ldycgfSxcbiAgICAgIHsgdmFsdWU6ICd2aWV3ZWQnLCBsYWJlbDogJ1ZpZXdlZCcgfSxcbiAgICBdXG4gIH1cbik7XG4vLyByZWdpc3RlciBidXR0b24gaW4gdGhlIHVzZXIgbW9kYWwgdG8gcmVkaXJlY3QgdG8gc3VydmV5IGxpc3RzXG5wbHVnKFxuICAndXNlci1idXR0b24nLFxuICBHb1RvU3VydmV5QnV0dG9uXG4pO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JzdWl0ZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IEdvVG9TdXJ2ZXlCdXR0b24gPSAoeyB1c2VyIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8TGluayB0bz17YC9zdXJ2ZXlzP3VzZXJJZD0ke3VzZXIudXNlcklkfWB9PlxuICAgICAgPEJ1dHRvbiBhcHBlYXJhbmNlPVwiZ2hvc3RcIj5WaWV3IFN1cnZleXM8L0J1dHRvbj5cbiAgICA8L0xpbms+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHb1RvU3VydmV5QnV0dG9uOyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2VjcmV0LXZpZXdlciAuZGlzcGxheS1zZWNyZXR7cGFkZGluZzo0cHggMTBweDtmb250LWZhbWlseTptb25vc3BhY2U7YmFja2dyb3VuZC1jb2xvcjojZWVlZWVlO2JvcmRlcjoxcHggc29saWQgI2JiYmJiYn0uc2VjcmV0LXZpZXdlciAuc2VjcmV0LXJldmVhbC1hdHtmb250LXNpemU6NDBweDtmb250LXdlaWdodDpib2xkZXJ9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIud2lkZ2V0LXNlbmQtbWVzc2FnZSAucnMtZm9ybS1ncm91cHtmbGV4OjEgMDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtd3JhcDpub3dyYXA7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24tY29udGVudDpzdHJldGNoO2FsaWduLWl0ZW1zOnN0cmV0Y2h9LndpZGdldC1zZW5kLW1lc3NhZ2UgLnJzLWZvcm0tZ3JvdXAgLnJzLWZvcm0tY29udHJvbC13cmFwcGVye2ZsZXg6MSAwfS53aWRnZXQtc2VuZC1tZXNzYWdlIC5rZXktaGludHtjb2xvcjojOTk5OTk5O2Rpc3BsYXk6aW5saW5lLWJsb2NrfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNpbXVsYXRvci10cmFuc3BvcnQtbWVudSAucnMtcGlja2VyLXN1YnRsZSAucnMtYnRuOmZvY3VzLC5zaW11bGF0b3ItdHJhbnNwb3J0LW1lbnUgLnJzLXBpY2tlci1zdWJ0bGUgLnJzLXBpY2tlci10b2dnbGU6Zm9jdXMsLnNpbXVsYXRvci10cmFuc3BvcnQtbWVudSAucnMtcGlja2VyLXN1YnRsZSAucnMtYnRuLnJzLWJ0bi1mb2N1cywuc2ltdWxhdG9yLXRyYW5zcG9ydC1tZW51IC5ycy1waWNrZXItc3VidGxlIC5ycy1waWNrZXItdG9nZ2xlLnJzLWJ0bi1mb2N1cywuc2ltdWxhdG9yLXRyYW5zcG9ydC1tZW51IC5ycy1waWNrZXItc3VidGxlIC5ycy1idG46aG92ZXIsLnNpbXVsYXRvci10cmFuc3BvcnQtbWVudSAucnMtcGlja2VyLXN1YnRsZSAucnMtcGlja2VyLXRvZ2dsZTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmZ9LnNpbXVsYXRvci10cmFuc3BvcnQtbWVudSAucnMtcGlja2VyLXRvZ2dsZXttYXJnaW4tdG9wOi01cHh9LmNoYXQtc2ltdWxhdG9yIC5tZXRhe2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1yaWdodDo1cHh9LmNoYXQtc2ltdWxhdG9yIC5tZXRhIC51c2Vye2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1yaWdodDo1cHg7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bm9ybWFsfS5jaGF0LXNpbXVsYXRvciAudWktZ3JpZC1wYW5lbC1jb250ZW50e21hcmdpbjotNXB4IC0xMHB4IC0xMHB4IC0xMHB4fS5jaGF0LXNpbXVsYXRvciAudWktY2hhdC13aW5kb3d7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czo0cHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6NHB4fS5waWNrZXItaXRlbS10cmFuc3BvcnQgZW17Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOiM3Nzc3Nzc7Zm9udC1zaXplOjEycHh9LnBpY2tlci1pdGVtLXRyYW5zcG9ydCBie2NvbG9yOiMzMzMzMzM7Zm9udC1zaXplOjEzcHh9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc3VydmV5LXZpZXdlcntwYWRkaW5nOjIwcHh9LnN1cnZleS12aWV3ZXIgLnF1ZXN0aW9ue21hcmdpbi10b3A6MTVweH0uc3VydmV5LXZpZXdlciAucXVlc3Rpb246Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDowcHh9LnN1cnZleS12aWV3ZXIgLmFuc3dlci5tdWx0aXBsZSAucGxhY2Vob2xkZXJ7Zm9udC13ZWlnaHQ6Ym9sZH0uc3VydmV5LXZpZXdlciAuYW5zd2VyLm11bHRpcGxlIC5jaG9pY2Uuc2VsZWN0ZWR7Zm9udC13ZWlnaHQ6Ym9sZDtjb2xvcjojRkYzQzJCfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnVpLWJhZGdlLWljb24tdG9vbHRpcHtkaXNwbGF5OmlubGluZS1ibG9jaztiYWNrZ3JvdW5kLWNvbG9yOiNDOUM5Qzk7cGFkZGluZzowcHggNXB4O2JvcmRlci1yYWRpdXM6MnB4O2xpbmUtaGVpZ2h0OjE3cHg7bWFyZ2luLXRvcDozcHg7bWFyZ2luLXJpZ2h0OjNweDtoZWlnaHQ6MThweH0udWktYmFkZ2UtaWNvbi10b29sdGlwIGl7Zm9udC1zaXplOjExcHh9LnVpLWJhZGdlLWljb24tdG9vbHRpcCAudGV4dHtkaXNwbGF5OmlubGluZTttYXJnaW4tbGVmdDozcHg7Zm9udC1zaXplOjEycHh9LnVpLWJhZGdlLWljb24tdG9vbHRpcC5vcmFuZ2V7YmFja2dyb3VuZC1jb2xvcjojRkZCMDQ5O2NvbG9yOiMwMDAwMDB9LnVpLWJhZGdlLWljb24tdG9vbHRpcC5yZWR7YmFja2dyb3VuZC1jb2xvcjojREIyMzIzO2NvbG9yOiNmZmZmZmZ9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudWktc3VydmV5LWVkaXRvcnttYXJnaW4tdG9wOjEwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6bm93cmFwO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWNvbnRlbnQ6c3RyZXRjaDthbGlnbi1pdGVtczpzdHJldGNofS51aS1zdXJ2ZXktZWRpdG9yIC5xdWVzdGlvbnN7b3JkZXI6MDtmbGV4OjAgMCAyNTBweDthbGlnbi1zZWxmOmF1dG87Ym9yZGVyOjFweCBzb2xpZCAjZGRkZGRkfS5ycy1saXN0LWl0ZW17cGFkZGluZy10b3A6MHB4O3BhZGRpbmctYm90dG9tOjBweH0udWktc3VydmV5LXF1ZXN0aW9ue2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjgwcHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2VlZWVlZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6bm93cmFwO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWNvbnRlbnQ6c3RyZXRjaDthbGlnbi1pdGVtczpjZW50ZXJ9LnVpLXN1cnZleS1xdWVzdGlvbiAuaWNvbnN7ZGlzcGxheTppbmxpbmUtYmxvY2s7ZmxvYXQ6cmlnaHR9LnVpLXN1cnZleS1xdWVzdGlvbiAuZ3JpcHB5e2NvbnRlbnQ6Jy4uLi4nO3dpZHRoOjE0cHg7b3ZlcmZsb3c6aGlkZGVuO2hlaWdodDo4MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO292ZXJmbG93OmhpZGRlbjtsaW5lLWhlaWdodDo1cHg7cGFkZGluZzozcHggNHB4O2N1cnNvcjptb3ZlO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTttYXJnaW4tdG9wOi0uN2VtO21hcmdpbi1yaWdodDouM2VtO2ZvbnQtc2l6ZToxMnB4O2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7bGV0dGVyLXNwYWNpbmc6MnB4O2NvbG9yOiNjY2NjY2M7dGV4dC1zaGFkb3c6MXB4IDAgMXB4ICNjY2NjY2N9LnVpLXN1cnZleS1xdWVzdGlvbiAuZ3JpcHB5OjphZnRlcntjb250ZW50OicuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLiAuLid9LnVpLXN1cnZleS1xdWVzdGlvbiAuZ3JpcHB5e2ZsZXg6MCAwIDE0cHg7aGVpZ2h0Ojc1cHh9LnVpLXN1cnZleS1xdWVzdGlvbiAuaW5kZW50e2ZsZXg6MCAwIDRweDtoZWlnaHQ6ODBweDtiYWNrZ3JvdW5kLWNvbG9yOiNlZmVmZWZ9LnVpLXN1cnZleS1xdWVzdGlvbiAuY29udGVudHtmbGV4OjEgMDtoZWlnaHQ6ODBweH0udWktc3VydmV5LXF1ZXN0aW9uIC50aXRsZXtmb250LXNpemU6MTNweDtjb2xvcjojNDQ0NDQ0O2Rpc3BsYXk6LXdlYmtpdC1ib3g7LXdlYmtpdC1saW5lLWNsYW1wOjM7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsO292ZXJmbG93OmhpZGRlbjtsaW5lLWhlaWdodDoxN3B4fS51aS1zdXJ2ZXktcXVlc3Rpb24gLmRlc2NyaXB0aW9ue2NvbG9yOiM5OTk5OTk7Zm9udC1zaXplOjEycHh9LnVpLXN1cnZleS1xdWVzdGlvbjpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNlZWVlZWV9LnVpLXN1cnZleS1xdWVzdGlvbiAuc2VsZWN0aW9uLWJhcnt3aWR0aDo0cHg7aGVpZ2h0OjgwcHh9LnVpLXN1cnZleS1xdWVzdGlvbi5hY3RpdmUgLnNlbGVjdGlvbi1iYXJ7YmFja2dyb3VuZC1jb2xvcjpvcmFuZ2V9LnVpLXN1cnZleS1xdWVzdGlvbi5zb3J0aW5ney13ZWJraXQtYm94LXNoYWRvdzowcHggMHB4IDVweCAwcHggcmdiYSgwLDAsMCwwLjc1KTstbW96LWJveC1zaGFkb3c6MHB4IDBweCA1cHggMHB4IHJnYmEoMCwwLDAsMC43NSk7Ym94LXNoYWRvdzowcHggMHB4IDVweCAwcHggcmdiYSgwLDAsMCwwLjc1KX1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi51aS1zdXJ2ZXktZWRpdG9yIC5xdWVzdGlvbi1kZXRhaWx7b3JkZXI6MDtmbGV4OjEgMCBhdXRvO2FsaWduLXNlbGY6YXV0bztwYWRkaW5nLWxlZnQ6MTBweH0udWktc3VydmV5LWVkaXRvciAucXVlc3Rpb24tZGV0YWlsIC50aXRsZXttYXJnaW4tdG9wOjE1cHh9LnVpLXN1cnZleS1lZGl0b3IgLnF1ZXN0aW9uLWRldGFpbCAucnMtYnRuLXRvb2xiYXJ7bWFyZ2luLXRvcDoxNXB4fS51aS1zdXJ2ZXktZWRpdG9yIC5xdWVzdGlvbi1kZXRhaWwgLmJ1dHRvbnN7ZmxvYXQ6cmlnaHR9LnVpLXN1cnZleS1lZGl0b3IgLnF1ZXN0aW9uLWRldGFpbCAuYnV0dG9ucyAucnMtYnRuLXRvb2xiYXJ7bWFyZ2luLXRvcDowcHh9LnVpLXN1cnZleS1lZGl0b3IgLnF1ZXN0aW9uLWRldGFpbCAuY29uZmlndXJhdGlvbnttYXJnaW4tdG9wOjI1cHh9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIucXVlc3Rpb24tdGFne2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQtY29sb3I6IzMzMzMzMztjb2xvcjp3aGl0ZTtmb250LXNpemU6MTJweDtib3JkZXItcmFkaXVzOjJweDtwYWRkaW5nOjFweCAzcHg7bGluZS1oZWlnaHQ6MTJweH0ucXVlc3Rpb24tdGFnLmxhcmdle2ZvbnQtd2VpZ2h0OmJvbGQ7Ym9yZGVyLXJhZGl1czozcHg7aGVpZ2h0OjM1cHg7bGluZS1oZWlnaHQ6MzVweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7cGFkZGluZzowcHggNnB4O2ZvbnQtc2l6ZToyMnB4fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnVpLXN1cnZleS1lZGl0b3ItbXVsdGlwbGUtYW5zd2Vye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOm5vd3JhcDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDthbGlnbi1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LnVpLXN1cnZleS1lZGl0b3ItbXVsdGlwbGUtYW5zd2VyIC5wbGFjZWhvbGRlcntmbGV4OjAgMCAzNnB4O2JvcmRlci1yYWRpdXM6NnB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQtY29sb3I6I0Y0RkRDRTtib3JkZXI6MXB4IHNvbGlkICNCQ0U3NDc7d2lkdGg6MzZweDtoZWlnaHQ6MzZweDt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7bGluZS1oZWlnaHQ6MzZweDtmb250LXdlaWdodDpib2xkO21hcmdpbi1yaWdodDoxMHB4fS51aS1zdXJ2ZXktZWRpdG9yLW11bHRpcGxlLWFuc3dlciAuYW5zd2Vye2ZsZXg6MSAwfS51aS1zdXJ2ZXktZWRpdG9yLW11bHRpcGxlLWFuc3dlciAuY29udHJvbHN7ZmxleDowIDAgYXV0bzt0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLWxlZnQ6NXB4fVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NlY3JldC12aWV3ZXIuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi93aWRnZXQtc2VuZC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NpbXVsYXRvci5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N1cnZleS12aWV3ZXIuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcXVlc3Rpb24tZGV0YWlsLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdGFnLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbImRpY3Rpb25hcnlTY2hlbWEiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJOb2RlUmVkTm9kZSIsIlNsdWdIZWxwIiwiVHlwZUNvbW1hbmQiLCJIZWxwRWxlbWVudHMiLCJwbHVnIiwiZm9ybVZhbHVlIiwiZm9ybUVycm9yIiwib25DaGFuZ2UiLCJGb3JtIiwiZmx1aWQiLCJhdXRvQ29tcGxldGUiLCJGb3JtR3JvdXAiLCJDb250cm9sTGFiZWwiLCJUb2dnbGUiLCJjaGVja2VkIiwiYXV0aG9yaXplZCIsInN1c3BlbmRlZCIsIkhlbHBCbG9jayIsImlkIiwibGFiZWwiLCJwZXJtaXNzaW9uIiwiaWNvbiIsIm9wdGlvbnMiLCJ1cmwiLCJ3aXRoQ29uZmlndXJhdGlvblBhZ2UiLCJ2YWx1ZSIsIm9uU3VibWl0IiwiZGlzYWJsZWQiLCJzZXRGb3JtVmFsdWUiLCJ1c2VTdGF0ZSIsInNldEZvcm1FcnJvciIsInRhYiIsInNldFRhYiIsImZvcm0iLCJ1c2VSZWYiLCJOYXYiLCJhcHBlYXJhbmNlIiwiYWN0aXZlS2V5Iiwib25TZWxlY3QiLCJzdHlsZSIsIm1hcmdpbkJvdHRvbSIsImV2ZW50S2V5IiwicmVmIiwiY2hlY2tUcmlnZ2VyIiwibGF5b3V0Iiwib25DaGVjayIsImVycm9ycyIsIkZyYWdtZW50IiwiRm9ybUNvbnRyb2wiLCJhY2NlcHRlciIsIkRpY3Rpb25hcnkiLCJzY2hlbWEiLCJDb21wb25lbnQiLCJwcm9wcyIsIm1hcmdpblRvcCIsIkJ1dHRvblRvb2xiYXIiLCJCdXR0b24iLCJvbkNsaWNrIiwiY3VycmVudCIsImNoZWNrIiwiY29uZmlybSIsIkxlZ2VuZCIsInRpdGxlIiwiZ3JvdXAiLCJTdHJpbmdUeXBlIiwiQXJyYXlUeXBlIiwiT2JqZWN0VHlwZSIsIkRhdGVUeXBlIiwiU2NoZW1hIiwiY2Fyb3VzZWwiLCJvcGVuaW5ncyIsIm9mIiwic2hhcGUiLCJzdGFydCIsImlzUmVxdWlyZWQiLCJlbmQiLCJyYW5nZSIsImFkZFJ1bGUiLCJfIiwibGVuZ3RoIiwiQ1VTVE9NX0ZJRUxEUyIsImtleSIsInR5cGUiLCJkZWZhdWx0VmFsdWUiLCJjb2xvciIsIkZvcm1PcGVuaW5nIiwidXNlU2x1ZyIsImNhbkNyZWF0ZSIsInNsdWciLCJjdXN0b21GaWVsZHNTY2hlbWEiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJtb2RlbCIsImNhcm91c2VNb2RlbCIsInRvb2x0aXAiLCJDb2xsZWN0aW9uRWRpdG9yIiwiRm9ybUNhcmQiLCJsYWJlbEFkZCIsImNvbW1hbmRzIiwiY29tbWFuZCIsInN0YXJ0c1dpdGgiLCJtYXAiLCJpdGVtIiwiRm9ybUNvbW1hbmQiLCJGbGV4Ym94R3JpZCIsImp1c3RpZnkiLCJjb2xzcGFuIiwiSW5wdXQiLCJwbGFjZWhvbGRlciIsImNvbW1hbmRzTW9kZWwiLCJzb3J0YWJsZSIsIkNvbnRlbnRzIiwiQ2F0ZWdvcmllcyIsIkNvbnRlbnQiLCJDaGF0Ym90U3RhdHVzIiwibmFtZXNwYWNlIiwiYnJlYWRjcnVtYnMiLCJDb25maWRlbmNlIiwiSW5wdXRJbnRlZ2VyIiwibWluIiwibWF4IiwibWF4V2lkdGgiLCJwb3N0Zml4Iiwic2VuZE1lc3NhZ2UiLCJ1c2VOb2RlUmVkU29ja2V0IiwidGV4dEFsaWduIiwiTm90aWZpY2F0aW9uIiwibGFiZWxzIiwic2F2ZUNvbnRlbnQiLCJjcmVhdGVDb250ZW50IiwiQ09OVEVOVF9QTFVHSU5TIiwiZ3FsIiwiY2xpZW50IiwidXNlQXBvbGxvQ2xpZW50IiwiZGF0YSIsInVzZUNvbmZpZ3VyYXRpb24iLCJzdGF0ZSIsInNldFN0YXRlIiwicHV0IiwidXNlRmV0Y2giLCJoZWFkZXJzIiwianNvbmJpbl9rZXkiLCJoYXNTZWNyZXRLZXkiLCJhc3luYyIsInBsdWdpbnMiLCJxdWVyeSIsImZldGNoUG9saWN5IiwiY29udGVudHMiLCJwbHVnaW4iLCJmaWVsZHMiLCJyZWR1Y2UiLCJhY2MiLCJjb250ZW50IiwiY29udGVudF90aXRsZSIsImNvbnRlbnRfc2x1ZyIsImNvbnRlbnRfYm9keSIsImJvZHkiLCJjb250ZW50X25hbWVzcGFjZSIsImZsb3ciLCJ2ZXJzaW9uIiwiZ2l0aHViIiwia2V5d29yZHMiLCJ0YWdzIiwiYXV0aG9yIiwiYXV0aG9yX3VybCIsImluaXRpYWxDb25maWd1cmF0aW9uIiwicGF5bG9hZCIsImluaXRpYWxfY29uZmlndXJhdGlvbiIsImpzb25iaW5faWQiLCJocmVmIiwidGFyZ2V0IiwiZW1wdHlDb250ZW50IiwiY3VzdG9tIiwicGFkZGluZ0JvdHRvbSIsImhlaWdodCIsInNlY3JldENvbG9yIiwiUGluUG9pbnQiLCJJY29uIiwiY2xhc3NOYW1lIiwic2l6ZSIsIkltYWdlIiwiUmVhY3QiLCJyZW5kZXIiLCJ0aHVtYiIsIndpZHRoIiwibWF4SGVpZ2h0IiwidGhpcyIsInJhdGlvIiwiaW1hZ2VIZWlnaHQiLCJNYXRoIiwiZmxvb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJCYWxsb29uIiwidG9waWMiLCJ0cyIsIm9uRGVsZXRlIiwib25ab29tIiwiaW1hZ2UiLCJ0aHVtYkltYWdlIiwiY29uc29sZSIsImxvZyIsIlBvcG92ZXIiLCJvbk1vdXNlTGVhdmUiLCJEYXRlIiwiZGVmYXVsdFByb3BzIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImhhbmRsZUxvYWRlZCIsImJpbmQiLCJoYW5kbGVDbGljayIsIm5lZWRQcmVsb2FkIiwicHJlbG9hZCIsImNvbXBvbmVudERpZE1vdW50IiwicXVlcnlTZWxlY3RvciIsImJhY2tncm91bmRDb2xvciIsImUiLCJ0cmlnZ2VyIiwic2hvdyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2hpbGRyZW4iLCJwb2ludCIsInRleHQiLCJwb3BvdmVyIiwic2hvd1BvcG92ZXIiLCJpbmtDb2xvciIsIm9uRGVsZXRlUG9pbnQiLCJvblNob3dJbWFnZSIsInBhcnNlSW50IiwiY2xhc3NOYW1lcyIsInNyYyIsImRpc3BsYXkiLCJvbkxvYWQiLCJhbHQiLCJUb29sdGlwIiwidmlzaWJsZSIsInNwZWFrZXIiLCJXaGlzcGVyIiwicGxhY2VtZW50IiwidHJpZ2dlclJlZiIsIkdFVF9MT0NBVElPTl9TRUNSRVRTIiwic2VjcmV0cyIsInNldFNlY3JldHMiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsIm1hcmtlcnMiLCJmaWx0ZXIiLCJzZWNyZXQiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImxhdCIsImxuZyIsIm1pbkhlaWdodCIsInNlY3JldF91cmwiLCJtaW5XaWR0aCIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kU2l6ZSIsInRvIiwicGFnZXMiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ6SW5kZXgiLCJMb2FkZXIiLCJkZWZhdWx0Q2VudGVyIiwiZGVmYXVsdFpvb20iLCJib3VuZHMiLCJzZSIsIm53IiwicmVjb3JkcyIsInZhcmlhYmxlcyIsIndoZXJlIiwiVXNlclJlY29yZHMiLCJyZWNvcmQiLCJjb2x1bW5zIiwiY2VsbCIsInNlY3JldF90eXBlIiwibGlzdCIsImV4cGlyZURhdGUiLCJzZWNyZXRfZHVyYXRpb24iLCJub3ciLCJkdXJhdGlvbiIsImdldFRpbWUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJyb3VuZCIsInNlY3JldF9ib3VudHkiLCJzZWNyZXRfcGF5bWVudCIsIm9yZGVyX2luZm8iLCJlbWFpbCIsImN1cnJlbmN5IiwidG90YWxfYW1vdW50IiwidG9GaXhlZCIsInByb3ZpZGVyX3BheW1lbnRfY2hhcmdlX2lkIiwic3RhdHVzIiwicmVhZE9ubHkiLCJDb250ZW50QXV0b2NvbXBsZXRlIiwidXNlciIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJ1c2VybmFtZSIsInMiLCJqb2luIiwidmFsaWRhdGlvbiIsImFjdGl2ZUNoYXRib3RzIiwidXNlTUNDb250ZXh0IiwiVXNlckF1dG9jb21wbGV0ZSIsImNsZWFuYWJsZSIsImlzQXJyYXkiLCJjaGF0SWRzIiwiaXNFbXB0eSIsImZpbmQiLCJjaGF0IiwidHJhbnNwb3J0Iiwic29tZSIsImNoYXRib3QiLCJoYXNDaGF0Ym90IiwiY2hhdElkIiwidXNlcklkIiwicmVjaXBpZW50IiwiYm90Tm9kZSIsIm5vZGVJZCIsIlNlbGVjdFRyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJhY3RpdmVDaGF0Qm90Iiwicm93IiwiYmxvY2siLCJjb21wb25lbnRDbGFzcyIsInJlc2l6ZSIsIm9uS2V5VXAiLCJldmVudCIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInVzZU1vZGFsIiwiTW9kYWwiLCJpc1ZhbGlkTWVzc2FnZSIsIm1lc3NhZ2UiLCJvcGVuIiwiY2xvc2UiLCJ2YWxpZGF0ZSIsImVycm9yIiwiZGlzYWJsZSIsIm9wZW5XaXRoTW9kZWwiLCJvcGVuV2l0aCIsInZpZXciLCJTZW5kTWVzc2FnZUZvcm0iLCJsYWJlbFN1Ym1pdCIsImNoYXRCb3QiLCJtc2ciLCJXaWRnZXRGb3JtIiwiRm9vdGVyIiwiV2lkZ2V0cyIsInN0YXRzIiwiY2FuU2VuZCIsImZsb2F0IiwieCIsInkiLCJ3IiwiaCIsImlzUmVzaXphYmxlIiwiU2VuZE1lc3NhZ2VCdXR0b24iLCJTaW11bGF0b3JQYXJhbXNNb2RhbCIsInBhcmFtcyIsIm9uQ2FuY2VsIiwiYmFja2Ryb3AiLCJvbkhpZGUiLCJrZXlib2FyZCIsIm5ld0Zvcm1WYWx1ZSIsInZhbHVlcyIsImxhbmd1YWdlIiwiTGFuZ3VhZ2VQaWNrZXIiLCJQYW5lbE1lbnUiLCJkaXNwYXRjaCIsInNldFBhcmFtcyIsIkljb25CdXR0b24iLCJtYXJnaW5SaWdodCIsIndpdGhTdGF0ZSIsInNpbXVsYXRvciIsImluaXRpYWxTdGF0ZSIsInVzZUNvbnRleHQiLCJBcHBDb250ZXh0IiwiT2JqZWN0Iiwia2V5cyIsInVzZUVmZmVjdCIsImZvckVhY2giLCJmaWVsZCIsInVuZGVmaW5lZCIsImFjY3VtdWxhdG9yIiwidXNlUmVkdWNlciIsIm1lc3NhZ2VzIiwiZ2xvYmFscyIsIm9uUmVjZWl2ZSIsImVjaG8iLCJpbXBlcnNvbmF0ZWRVc2VyIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJzaW11bGF0b3JPcHRpb25zIiwidXNlU2ltdWxhdG9yIiwiY2xpY2tIYW5kbGVyIiwib2JqIiwibWVudSIsIm1lc3NhZ2VJZCIsImluYm91bmQiLCJvblNlbmQiLCJvbkNsZWFyIiwiYWN0aW9uIiwidG9BZGQiLCJtb21lbnQiLCJBbnN3ZXIiLCJxdWVzdGlvbiIsImFuc3dlciIsImluZGV4Iiwic2VsZWN0ZWQiLCJTdXJ2ZXJ5Vmlld2VyIiwicXVlc3Rpb25zIiwiQmFkZ2VJY29uVG9vbHRpcCIsImRvbSIsImZpbmRRdWVzdGlvbiIsImZpbmRQYXJlbnQiLCJwYXJlbnQiLCJoYXNDaGlsZHJlbiIsImdldExldmVscyIsInJlc3VsdCIsInJldGFnIiwibGV2ZWxzIiwiY291bnRlcnMiLCJyb290IiwiZ2V0UGF0aCIsImdldExhYmVsIiwidGFnIiwibGV2ZWwiLCJEcmFnSGFuZGxlIiwic29ydGFibGVIYW5kbGUiLCJRdWVzdGlvbiIsImFjdGl2ZSIsIlN1cnZleUVkaXRvckNvbnRleHQiLCJmb3JrcyIsImp1bXAiLCJqdW1wVG8iLCJ3YXJuaW5ncyIsImlkeCIsImZpbmRJbmRleCIsImlzRmlyc3RPZk5lc3RlZCIsImhhc0p1bXAiLCJjaGFpbiIsImZsYXR0ZW4iLCJmbGV4Iiwic29ydGFibGVFbGVtZW50IiwiSW50ZXJhY3Rpb25Nb2RhbCIsIm9rQnV0dG9uVGV4dCIsIm9uT2siLCJzaG93Q2FuY2VsQnV0dG9uIiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3VsZFNob3dNb2RhbCIsInNldFNob3VsZFNob3dNb2RhbCIsImhhbmRsZU9rIiwidXNlQ2FsbGJhY2siLCJoYW5kbGVDYW5jZWwiLCJva0xhYmVsIiwiY2FuY2VsTGFiZWwiLCJjdXJyZW50VmFsdWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsIlJlYWN0RE9NIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJleGNsdWRlIiwiZm9ybURlZmF1bHRWYWx1ZSIsIlNlbGVjdFBpY2tlciIsInJlbmRlck1lbnVJdGVtIiwicmVuZGVyVmFsdWUiLCJvbkNsZWFuIiwiQW5zd2VyVmFsdWUiLCJBbnN3ZXJGb3JtIiwib3JkZXIiLCJRdWVzdGlvbkRldGFpbENvbnRleHQiLCJ3aGF0IiwicHJvbXB0IiwiTXVsdGlwbGUiLCJsYWJlbEVtcHR5IiwiQ09OVFJPTFMiLCJkZWZhdWx0IiwiUXVlc3Rpb25EZXRhaWwiLCJvblJlbW92ZSIsIm9uQWRkIiwiY29uZmlndXJhdGlvbiIsIkRyb3Bkb3duIiwicmVuZGVyVGl0bGUiLCJhZnRlciIsImJlZm9yZSIsIm5lc3RlZCIsInJvd3MiLCJCdXR0b25Hcm91cCIsImNvbnRyb2wiLCJTb3J0YWJsZUNvbnRhaW5lciIsInNvcnRhYmxlQ29udGFpbmVyIiwiU3VydmV5RWRpdG9yIiwic2V0QWN0aXZlIiwib25Tb3J0RW5kIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsIm5ld1F1ZXN0aW9ucyIsImZyb20iLCJzdGFydEluZGV4Iiwic3BsaWNlIiwibW92ZWRRdWVzdGlvbiIsInByZXZpb3VzIiwiaGFzU3ViUXVlc3Rpb25zIiwic3dhcCIsImFjdGl2ZVF1ZXN0aW9uIiwiaGVscGVyQ2xhc3MiLCJ1c2VEcmFnSGFuZGxlIiwiaXRlbXMiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsInJlcGxhY2UiLCJyZW1vdmUiLCJuZXdRdWVzdGlvbiIsInVuaXF1ZUlkIiwiYWRkIiwiYXV0b2NvbXBsZXRlIiwiU3VydmV5Vmlld2VyIiwiZXhwb3J0cyIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJhcGkiLCJfX2VzTW9kdWxlIiwibG9jYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==